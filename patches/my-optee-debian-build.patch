diff --git a/common.mk b/common.mk
index aeb7b41..3883002 100644
--- a/common.mk
+++ b/common.mk
@@ -426,7 +426,7 @@ optee-client-clean-common:
 XTEST_COMMON_FLAGS ?= CROSS_COMPILE_HOST=$(CROSS_COMPILE_NS_USER)\
 	CROSS_COMPILE_TA=$(CROSS_COMPILE_S_USER) \
 	TA_DEV_KIT_DIR=$(OPTEE_OS_TA_DEV_KIT_DIR) \
-	OPTEE_CLIENT_EXPORT=$(OPTEE_CLIENT_EXPORT) \
+	OPTEE_CLIENT_EXPORT="$(OPTEE_CLIENT_EXPORT)/usr/" \
 	COMPILE_NS_USER=$(COMPILE_NS_USER) \
 	O=$(OPTEE_TEST_OUT_PATH)
 
@@ -453,7 +453,7 @@ xtest-patch-common:
 OPTEE_EXAMPLES_COMMON_FLAGS ?= HOST_CROSS_COMPILE=$(CROSS_COMPILE_NS_USER)\
 	TA_CROSS_COMPILE=$(CROSS_COMPILE_S_USER) \
 	TA_DEV_KIT_DIR=$(OPTEE_OS_TA_DEV_KIT_DIR) \
-	TEEC_EXPORT=$(OPTEE_CLIENT_EXPORT)
+	TEEC_EXPORT="$(OPTEE_CLIENT_EXPORT)/usr/"
 
 .PHONY: optee-examples-common
 optee-examples-common: optee-os optee-client
diff --git a/hikey960_debian.mk b/hikey960_debian.mk
new file mode 100644
index 0000000..4226437
--- /dev/null
+++ b/hikey960_debian.mk
@@ -0,0 +1,621 @@
+################################################################################
+# Following variables defines how the NS_USER (Non Secure User - Client
+# Application), NS_KERNEL (Non Secure Kernel), S_KERNEL (Secure Kernel) and
+# S_USER (Secure User - TA) are compiled
+################################################################################
+COMPILE_NS_USER   ?= 64
+override COMPILE_NS_KERNEL := 64
+COMPILE_S_USER    ?= 64
+COMPILE_S_KERNEL  ?= 64
+
+# Normal and secure world console UART: 6 (v2 or newer board) or 5 (v1 board)   
+CFG_CONSOLE_UART ?= 6                                                           
+# Needed by buildroot                                                           
+CFG_NW_CONSOLE_UART ?= $(CFG_CONSOLE_UART) 
+
+# eMMC flash size: 8 or 4 GB [default 8]
+#CFG_FLASH_SIZE ?= 8
+
+# IP-address to the HiKey device
+IP ?= 127.0.0.1
+
+# URL to images
+#SYSTEM_IMG_URL=http://snapshots.linaro.org/96boards/hikey/linaro/debian/latest/rootfs-linaro-stretch-developer-hikey-20200320-44.img.gz
+#SYSTEM_IMG_URL=http://snapshots.linaro.org/96boards/hikey/linaro/debian/latest/rootfs-linaro-stretch-developer-hikey-20200720-48.img.gz
+SYSTEM_IMG_URL=http://snapshots.linaro.org/96boards/hikey/linaro/debian/48/rootfs-linaro-stretch-developer-hikey-20200720-48.img.gz
+WIFI_FW_URL=http://ftp.de.debian.org/debian/pool/non-free/f/firmware-nonfree/firmware-ti-connectivity_20161130-5_all.deb
+
+################################################################################
+# Includes
+################################################################################
+include common.mk
+
+OPTEE_PKG_VERSION := $(shell cd $(OPTEE_OS_PATH) && git describe)-0
+
+################################################################################
+# Paths to git projects and various binaries
+################################################################################
+TF_A_PATH			?= $(ROOT)/trusted-firmware-a
+ifeq ($(DEBUG),1)
+TF_A_BUILD			?= debug
+else
+TF_A_BUILD			?= release
+endif
+
+EDK2_PATH 			?= $(ROOT)/edk2
+ifeq ($(DEBUG),1)
+EDK2_BUILD			?= DEBUG
+else
+EDK2_BUILD			?= RELEASE
+endif
+EDK2_BIN			?= $(EDK2_PATH)/Build/HiKey960/$(EDK2_BUILD)_$(EDK2_TOOLCHAIN)/FV/BL33_AP_UEFI.fd
+OPENPLATPKG_PATH		?= $(ROOT)/OpenPlatformPkg
+
+OUT_PATH			?=$(ROOT)/out
+MCUIMAGE_BIN			?= $(OPENPLATPKG_PATH)/Platforms/Hisilicon/HiKey960/Binary/lpm3.img
+BOOT_IMG			?=$(ROOT)/out/boot-fat.uefi.img
+NVME_IMG			?= $(OUT_PATH)/nvme.img
+SYSTEM_IMG			?= $(OUT_PATH)/debian_system.img
+WIFI_FW				?= $(OUT_PATH)/firmware-ti-connectivity_20161130-5_all.deb
+GRUB_PATH			?=$(ROOT)/grub
+GRUB_CONFIGFILE			?= $(OUT_PATH)/grub.configfile
+LLOADER_PATH			?=$(ROOT)/l-loader
+PATCHES_PATH			?=$(ROOT)/patches_hikey
+DEBPKG_PATH			?= $(OUT_PATH)/optee_$(OPTEE_PKG_VERSION)
+DEBPKG_SRC_PATH			?= $(ROOT)/debian-kernel-packaging
+DEBPKG_BIN_PATH			?= $(DEBPKG_PATH)/usr/bin
+DEBPKG_LIB_PATH			?= $(DEBPKG_PATH)/usr/lib/$(MULTIARCH)
+DEBPKG_TA_PATH			?= $(DEBPKG_PATH)/lib/optee_armtz
+DEBPKG_CONTROL_PATH		?= $(DEBPKG_PATH)/DEBIAN
+DEBPKG_ASSETS_PATH		?= $(DEBPKG_PATH)/opt/bstgw/assets
+
+IMAGE_TOOLS_PATH		?=$(ROOT)/tools-images-hikey960
+IMAGE_TOOLS_CONFIG		?=$(OUT_PATH)/config
+
+################################################################################
+# Targets
+################################################################################
+.PHONY: all
+all: arm-tf linux boot-img lloader system-img nvme deb
+
+.PHONY: clean
+clean: arm-tf-clean edk2-clean linux-clean optee-os-clean \
+		optee-client-clean xtest-clean optee-examples-clean \
+		boot-img-clean lloader-clean grub-clean deb-clean
+
+.PHONY: cleaner
+cleaner: clean prepare-cleaner linux-cleaner nvm-cleaner system-img-cleaner grub-cleaner
+
+# GCC Version 6 uses glibc 2.23, whereas 7 uses 2.25 and 8 uses 2.28
+# While Debian Buster (10) has glibc 2.28, Stretch (9) only has 2.24
+# --> Version 6 
+#  Problem: tee_bin shows relocation errors for optee 3.8
+#  Alternative Solution: update board Debian from Stretch to Buster which has
+#  gcc8 and libc 2.28!
+#AARCH32_GCC_VERSION = gcc-linaro-6.5.0-2018.12-i686_arm-linux-gnueabihf
+#SRC_AARCH32_GCC = https://releases.linaro.org/components/toolchain/binaries/latest-6/arm-linux-gnueabihf/${AARCH32_GCC_VERSION}.tar.xz
+
+#AARCH64_GCC_VERSION = gcc-linaro-6.5.0-2018.12-x86_64_aarch64-linux-gnu
+#SRC_AARCH64_GCC = https://releases.linaro.org/components/toolchain/binaries/latest-6/aarch64-linux-gnu/${AARCH64_GCC_VERSION}.tar.xz
+
+include toolchain.mk
+
+.PHONY: prepare
+prepare:
+	mkdir -p $(OUT_PATH)
+
+.PHONY: prepare-cleaner
+prepare-cleaner:
+	rm -rf $(ROOT)/out
+
+################################################################################
+# ARM Trusted Firmware
+################################################################################
+TF_A_EXPORTS ?= \
+	CROSS_COMPILE="$(CCACHE)$(AARCH64_CROSS_COMPILE)"
+
+TF_A_FLAGS ?= \
+	BL32=$(OPTEE_OS_HEADER_V2_BIN) \
+	BL32_EXTRA1=$(OPTEE_OS_PAGER_V2_BIN) \
+	BL32_EXTRA2=$(OPTEE_OS_PAGEABLE_V2_BIN) \
+	BL33=$(EDK2_BIN) \
+	SCP_BL2=$(MCUIMAGE_BIN) \
+	DEBUG=$(DEBUG) \
+	PLAT=hikey960 \
+	SPD=opteed
+
+ifeq ($(CFG_CONSOLE_UART),5)
+	TF_A_FLAGS += CRASH_CONSOLE_BASE=PL011_UART5_BASE
+endif
+
+.PHONY: arm-tf
+arm-tf: optee-os edk2
+	$(TF_A_EXPORTS) $(MAKE) -C $(TF_A_PATH) $(TF_A_FLAGS) all fip
+
+.PHONY: arm-tf-clean
+arm-tf-clean:
+	$(TF_A_EXPORTS) $(MAKE) -C $(TF_A_PATH) $(TF_A_FLAGS) clean
+
+################################################################################
+# EDK2 / Tianocore
+################################################################################
+EDK2_ARCH ?= AARCH64
+EDK2_DSC ?= OpenPlatformPkg/Platforms/Hisilicon/HiKey960/HiKey960.dsc
+EDK2_TOOLCHAIN ?= GCC49
+
+ifeq ($(CFG_CONSOLE_UART),5)
+	EDK2_BUILDFLAGS += -DSERIAL_BASE=0xFDF05000
+endif
+
+define edk2-call
+	$(EDK2_TOOLCHAIN)_$(EDK2_ARCH)_PREFIX=$(AARCH64_CROSS_COMPILE) \
+	build -n `getconf _NPROCESSORS_ONLN` -a $(EDK2_ARCH) \
+		-t $(EDK2_TOOLCHAIN) -p $(EDK2_DSC) \
+		-b $(EDK2_BUILD) $(EDK2_BUILDFLAGS)
+endef
+
+.PHONY: edk2
+edk2:
+	cd $(EDK2_PATH) && rm -rf OpenPlatformPkg && \
+		ln -s $(OPENPLATPKG_PATH)
+	set -e && cd $(EDK2_PATH) && source edksetup.sh && \
+		$(MAKE) -j1 -C $(EDK2_PATH)/BaseTools \
+			BUILD_CC="gcc $(call cc-option,gcc,-Wno-error=stringop-truncation,)" && \
+		$(call edk2-call)
+
+.PHONY: edk2-clean
+edk2-clean:
+	set -e && cd $(EDK2_PATH) && source edksetup.sh && \
+		$(call edk2-call) cleanall && \
+		$(MAKE) -j1 -C $(EDK2_PATH)/BaseTools clean
+	rm -rf $(EDK2_PATH)/Build
+	rm -rf $(EDK2_PATH)/Conf/.cache
+	rm -f $(EDK2_PATH)/Conf/build_rule.txt
+	rm -f $(EDK2_PATH)/Conf/target.txt
+	rm -f $(EDK2_PATH)/Conf/tools_def.txt
+
+################################################################################
+# Linux kernel
+################################################################################
+LINUX_DEFCONFIG_COMMON_ARCH ?= arm64
+# TODO: might instead use:
+#$(DEBPKG_SRC_PATH)/debian/config/config \
+#				$(DEBPKG_SRC_PATH)/debian/config/arm64/config \
+# instead of the default Linaro Linux (minimal?!) config
+# --> Debian config e.g. features NFTables, s.t. Buster default iptables works
+# rather than only iptables-legacy;
+# TODO: might need to check whether Debian is a superset or needs additional adds;
+LINUX_DEFCONFIG_COMMON_FILES ?= $(LINUX_PATH)/arch/arm64/configs/defconfig \
+				$(CURDIR)/kconfigs/hikey960_debian.conf \
+				$(PATCHES_PATH)/kernel_config/usb_net_dm9601.conf \
+				$(PATCHES_PATH)/kernel_config/ftrace.conf
+
+.PHONY: linux-defconfig
+linux-defconfig: $(LINUX_PATH)/.config
+
+LINUX_COMMON_FLAGS += ARCH=arm64 deb-pkg LOCALVERSION=-optee-rpb
+
+.PHONY: linux-gen_init_cpio
+linux-gen_init_cpio: linux-defconfig
+	$(MAKE) -C $(LINUX_PATH)/usr \
+		CROSS_COMPILE=$(CROSS_COMPILE_NS_KERNEL) \
+		ARCH=arm64 \
+		deb-pkg \
+		LOCALVERSION=-optee-rpb \
+		gen_init_cpio
+
+#LINUX_COMMON_FLAGS += ARCH=arm64 Image hisilicon/hi3660-hikey960.dtb
+
+.PHONY: linux
+linux: linux-common
+
+.PHONY: linux-defconfig-clean
+linux-defconfig-clean: linux-defconfig-clean-common
+
+LINUX_CLEAN_COMMON_FLAGS += ARCH=arm64
+
+.PHONY: linux-clean
+linux-clean: linux-clean-common
+	rm -f $(ROOT)/linux-*optee*.*
+
+LINUX_CLEANER_COMMON_FLAGS += ARCH=arm64
+
+.PHONY: linux-cleaner
+linux-cleaner: linux-cleaner-common
+
+################################################################################
+# OP-TEE
+################################################################################
+OPTEE_OS_COMMON_FLAGS += PLATFORM=hikey-hikey960 \
+			CFG_CONSOLE_UART=$(CFG_CONSOLE_UART)
+OPTEE_OS_COMMON_FLAGS += CFG_BSTGW_FIREWALL=y
+OPTEE_OS_CLEAN_COMMON_FLAGS += PLATFORM=hikey-hikey960
+
+.PHONY: optee-os
+optee-os: optee-os-common
+
+.PHONY: optee-os-clean
+optee-os-clean: optee-os-clean-common
+
+.PHONY: optee-client
+optee-client: optee-client-common
+
+.PHONY: optee-client-clean
+optee-client-clean: optee-client-clean-common
+
+################################################################################
+# xtest / optee_test
+################################################################################
+.PHONY: xtest
+xtest: xtest-common
+
+# FIXME:
+# "make clean" in xtest: fails if optee_os has been cleaned previously
+.PHONY: xtest-clean
+xtest-clean: xtest-clean-common
+	rm -rf $(OPTEE_TEST_OUT_PATH)
+
+.PHONY: xtest-patch
+xtest-patch: xtest-patch-common
+
+################################################################################
+# Sample applications / optee_examples
+################################################################################
+.PHONY: optee-examples
+optee-examples: optee-examples-common
+
+.PHONY: optee-examples-clean
+optee-examples-clean: optee-examples-clean-common
+
+################################################################################
+# grub
+################################################################################
+grub-flags := CC="$(CCACHE)gcc" \
+	TARGET_CC="$(AARCH64_CROSS_COMPILE)gcc" \
+	TARGET_OBJCOPY="$(AARCH64_CROSS_COMPILE)objcopy" \
+	TARGET_NM="$(AARCH64_CROSS_COMPILE)nm" \
+	TARGET_RANLIB="$(AARCH64_CROSS_COMPILE)ranlib" \
+	TARGET_STRIP="$(AARCH64_CROSS_COMPILE)strip" \
+	--disable-werror
+
+GRUB_MODULES += boot chain configfile echo efinet eval ext2 fat font gettext \
+                gfxterm gzio help linux loadenv lsefi normal part_gpt \
+                part_msdos read regexp search search_fs_file search_fs_uuid \
+                search_label terminal terminfo test tftp time
+
+$(GRUB_PATH)/configure: $(GRUB_PATH)/configure.ac
+	cd $(GRUB_PATH) && ./autogen.sh
+
+$(GRUB_PATH)/Makefile: $(GRUB_PATH)/configure
+	cd $(GRUB_PATH) && ./configure --target=aarch64 --enable-boot-time $(grub-flags)
+
+
+$(GRUB_CONFIGFILE): prepare
+	@echo "search.fs_label rootfs root" > $(GRUB_CONFIGFILE)
+	@echo "set prefix=(\$$root)'/boot/grub'" >> $(GRUB_CONFIGFILE)
+	@echo "configfile \$$prefix/grub.cfg" >> $(GRUB_CONFIGFILE)
+
+
+
+
+#		--config=$(PATCHES_PATH)/grub/grub.configfile \
+.PHONY: grub
+grub: $(GRUB_CONFIGFILE) prepare $(GRUB_PATH)/Makefile
+	$(MAKE) -C $(GRUB_PATH); \
+	cd $(GRUB_PATH) && ./grub-mkimage \
+		--verbose \
+		--output=$(OUT_PATH)/grubaa64.efi \
+		--config=$(GRUB_CONFIGFILE) \
+		--format=arm64-efi \
+		--directory=grub-core \
+		--prefix=/boot/grub \
+		$(GRUB_MODULES)
+
+.PHONY: grub-clean
+grub-clean:
+	if [ -e $(GRUB_PATH)/Makefile ]; then $(MAKE) -C $(GRUB_PATH) clean; fi
+	rm -f $(OUT_PATH)/grubaa64.efi
+
+.PHONY: grub-cleaner
+grub-cleaner: grub-clean
+	if [ -e $(GRUB_PATH)/Makefile ]; then $(MAKE) -C $(GRUB_PATH) distclean; fi
+	rm -f $(GRUB_PATH)/configure
+
+################################################################################
+# Boot Image
+################################################################################
+ifeq ($(CFG_CONSOLE_UART),6)
+GRUBCFG = $(PATCHES_PATH)/grub/grub_uart6.cfg
+else
+GRUBCFG = $(PATCHES_PATH)/grub/grub_uart5.cfg
+endif
+
+
+.PHONY: boot-img
+boot-img: edk2 grub
+	rm -f $(BOOT_IMG)
+	mformat -i $(BOOT_IMG) -n 64 -h 255 -T 131072 -v "BOOT IMG" -C ::
+	mcopy -i $(BOOT_IMG) $(LINUX_PATH)/arch/arm64/boot/Image ::
+	mcopy -i $(BOOT_IMG) $(LINUX_PATH)/arch/arm64/boot/dts/hisilicon/hi3660-hikey960.dtb ::
+	mmd -i $(BOOT_IMG) ::/EFI
+	mmd -i $(BOOT_IMG) ::/EFI/BOOT
+	mcopy -i $(BOOT_IMG) $(OUT_PATH)/grubaa64.efi ::/EFI/BOOT/
+	mcopy -i $(BOOT_IMG) $(GRUBCFG) ::/EFI/BOOT/grub.cfg
+	mcopy -i $(BOOT_IMG) $(EDK2_PATH)/Build/HiKey960/$(EDK2_BUILD)_$(EDK2_TOOLCHAIN)/$(EDK2_ARCH)/AndroidFastbootApp.efi ::/EFI/BOOT/fastboot.efi
+
+.PHONY: boot-img-clean
+boot-img-clean:
+	rm -f $(BOOT_IMG)
+
+# missing: atf-fb
+
+################################################################################
+# system image
+################################################################################
+.PHONY: system-img
+system-img: prepare
+ifeq ("$(wildcard $(SYSTEM_IMG))","")
+	@echo "Downloading Debian root fs ..."
+	wget $(SYSTEM_IMG_URL) -O $(SYSTEM_IMG).gz
+	gunzip $(SYSTEM_IMG).gz
+endif
+ifeq ("$(wildcard $(WIFI_FW))","")
+	@echo "Downloading Wi-Fi firmware package ..."
+	wget $(WIFI_FW_URL) -O $(WIFI_FW)
+endif
+
+.PHONY: system-cleaner
+system-img-cleaner:
+	rm -f $(SYSTEM_IMG)
+	rm -f $(WIFI_FW)
+
+################################################################################
+# l-loader
+################################################################################
+.PHONY: lloader
+lloader: arm-tf edk2
+	cd $(LLOADER_PATH) && \
+		ln -sf $(TF_A_PATH)/build/hikey960/$(TF_A_BUILD)/bl1.bin && \
+		ln -sf $(TF_A_PATH)/build/hikey960/$(TF_A_BUILD)/bl2.bin && \
+		ln -sf $(EDK2_BIN) && \
+		$(MAKE) hikey960 PTABLE_LST=linux-32g
+
+.PHONY: lloader-clean
+lloader-clean:
+	$(MAKE) -C $(LLOADER_PATH) hikey960-clean
+
+################################################################################
+# nvme image
+#
+# nvme partition is used to store UEFI non-volatile variables,
+# but nvme image is currently an empty list
+################################################################################
+.PHONY: nvme
+nvme: prepare
+ifeq ("$(wildcard $(NVME_IMG))","")
+	dd if=/dev/zero of=$(NVME_IMG) bs=1K count=128
+endif
+
+.PHONY: nvme-cleaner
+nvme-cleaner:
+	rm -f $(NVME_IMG)
+
+################################################################################
+# Debian package
+################################################################################
+define CONTROL_TEXT
+Package: op-tee
+Version: $(OPTEE_PKG_VERSION)
+Section: base
+Priority: optional
+Architecture: arm64
+Depends:
+Maintainer: Joakim Bech <joakim.bech@linaro.org>
+Description: OP-TEE client binaries, test program and Trusted Applications
+ Package contains tee-supplicant, libtee.so, xtest, optee-examples and a set of
+ Trusted Applications.
+ NOTE! This package should only be used for testing and development.
+endef
+
+export CONTROL_TEXT
+
+.PHONY: deb
+deb: prepare xtest optee-examples optee-client
+	@mkdir -p $(DEBPKG_BIN_PATH) && cd $(DEBPKG_BIN_PATH) && \
+		cp -f $(OPTEE_CLIENT_EXPORT)/usr/sbin/tee-supplicant . && \
+		cp -f $(OPTEE_TEST_OUT_PATH)/xtest/xtest .
+	@if [ -e $(OPTEE_EXAMPLES_PATH)/out/ca ]; then \
+		for example in $(OPTEE_EXAMPLES_PATH)/out/ca/*; do \
+			cp -f $$example $(DEBPKG_BIN_PATH)/; \
+		done; \
+	fi
+	@mkdir -p $(DEBPKG_ASSETS_PATH) && cd $(DEBPKG_ASSETS_PATH) && \
+		cp -f $(OPTEE_EXAMPLES_PATH)/sock_helper/assets/*.html . && \
+		cp -Lfr $(OPTEE_EXAMPLES_PATH)/sock_helper/assets/webapp-npfctl . && \
+		cp -Lfr $(OPTEE_EXAMPLES_PATH)/sock_helper/assets/apache2 .
+	@mkdir -p $(DEBPKG_LIB_PATH) && cd $(DEBPKG_LIB_PATH) && \
+		cp $(OPTEE_CLIENT_EXPORT)/usr/lib/libtee* .
+	@mkdir -p $(DEBPKG_TA_PATH) && cd $(DEBPKG_TA_PATH) && \
+		cp $(OPTEE_EXAMPLES_PATH)/out/ta/*.ta . && \
+		find $(OPTEE_TEST_OUT_PATH)/ta -name "*.ta" -exec cp {} . \;
+	@mkdir -p $(DEBPKG_CONTROL_PATH)
+	@echo "$$CONTROL_TEXT" > $(DEBPKG_CONTROL_PATH)/control
+	@cd $(OUT_PATH) && dpkg-deb --build optee_$(OPTEE_PKG_VERSION)
+
+.PHONY: deb-clean
+deb-clean:
+	rm -rf $(OUT_PATH)/optee_*
+
+################################################################################
+# Send built files to the host, note this require that the IP corresponds to
+# the device. One can run:
+#   IP=111.222.333.444 make send
+# If you don't want to edit the makefile itself.
+################################################################################
+.PHONY: send
+send:
+	@tar czf - $(shell cd $(OUT_PATH) && echo $(OUT_PATH)/*.deb && echo $(ROOT)/linux-image-*.deb) | ssh linaro@$(IP) "cd /tmp; tar xvzf -"
+	@echo "Files has been sent to $$IP/tmp/ and $$IP/tmp/out"
+	@echo "On the device, run:"
+	@echo " dpkg --force-all -i /tmp/out/*.deb"
+	@echo " dpkg --force-all -i /tmp/linux-image-*.deb"
+
+################################################################################
+# Flash
+################################################################################
+define flash_help
+	@read -r -p "Connect HiKey960 to power up (press enter)" dummy
+	@read -r -p "Connect USB OTG cable, the micro USB cable (press enter)" dummy
+endef
+
+.PHONY: recov_cfg
+recov_cfg:
+	@echo "./hisi-sec_usb_xloader.img 0x00020000" > $(IMAGE_TOOLS_CONFIG)
+	@echo "./hisi-sec_uce_boot.img 0x6A908000" >> $(IMAGE_TOOLS_CONFIG)
+	@echo "./recovery.bin 0x1AC00000" >> $(IMAGE_TOOLS_CONFIG)
+
+.PHONY: recovery
+recovery: recov_cfg
+	@echo "Enter recovery mode to flash a new bootloader"
+	@echo
+	@echo "Make sure udev permissions are set appropriately:"
+	@echo "  # /etc/udev/rules.d/hikey960.rules"
+	@echo '  SUBSYSTEM=="usb", ATTRS{idVendor}=="18d1", ATTRS{idProduct}=="d00d", MODE="0666"'
+	@echo '  SUBSYSTEM=="usb", ATTRS{idVendor}=="12d1", MODE="0666", ENV{ID_MM_DEVICE_IGNORE}="1"'
+	@echo
+	@echo "Set jumpers or switches as follows:"
+	@echo "Jumper 1-2: Closed	or	Switch	1: On"
+	@echo "       3-4: Closed	or		2: On"
+	@echo "       5-6: Open	or		3: Off"
+	@read -r -p "Press enter to continue" dummy
+	@echo
+	$(call flash_help)
+	@echo
+	@echo "Check the device node (/dev/ttyUSBx) of the micro USB connection"
+	@echo "Note the value x of the device node. Default is 1"
+	@read -r -p "Enter the device node. Press enter for /dev/ttyUSB1: " DEV && \
+		DEV=$${DEV:-/dev/ttyUSB1} && \
+		cd $(IMAGE_TOOLS_PATH) && \
+		ln -sf $(LLOADER_PATH)/recovery.bin && \
+		sudo ./hikey_idt -c $(IMAGE_TOOLS_CONFIG) -p $$DEV && \
+		rm -f $(IMAGE_TOOLS_CONFIG)
+	@echo
+	@echo "If you see dots starting to appear on the console,"
+	@echo "press f ON THE CONSOLE (NOT HERE!) to run fastboot."
+	@echo "You have 10 seconds! Go!"
+	@echo "If not, fastboot should load automatically."
+	@read -r -p "Press enter (HERE) to continue flashing" dummy
+	@$(MAKE) --no-print flash FROM_RECOVERY=1
+
+.PHONY: flash
+flash:
+ifneq ($(FROM_RECOVERY),1)
+	@echo "Flash binaries using fastboot"
+	@echo
+	@echo "Set jumpers or switches as follows:"
+	@echo "Jumper 1-2: Closed	or	Switch	1: On"
+	@echo "       3-4: Open	or		2: Off"
+	@echo "       5-6: Closed	or		3: On"
+	@read -r -p "Press enter to continue" dummy
+	@echo
+	$(call flash_help)
+endif
+	@echo "Wait until you see the (UART) message"
+	@echo "    \"Android Fastboot mode - version x.x.\""
+	@echo "     Press RETURN or SPACE key to quit.\""
+	@echo "It can take a while for the fastboot device to come up,"
+	@echo "so please wait ~10 seconds."
+	@read -r -p "Then press enter to continue flashing" dummy
+	@echo
+	fastboot flash ptable $(LLOADER_PATH)/prm_ptable.img
+	fastboot flash xloader $(IMAGE_TOOLS_PATH)/hisi-sec_xloader.img
+	fastboot flash fastboot $(LLOADER_PATH)/l-loader.bin
+	fastboot flash fip $(TF_A_PATH)/build/hikey960/$(TF_A_BUILD)/fip.bin
+	fastboot flash nvme $(IMAGE_TOOLS_PATH)/hisi-nvme.img
+	fastboot flash boot $(BOOT_IMG)
+	fastboot flash system $(SYSTEM_IMG)
+
+.PHONY: flash-fip
+flash-fip:
+	fastboot flash fastboot $(TF_A_PATH)/build/hikey/$(TF_A_BUILD)/fip.bin
+
+.PHONY: flash-boot-img
+flash-boot-img: boot-img
+	fastboot flash boot $(BOOT_IMG)
+
+.PHONY: flash-system-img
+flash-system-img: system-img
+	fastboot flash system $(SYSTEM_IMG)
+
+################################################################################
+# Bastion Gateway
+################################################################################
+
+.PHONY: nvlist
+nvlist: optee-os optee-client nvlist-tzr nvlist-nw
+
+.PHONY: nvlist-tzr
+nvlist-tzr: optee-os
+	$(MAKE) -C ../nvlist $(OPTEE_EXAMPLES_COMMON_FLAGS) nvlist-tzr
+	$(MAKE) -C ../nvlist $(OPTEE_EXAMPLES_COMMON_FLAGS) prepare-for-rootfs
+
+.PHONY: nvlist-nw
+nvlist-nw: optee-client
+	$(MAKE) -C ../nvlist $(OPTEE_EXAMPLES_COMMON_FLAGS) --no-builtin-variables nvlist
+
+.PHONY: cdb
+cdb: optee-os optee-client cdb-tzr cdb-nw
+
+.PHONY: cdb-tzr
+cdb-tzr: optee-os
+	$(MAKE) -C ../libcdb $(OPTEE_EXAMPLES_COMMON_FLAGS) cdb-tzr
+	$(MAKE) -C ../libcdb $(OPTEE_EXAMPLES_COMMON_FLAGS) prepare-for-rootfs
+
+.PHONY: cdb-nw
+cdb-nw: optee-client
+	$(MAKE) -C ../libcdb $(OPTEE_EXAMPLES_COMMON_FLAGS) --no-builtin-variables cdb
+
+LIBNPF_NW_FLAGS = NV_NW_OUT=../../../nvlist/nw-out \
+	CDB_NW_OUT=../../../libcdb/nw-out \
+	QSBR_NW_OUT=../../../libqsbr/nw-out
+
+# TODO: get rid of qsbr-nw dependency
+.PHONY: libnpf
+libnpf: optee-os optee-client qsbr-nw nvlist cdb libnpf-tzr libnpf-nw
+
+.PHONY: libnpf-tzr
+libnpf-tzr: optee-os nvlist-tzr cdb-tzr
+	$(MAKE) -C ../npf $(OPTEE_EXAMPLES_COMMON_FLAGS) libnpf-tzr
+	$(MAKE) -C ../npf $(OPTEE_EXAMPLES_COMMON_FLAGS) prepare-for-rootfs
+
+.PHONY: libnpf-nw
+libnpf-nw: optee-client nvlist-nw cdb-nw
+	$(MAKE) -C ../npf $(OPTEE_EXAMPLES_COMMON_FLAGS) $(LIBNPF_NW_FLAGS) --no-builtin-variables libnpf
+
+.PHONY: npfctl
+npfctl: optee-client libnpf-nw
+	$(MAKE) -C ../npf $(OPTEE_EXAMPLES_COMMON_FLAGS) $(LIBNPF_NW_FLAGS) --no-builtin-variables npfctl
+
+.PHONY: lpm
+liblpm: optee-os optee-client lpm-tzr lpm-nw
+
+.PHONY: lpm-tzr
+lpm-tzr: optee-os
+	$(MAKE) -C ../liblpm $(OPTEE_EXAMPLES_COMMON_FLAGS) lpm-tzr
+	$(MAKE) -C ../liblpm $(OPTEE_EXAMPLES_COMMON_FLAGS) prepare-for-rootfs
+
+.PHONY: lpm-nw
+lpm-nw: optee-client
+	$(MAKE) -C ../liblpm $(OPTEE_EXAMPLES_COMMON_FLAGS) $(LIBNPF_NW_FLAGS) --no-builtin-variables lpm
+
+.PHONY: qsbr
+qsbr: optee-os optee-client qsbr-tzr qsbr-nw
+
+.PHONY: qsbr-tzr
+qsbr-tzr: optee-os
+	$(MAKE) -C ../libqsbr $(OPTEE_EXAMPLES_COMMON_FLAGS) qsbr-tzr
+	$(MAKE) -C ../libqsbr $(OPTEE_EXAMPLES_COMMON_FLAGS) prepare-for-rootfs
+
+.PHONY: qsbr-nw
+qsbr-nw: optee-client
+	$(MAKE) -C ../libqsbr $(OPTEE_EXAMPLES_COMMON_FLAGS) $(LIBNPF_NW_FLAGS) --no-builtin-variables qsbr
diff --git a/imx-nitrogen6q.mk b/imx-nitrogen6q.mk
new file mode 100644
index 0000000..d1998fa
--- /dev/null
+++ b/imx-nitrogen6q.mk
@@ -0,0 +1,265 @@
+################################################################################
+# Following variables defines how the NS_USER (Non Secure User - Client
+# Application), NS_KERNEL (Non Secure Kernel), S_KERNEL (Secure Kernel) and
+# S_USER (Secure User - TA) are compiled
+################################################################################
+override COMPILE_NS_USER   := 32
+override COMPILE_NS_KERNEL := 32
+override COMPILE_S_USER    := 32
+override COMPILE_S_KERNEL  := 32
+
+################################################################################
+# Includes
+################################################################################
+include common.mk
+
+OPTEE_PKG_VERSION := $(shell cd $(OPTEE_OS_PATH) && git describe)-0
+
+################################################################################
+# Paths to git projects and various binaries
+################################################################################
+OUT_PATH				?=$(ROOT)/out
+
+DEBPKG_PATH				?= $(OUT_PATH)/optee_$(OPTEE_PKG_VERSION)
+DEBPKG_BIN_PATH			?= $(DEBPKG_PATH)/usr/bin
+DEBPKG_LIB_PATH			?= $(DEBPKG_PATH)/usr/lib/$(MULTIARCH)
+DEBPKG_TA_PATH			?= $(DEBPKG_PATH)/lib/optee_armtz
+DEBPKG_CONTROL_PATH		?= $(DEBPKG_PATH)/DEBIAN
+DEBPKG_ASSETS_PATH		?= $(DEBPKG_PATH)/opt/bstgw/assets
+
+################################################################################
+# Targets
+################################################################################
+.PHONY: all
+all: optee-os optee-os-common optee-client xtest optee-examples deb
+
+# TODO: add bstgw libs/etc.
+.PHONY: clean
+clean: optee-os-clean optee-client-clean xtest-clean optee-examples-clean \
+	deb-clean webapp-clean
+
+.PHONY: cleaner
+cleaner: clean prepare-cleaner
+
+include toolchain.mk
+
+.PHONY: prepare
+prepare:
+	mkdir -p $(OUT_PATH)
+
+.PHONY: prepare-cleaner
+prepare-cleaner:
+	rm -rf $(ROOT)/out
+
+################################################################################
+# OP-TEE
+################################################################################
+
+# Variables from SeCloak
+OPTEE_OS_COMMON_FLAGS += ARCH=arm PLATFORM=imx-mx6qsabrelite2g \
+	CFG_BUILT_IN_ARGS=y CFG_PAGEABLE_ADDR=0 \
+	CFG_NS_ENTRY_ADDR=0x10800000 CFG_DT=y CFG_DT_ADDR=0x13000000 \
+	CFG_BOOT_SYNC_CPU=n CFG_BOOT_SECONDARY_REQUEST=y CFG_PSCI_ARM32=y \
+	CFG_IMG_ADDR=0x8dffffe4 CFG_IMG_ENTRY=0x8e000000
+
+# only that way the ifeq(fw,y) code in plat-imx/conf.mk is executed !!
+OPTEE_OS_COMMON_FLAGS += CFG_BSTGW_FIREWALL=y
+OPTEE_OS_COMMON_FLAGS += CFG_BSTGW_VNIC=y
+OPTEE_OS_COMMON_FLAGS += CFG_BSTGW_SW_NIC=y
+OPTEE_OS_COMMON_FLAGS += CFG_SECLOAK_EMULATION=y
+
+OPTEE_OS_COMMON_FLAGS += CFG_BSTGW_CNTR=y
+
+#OPTEE_OS_COMMON_FLAGS += CFG_CORE_WORKAROUND_SPECTRE_BP=n CFG_CORE_WORKAROUND_NSITR_CACHE_PRIME=n \
+	CFG_CORE_WORKAROUND_SPECTRE_BP_SEC=n CFG_SM_NO_CYCLE_COUNTING=n
+
+# Our adapted values
+# consider increasing to 6-8
+OPTEE_OS_COMMON_FLAGS += CFG_NUM_THREADS=8
+
+# For Development
+#OPTEE_OS_COMMON_FLAGS += DEBUG=y
+# error + warning + debug
+#OPTEE_OS_COMMON_FLAGS += CFG_TEE_CORE_LOG_LEVEL=3
+#OPTEE_OS_COMMON_FLAGS += CFG_TEE_TA_LOG_LEVEL=3
+
+
+# For Evaluation
+OPTEE_OS_COMMON_FLAGS += CFG_TEE_CORE_DEBUG=n
+OPTEE_OS_COMMON_FLAGS += DEBUG=n # TODO: or define not at all?!
+# error-only
+OPTEE_OS_COMMON_FLAGS += CFG_TEE_CORE_LOG_LEVEL=1
+OPTEE_OS_COMMON_FLAGS += CFG_TEE_TA_LOG_LEVEL=1
+
+
+# currently conflicts with mapping whole NSEC mem
+OPTEE_OS_COMMON_FLAGS += CFG_CORE_DYN_SHM=n
+
+#OPTEE_OS_COMMON_FLAGS += CFG_CORE_HEAP_SIZE=131072
+#OPTEE_OS_COMMON_FLAGS += CFG_CORE_HEAP_SIZE=0x00400000 # 4MB
+OPTEE_OS_COMMON_FLAGS += CFG_CORE_HEAP_SIZE=0x00600000 # 6MB
+
+
+# Our values for 1GB
+#CFG_IMG_ADDR=0x4dffffe4 CFG_IMG_ENTRY=0x4e000000
+
+# SeCloak's old values
+#OPTEE_OS_COMMON_FLAGS += CFG_TEE_CORE_LOG_LEVEL=4
+#CFG_IMG_ADDR=0x4bffffe4 CFG_IMG_ENTRY=0x4c000000
+#OPTEE_OS_COMMON_FLAGS += DEBUG=y
+
+OPTEE_OS_CLEAN_COMMON_FLAGS += ARCH=arm PLATFORM=imx-mx6qsabrelite2g
+
+.PHONY: optee-os
+optee-os: optee-os-common
+
+.PHONY: optee-os-clean
+optee-os-clean: optee-os-clean-common
+
+.PHONY: optee-client
+optee-client: optee-client-common
+
+.PHONY: optee-client-clean
+optee-client-clean: optee-client-clean-common
+
+################################################################################
+# xtest / optee_test
+################################################################################
+.PHONY: xtest
+xtest: xtest-common
+
+# FIXME:
+# "make clean" in xtest: fails if optee_os has been cleaned previously
+.PHONY: xtest-clean
+xtest-clean: xtest-clean-common
+	rm -rf $(OPTEE_TEST_OUT_PATH)
+
+.PHONY: xtest-patch
+xtest-patch: xtest-patch-common
+
+################################################################################
+# Sample applications / optee_examples
+################################################################################
+.PHONY: optee-examples
+optee-examples: optee-examples-common
+
+.PHONY: optee-examples-clean
+optee-examples-clean: optee-examples-clean-common
+
+################################################################################
+# Debian package
+################################################################################
+define CONTROL_TEXT
+Package: op-tee
+Version: $(OPTEE_PKG_VERSION)
+Section: base
+Priority: optional
+Architecture: armhf
+Depends:
+Maintainer: Joakim Bech <joakim.bech@linaro.org>
+Description: OP-TEE client binaries, test program and Trusted Applications
+ Package contains tee-supplicant, libtee.so, xtest, optee-examples and a set of
+ Trusted Applications.
+ NOTE! This package should only be used for testing and development.
+endef
+
+export CONTROL_TEXT
+
+.PHONY: deb
+deb: prepare xtest optee-examples optee-client webapp
+	@mkdir -p $(DEBPKG_BIN_PATH) && cd $(DEBPKG_BIN_PATH) && \
+		cp -f $(OPTEE_CLIENT_EXPORT)/usr/sbin/tee-supplicant . && \
+		cp -f $(OPTEE_TEST_OUT_PATH)/xtest/xtest .
+	@if [ -e $(OPTEE_EXAMPLES_PATH)/out/ca ]; then \
+		for example in $(OPTEE_EXAMPLES_PATH)/out/ca/*; do \
+			cp -f $$example $(DEBPKG_BIN_PATH)/; \
+		done; \
+	fi
+	@mkdir -p $(DEBPKG_ASSETS_PATH) && cd $(DEBPKG_ASSETS_PATH) && \
+		cp -f $(OPTEE_EXAMPLES_PATH)/sock_helper/assets/*.html . && \
+		cp -Lfr $(OPTEE_EXAMPLES_PATH)/sock_helper/assets/webapp-npfctl . && \
+		cp -Lfr $(OPTEE_EXAMPLES_PATH)/sock_helper/assets/apache2 . && \
+		cp -Lfr $(OPTEE_EXAMPLES_PATH)/sock_helper/externalAssets/webapp_external .
+	@mkdir -p $(DEBPKG_LIB_PATH) && cd $(DEBPKG_LIB_PATH) && \
+		cp $(OPTEE_CLIENT_EXPORT)/usr/lib/libtee* .
+	@mkdir -p $(DEBPKG_TA_PATH) && cd $(DEBPKG_TA_PATH) && \
+		cp $(OPTEE_EXAMPLES_PATH)/out/ta/*.ta . && \
+		find $(OPTEE_TEST_OUT_PATH)/ta -name "*.ta" -exec cp {} . \;
+	@mkdir -p $(DEBPKG_CONTROL_PATH)
+	@echo "$$CONTROL_TEXT" > $(DEBPKG_CONTROL_PATH)/control
+	@cd $(OUT_PATH) && dpkg-deb --build optee_$(OPTEE_PKG_VERSION)
+
+.PHONY: deb-clean
+deb-clean:
+	rm -rf $(OUT_PATH)/optee_*
+
+################################################################################
+# Bastion Gateway
+################################################################################
+
+.PHONY: nvlist
+nvlist: optee-os optee-client nvlist-tzr #nvlist-nw
+
+.PHONY: nvlist-tzr
+nvlist-tzr: optee-os
+	$(MAKE) -C ../nvlist $(OPTEE_EXAMPLES_COMMON_FLAGS) nvlist-tzr
+	$(MAKE) -C ../nvlist $(OPTEE_EXAMPLES_COMMON_FLAGS) prepare-for-rootfs
+
+#.PHONY: nvlist-nw
+#nvlist-nw: optee-client
+#	$(MAKE) -C ../nvlist $(OPTEE_EXAMPLES_COMMON_FLAGS) --no-builtin-variables nvlist
+
+.PHONY: cdb
+cdb: optee-os optee-client cdb-tzr #cdb-nw
+
+.PHONY: cdb-tzr
+cdb-tzr: optee-os
+	$(MAKE) -C ../libcdb $(OPTEE_EXAMPLES_COMMON_FLAGS) cdb-tzr
+	$(MAKE) -C ../libcdb $(OPTEE_EXAMPLES_COMMON_FLAGS) prepare-for-rootfs
+
+#.PHONY: cdb-nw
+#cdb-nw: optee-client
+#	$(MAKE) -C ../libcdb $(OPTEE_EXAMPLES_COMMON_FLAGS) --no-builtin-variables cdb
+
+LIBNPF_NW_FLAGS = NV_NW_OUT=../../../nvlist/nw-out \
+	CDB_NW_OUT=../../../libcdb/nw-out \
+	QSBR_NW_OUT=../../../libqsbr/nw-out
+
+# TODO: get rid of qsbr-nw dependency
+.PHONY: libnpf
+libnpf: optee-os optee-client qsbr-nw nvlist cdb libnpf-tzr #libnpf-nw
+
+.PHONY: libnpf-tzr
+libnpf-tzr: optee-os nvlist-tzr cdb-tzr
+	$(MAKE) -C ../npf $(OPTEE_EXAMPLES_COMMON_FLAGS) libnpf-tzr
+	$(MAKE) -C ../npf $(OPTEE_EXAMPLES_COMMON_FLAGS) prepare-for-rootfs
+
+.PHONY: lpm
+liblpm: optee-os optee-client lpm-tzr #lpm-nw
+
+.PHONY: lpm-tzr
+lpm-tzr: optee-os
+	$(MAKE) -C ../liblpm $(OPTEE_EXAMPLES_COMMON_FLAGS) lpm-tzr
+	$(MAKE) -C ../liblpm $(OPTEE_EXAMPLES_COMMON_FLAGS) prepare-for-rootfs
+
+.PHONY: qsbr
+qsbr: optee-os optee-client qsbr-tzr qsbr-nw
+
+.PHONY: qsbr-tzr
+qsbr-tzr: optee-os
+	$(MAKE) -C ../libqsbr $(OPTEE_EXAMPLES_COMMON_FLAGS) qsbr-tzr
+	$(MAKE) -C ../libqsbr $(OPTEE_EXAMPLES_COMMON_FLAGS) prepare-for-rootfs
+
+.PHONY: qsbr-nw
+qsbr-nw: optee-client
+	$(MAKE) -C ../libqsbr $(OPTEE_EXAMPLES_COMMON_FLAGS) $(LIBNPF_NW_FLAGS) --no-builtin-variables qsbr
+
+# WASM WebApp
+.PHONY: webapp
+webapp:
+	cd ../wasm_npfctl; emmake make; cd ../build
+
+.PHONY: webapp-clean
+webapp-clean:
+	cd ../wasm_npfctl; emmake make clean; cd ../build
+
diff --git a/kconfigs/hikey960_debian.conf b/kconfigs/hikey960_debian.conf
new file mode 100644
index 0000000..535691e
--- /dev/null
+++ b/kconfigs/hikey960_debian.conf
@@ -0,0 +1,42 @@
+#from hikey_debian.conf
+CONFIG_TEE=y
+CONFIG_OPTEE=y
+CONFIG_PINCTRL_SINGLE=y
+CONFIG_DEBUG_INFO=n
+CONFIG_EXT4_FS=y
+
+#from hikey960.conf
+CONFIG_SQUASHFS_FILE_DIRECT=y
+CONFIG_SQUASHFS_DECOMP_MULTI_PERCPU=y
+CONFIG_SQUASHFS_XATTR=y
+CONFIG_SQUASHFS_LZ4=y
+CONFIG_SQUASHFS_LZO=y
+CONFIG_SQUASHFS_XZ=y
+CONFIG_SQUASHFS_4K_DEVBLK_SIZE=y
+
+CONFIG_SCSI_UFSHCD=y
+CONFIG_SCSI_UFSHCD_PLATFORM=y
+CONFIG_SCSI_UFS_HISI=y
+
+CONFIG_F2FS_FS=y
+
+CONFIG_STAGING=y # Note: dependency of CONFIG_ION
+
+CONFIG_CFG80211=y
+CONFIG_MAC80211=y
+CONFIG_RFKILL=y
+CONFIG_WLCORE=y
+CONFIG_WL18XX=y
+CONFIG_WLCORE_SDIO=y
+
+#actually ION is a memory allocator for buffers shareable across drivers (DMA?)
+#but it seems that OP-TEE uses it for SDP (secure data path), and regression test
+#1014 will fail if it is disabled
+CONFIG_ANDROID=y #TODO: We don't use Android, but CONFIG_ION depends on it
+CONFIG_ION=y
+CONFIG_ION_UNMAPPED_HEAP=y
+
+# TODO: unclear whether this is needed (added by linaro swg = secure working group)
+CONFIG_ION_DUMMY_UNMAPPED_HEAP=y
+CONFIG_ION_DUMMY_UNMAPPED_BASE=0x3e800000
+CONFIG_ION_DUMMY_UNMAPPED_SIZE=0x00400000
diff --git a/toolchain.mk b/toolchain.mk
index 8bc4b16..53322da 100644
--- a/toolchain.mk
+++ b/toolchain.mk
@@ -22,7 +22,7 @@ define dltc
 	@if [ ! -d "$(1)" ]; then \
 		mkdir -p $(1); \
 		echo "Downloading $(3) ..."; \
-		curl -s -L $(2) -o $(TOOLCHAIN_ROOT)/$(3).tar.xz; \
+		curl -L $(2) -o $(TOOLCHAIN_ROOT)/$(3).tar.xz; \
 		tar xf $(TOOLCHAIN_ROOT)/$(3).tar.xz -C $(1) --strip-components=1; \
 	fi
 endef
