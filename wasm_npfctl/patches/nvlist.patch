diff --git a/pkg/Makefile b/pkg/Makefile
deleted file mode 100644
index 88528a9..0000000
--- a/pkg/Makefile
+++ /dev/null
@@ -1,21 +0,0 @@
-PROJ=	libnv
-
-all:
-	@ echo "targets"
-	@ echo "	make rpm"
-	@ echo "	make deb"
-
-rpm:
-	mkdir -p SOURCES && tar czpvf SOURCES/$(PROJ).tar.gz ../src
-	rpmbuild -ba -v --define "_topdir ${PWD}" SPECS/$(PROJ).spec
-	@ echo && printf "\x1B[32mRPM packages:\033[0m\n" && ls -1 RPMS/*
-
-deb:
-	cp -R ../src ./SOURCES
-	dpkg-buildpackage -rfakeroot -us -uc -b
-	@ echo && printf "\x1B[32mDEB packages:\033[0m\n" && ls -1 ../*.deb
-
-clean:
-	rm -rf BUILD BUILDROOT RPMS SOURCES SRPMS
-
-.PHONY: all rpm deb clean
diff --git a/pkg/SPECS/libnv.spec b/pkg/SPECS/libnv.spec
deleted file mode 100644
index fabe145..0000000
--- a/pkg/SPECS/libnv.spec
+++ /dev/null
@@ -1,38 +0,0 @@
-%define version	%(cat %{_topdir}/version.txt)
-
-Name:		libnv
-Version:	%{version}
-Release:	1%{?dist}
-Summary:	FreeBSD's name/value pairs library
-Group:		System Environment/Libraries
-License:	BSD
-URL:		https://github.com/wheelsystems/nvlist
-Source0:	libnv.tar.gz
-
-BuildRequires:	make
-BuildRequires:	libtool
-
-%description
-The libnv library is a general purpose name/value pairs mechanism used
-in FreeBSD, which was inspired by the nvpairs used in Solaris/illumos.
-It is a lightweight serialization (marshalling) library.
-
-%prep
-%setup -q -n src
-
-%build
-make %{?_smp_mflags} LIBDIR=%{_libdir}
-
-%install
-make install \
-    DESTDIR=%{buildroot} \
-    LIBDIR=%{_libdir} \
-    INCDIR=%{_includedir} \
-    MANDIR=%{_mandir}
-
-%files
-%{_libdir}/*
-%{_includedir}/*
-%{_mandir}/*
-
-%changelog
diff --git a/pkg/debian/changelog b/pkg/debian/changelog
deleted file mode 100644
index 6889edc..0000000
--- a/pkg/debian/changelog
+++ /dev/null
@@ -1,5 +0,0 @@
-nv (0.0.1) unstable; urgency=medium
-
-  * Initial release.
-
- -- rmind <rmind@noxt.eu>  Fri, 18 May 2018 23:34:33 +0100
diff --git a/pkg/debian/compat b/pkg/debian/compat
deleted file mode 100644
index f599e28..0000000
--- a/pkg/debian/compat
+++ /dev/null
@@ -1 +0,0 @@
-10
diff --git a/pkg/debian/control b/pkg/debian/control
deleted file mode 100644
index c4e8005..0000000
--- a/pkg/debian/control
+++ /dev/null
@@ -1,33 +0,0 @@
-Source: nv
-Priority: extra
-Maintainer: https://github.com/wheelsystems
-Build-Depends:
- debhelper (>= 9),
- make,
- libtool
-Standards-Version: 3.9.1
-Homepage: https://github.com/wheelsystems/nvlist
-License: BSD-2-clause
-
-Package: libnv1
-Section: lib
-Architecture: any
-Depends: ${shlibs:Depends}, ${misc:Depends}
-Description: FreeBSD's name/value pairs library
- The libnv library is a general purpose name/value pairs mechanism used
- in FreeBSD, which was inspired by the nvpairs used in Solaris/illumos.
- It is a lightweight serialization (marshalling) library.
-
-Package: libnv1-dbg
-Section: debug
-Architecture: any
-Depends: ${misc:Depends}, libnv1 (= ${binary:Version})
-Description: Debug symbols for libnv1
- Debug symbols for libnv1.
-
-Package: libnv-dev
-Section: libdevel
-Architecture: any
-Depends: ${shlibs:Depends}, ${misc:Depends}, libnv1 (= ${binary:Version})
-Description: Development files for libnv1
- Development files for libnv1.
diff --git a/pkg/debian/libnv-dev.install b/pkg/debian/libnv-dev.install
deleted file mode 100644
index a3c8f6c..0000000
--- a/pkg/debian/libnv-dev.install
+++ /dev/null
@@ -1,3 +0,0 @@
-usr/include/*
-usr/lib/*/lib*.a
-usr/lib/*/lib*.so
diff --git a/pkg/debian/libnv1.install b/pkg/debian/libnv1.install
deleted file mode 100644
index 3ddde58..0000000
--- a/pkg/debian/libnv1.install
+++ /dev/null
@@ -1 +0,0 @@
-usr/lib/*/lib*.so.*
diff --git a/pkg/debian/rules b/pkg/debian/rules
deleted file mode 100755
index fe25b57..0000000
--- a/pkg/debian/rules
+++ /dev/null
@@ -1,24 +0,0 @@
-#!/usr/bin/make -f
-
-#export DH_VERBOSE = 1
-
-PKGVERSION:=$(shell cat version.txt)
-DEB_HOST_MULTIARCH?=$(shell dpkg-architecture -qDEB_HOST_MULTIARCH)
-LIBDIR:=/usr/lib/$(DEB_HOST_MULTIARCH)
-INCDIR:=/usr/include
-
-%:
-	dh $@ --sourcedirectory=SOURCES --parallel
-
-override_dh_auto_test:
-	dh_auto_test tests
-
-override_dh_auto_install:
-	dh_auto_install -- LIBDIR=$(LIBDIR) INCDIR=$(INCDIR)
-
-override_dh_strip:
-	dh_strip -p libnv1 --dbg-package=libnv1-dbg
-	dh_strip -a --remaining-packages
-
-override_dh_gencontrol:
-	dh_gencontrol -- -v$(PKGVERSION)
diff --git a/pkg/debian/source/format b/pkg/debian/source/format
deleted file mode 100644
index 163aaf8..0000000
--- a/pkg/debian/source/format
+++ /dev/null
@@ -1 +0,0 @@
-3.0 (quilt)
diff --git a/pkg/version.txt b/pkg/version.txt
deleted file mode 100644
index 8acdd82..0000000
--- a/pkg/version.txt
+++ /dev/null
@@ -1 +0,0 @@
-0.0.1
diff --git a/src/.gitignore b/src/.gitignore
new file mode 100644
index 0000000..be6c7c5
--- /dev/null
+++ b/src/.gitignore
@@ -0,0 +1,2 @@
+*.o
+libnv.a
diff --git a/src/GNUmakefile b/src/GNUmakefile
deleted file mode 100644
index dd37c6d..0000000
--- a/src/GNUmakefile
+++ /dev/null
@@ -1,85 +0,0 @@
-#
-# This file is in the Public Domain.
-#
-
-PROJ=		nv
-
-CFLAGS+=	-std=c99 -O2 -g -Wall -Wextra -Werror
-CFLAGS+=	-D_POSIX_C_SOURCE=200809L
-CFLAGS+=	-D_GNU_SOURCE -D_DEFAULT_SOURCE
-CFLAGS+=	-DWITH_MSGIO -D__FBSDID\(x\)=
-
-#
-# Extended warning flags.
-#
-#CFLAGS+=	-Wno-unknown-warning-option # gcc vs clang
-
-CFLAGS+=	-Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith
-CFLAGS+=	-Wmissing-declarations -Wredundant-decls -Wnested-externs
-CFLAGS+=	-Wshadow -Wcast-qual -Wcast-align -Wwrite-strings
-CFLAGS+=	-Wold-style-definition
-#CFLAGS+=	-Wsuggest-attribute=noreturn -Wjump-misses-init
-
-# New GCC 6/7 flags:
-#CFLAGS+=	-Wduplicated-cond -Wmisleading-indentation -Wnull-dereference
-#CFLAGS+=	-Wduplicated-branches -Wrestrict
-
-ifeq ($(MAKECMDGOALS),tests)
-DEBUG=		1
-endif
-
-ifeq ($(DEBUG),1)
-CFLAGS+=	-Og -DDEBUG -fno-omit-frame-pointer
-CFLAGS+=	-fsanitize=address
-LDFLAGS+=	-fsanitize=address
-else
-CFLAGS+=	-DNDEBUG
-endif
-
-LIB=		lib$(PROJ)
-INCS=		nv.h cnv.h dnv.h
-OBJS=		nvlist.o nvpair.o cnvlist.o dnvlist.o msgio.o
-
-MANS=		nv.3
-MANS+=		cnv.3
-MANS+=		dnv.3
-
-TEST_FILES:=	$(wildcard tests/*.c)
-TESTS:=		$(patsubst tests/%.c,%,$(TEST_FILES))
-
-$(LIB).la:	LDFLAGS+=	-rpath $(LIBDIR) -version-info 1:0:0
-install/%.la:	ILIBDIR=	$(DESTDIR)/$(LIBDIR)
-install:	IINCDIR=	$(DESTDIR)/$(INCDIR)/
-install:	IMANDIR=	$(DESTDIR)/$(MANDIR)/man3/
-
-obj: $(OBJS)
-
-lib: $(LIB).la
-
-%.lo: %.c
-	libtool --mode=compile --tag CC $(CC) $(CFLAGS) -c $<
-
-$(LIB).la: $(shell echo $(OBJS) | sed 's/\.o/\.lo/g')
-	libtool --mode=link --tag CC $(CC) $(LDFLAGS) -o $@ $(notdir $^)
-
-install/%.la: %.la
-	mkdir -p $(ILIBDIR)
-	libtool --mode=install install -c $(notdir $@) $(ILIBDIR)/$(notdir $@)
-
-install: $(addprefix install/,$(LIB).la)
-	libtool --mode=finish $(LIBDIR)
-	mkdir -p $(IINCDIR) && install -c $(INCS) $(IINCDIR)
-	mkdir -p $(IMANDIR) && install -c $(MANS) $(IMANDIR)
-
-%_test: $(OBJS)
-	$(CC) $(CFLAGS) -I. $^ tests/$@.c -o $@ $(LDFLAGS)
-
-tests: $(TESTS)
-	@ for T in $(TESTS); do echo ./$$T; ./$$T; done | \
-	    awk '1; /not ok/ { exit 1; }'
-
-clean:
-	libtool --mode=clean rm
-	@ rm -rf .libs *.o *.lo *.la $(TESTS)
-
-.PHONY: all obj lib tests install clean
diff --git a/src/Makefile b/src/Makefile
index a1b2d35..e5a8367 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -1,29 +1,46 @@
-# $FreeBSD: head/lib/libnv/Makefile 285139 2015-07-04 16:33:37Z oshogbo $
+#
+# This file is in the Public Domain.
+#
 
-SHLIBDIR?= /lib
+PROJ=		nv
 
-.include <src.opts.mk>
+CFLAGS+=	-std=c11 -Os -g -Wall -Wextra -Werror
+CFLAGS+=	-D_POSIX_C_SOURCE=200809L
+CFLAGS+=	-D_GNU_SOURCE -D_DEFAULT_SOURCE
 
-LIB=	nv
-SHLIB_MAJOR= 0
+# TODO: might need to partially re-add, bcs. it contains buf_send/recv()
+#CFLAGS+=	-DWITH_MSGIO
 
-.PATH: ${.CURDIR}/../../sys/contrib/libnv ${.CURDIR}/../../sys/sys
-CFLAGS+=-I${.CURDIR}/../../sys -I${.CURDIR}
+CFLAGS+=    -I ../../external/
 
-SRCS=	cnvlist.c
-SRCS+=	dnvlist.c
-SRCS+=	msgio.c
-SRCS+=	nvlist.c
-SRCS+=	nvpair.c
+#
+# Extended warning flags.
+#
+#CFLAGS+=	-Wno-unknown-warning-option # gcc vs clang
 
-WARNS?=	6
+CFLAGS+=	-Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith
+CFLAGS+=	-Wmissing-declarations -Wredundant-decls -Wnested-externs
+CFLAGS+=	-Wshadow -Wcast-qual -Wcast-align -Wwrite-strings
+CFLAGS+=	-Wold-style-definition
+#CFLAGS+=	-Wsuggest-attribute=noreturn -Wjump-misses-init
 
-MAN=	nv.3
-MAN+=	cnv.3
-MAN+=	dnv.3
+CFLAGS+=	-DNDEBUG
 
-.if ${MK_TESTS} != "no"
-SUBDIR+=	tests
-.endif
+LIB=		lib$(PROJ)
+DEPS=		nv.h cnv.h dnv.h
+OBJS=		nvlist.o nvpair.o cnvlist.o dnvlist.o
 
-.include <bsd.lib.mk>
+MANS=		nv.3
+MANS+=		cnv.3
+MANS+=		dnv.3
+
+%.o: %.c $(DEPS)
+	$(CC) -c -o $@ $< $(CFLAGS)
+
+$(LIB).a: $(OBJS)
+	$(AR) rcs $(LIB).a $^
+
+lib: $(LIB).a
+
+clean:
+	rm -rf *.o *.a
diff --git a/src/cnv.h b/src/cnv.h
index 8d0dae6..6d99a50 100644
--- a/src/cnv.h
+++ b/src/cnv.h
@@ -33,12 +33,10 @@
 
 #include <sys/cdefs.h>
 
-#ifndef _KERNEL
 #include <stdarg.h>
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdio.h>
-#endif
 
 #ifndef	_NVLIST_T_DECLARED
 #define	_NVLIST_T_DECLARED
@@ -47,8 +45,6 @@ struct nvlist;
 typedef struct nvlist nvlist_t;
 #endif
 
-__BEGIN_DECLS
-
 /*
  * Functions which returns information about the given cookie.
  */
@@ -70,10 +66,8 @@ const bool		*cnvlist_get_bool_array(const void *cookie, size_t *nitemsp);
 const uint64_t		*cnvlist_get_number_array(const void *cookie, size_t *nitemsp);
 const char * const	*cnvlist_get_string_array(const void *cookie, size_t *nitemsp);
 const nvlist_t * const	*cnvlist_get_nvlist_array(const void *cookie, size_t *nitemsp);
-#ifndef _KERNEL
 int			 cnvlist_get_descriptor(const void *cookie);
 const int		*cnvlist_get_descriptor_array(const void *cookie, size_t *nitemsp);
-#endif
 
 
 /*
@@ -91,10 +85,8 @@ bool			 *cnvlist_take_bool_array(void *cookie, size_t *nitemsp);
 uint64_t		 *cnvlist_take_number_array(void *cookie, size_t *nitemsp);
 char			**cnvlist_take_string_array(void *cookie, size_t *nitemsp);
 nvlist_t		**cnvlist_take_nvlist_array(void *cookie, size_t *nitemsp);
-#ifndef _KERNEL
 int			  cnvlist_take_descriptor(void *cookie);
 int			 *cnvlist_take_descriptor_array(void *cookie, size_t *nitemsp);
-#endif
 
 /*
  * The cnvlist_free functions removes the given name/value pair from the nvlist based on cookie
@@ -110,11 +102,7 @@ void	cnvlist_free_bool_array(void *cookie);
 void	cnvlist_free_number_array(void *cookie);
 void	cnvlist_free_string_array(void *cookie);
 void	cnvlist_free_nvlist_array(void *cookie);
-#ifndef _KERNEL
 void	cnvlist_free_descriptor(void *cookie);
 void	cnvlist_free_descriptor_array(void *cookie);
-#endif
-
-__END_DECLS
 
 #endif	/* !_CNV_H_ */
diff --git a/src/cnvlist.c b/src/cnvlist.c
index d267ba7..02ec976 100644
--- a/src/cnvlist.c
+++ b/src/cnvlist.c
@@ -29,24 +29,11 @@
  */
 
 #include <sys/cdefs.h>
-__FBSDID("$FreeBSD: head/sys/contrib/libnv/cnvlist.c 335343 2018-06-18 21:26:58Z oshogbo $");
 
-#ifdef _KERNEL
-
-#include <sys/types.h>
-#include <sys/param.h>
-#include <sys/kernel.h>
-#include <sys/systm.h>
-#include <sys/malloc.h>
-
-#include <machine/stdarg.h>
-
-#else
 #include <stdarg.h>
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdlib.h>
-#endif
 
 #include "cnv.h"
 #include "nv.h"
@@ -107,9 +94,7 @@ CNVLIST_GET_ARRAY(const bool *, bool_array, BOOL_ARRAY)
 CNVLIST_GET_ARRAY(const uint64_t *, number_array, NUMBER_ARRAY)
 CNVLIST_GET_ARRAY(const char * const *, string_array, STRING_ARRAY)
 CNVLIST_GET_ARRAY(const nvlist_t * const *, nvlist_array, NVLIST_ARRAY)
-#ifndef _KERNEL
 CNVLIST_GET_ARRAY(const int *, descriptor_array, DESCRIPTOR_ARRAY)
-#endif
 
 #undef	CNVLIST_GET_ARRAY
 
@@ -172,9 +157,7 @@ CNVLIST_TAKE_ARRAY(bool *, bool_array, BOOL_ARRAY)
 CNVLIST_TAKE_ARRAY(uint64_t *, number_array, NUMBER_ARRAY)
 CNVLIST_TAKE_ARRAY(char **, string_array, STRING_ARRAY)
 CNVLIST_TAKE_ARRAY(nvlist_t **, nvlist_array, NVLIST_ARRAY)
-#ifndef _KERNEL
 CNVLIST_TAKE_ARRAY(int *, descriptor_array, DESCRIPTOR_ARRAY);
-#endif
 
 #undef	CNVLIST_TAKE_ARRAY
 
@@ -211,9 +194,7 @@ CNVLIST_FREE(bool_array)
 CNVLIST_FREE(number_array)
 CNVLIST_FREE(string_array)
 CNVLIST_FREE(nvlist_array)
-#ifndef _KERNEL
 CNVLIST_FREE(descriptor)
 CNVLIST_FREE(descriptor_array)
-#endif
 
 #undef	CNVLIST_FREE
diff --git a/src/dnv.h b/src/dnv.h
index e88b00e..3a86bc3 100644
--- a/src/dnv.h
+++ b/src/dnv.h
@@ -34,12 +34,10 @@
 
 #include <sys/cdefs.h>
 
-#ifndef _KERNEL
 #include <stdarg.h>
 #include <stdbool.h>
 #include <stddef.h>
 #include <stdint.h>
-#endif
 
 #ifndef	_NVLIST_T_DECLARED
 #define	_NVLIST_T_DECLARED
@@ -48,8 +46,6 @@ struct nvlist;
 typedef struct nvlist nvlist_t;
 #endif
 
-__BEGIN_DECLS
-
 /*
  * The dnvlist_get functions returns value associated with the given name.
  * If it returns a pointer, the pointer represents internal buffer and should
@@ -80,6 +76,4 @@ nvlist_t *dnvlist_take_nvlist(nvlist_t *nvl, const char *name, nvlist_t *defval)
 int dnvlist_take_descriptor(nvlist_t *nvl, const char *name, int defval);
 void *dnvlist_take_binary(nvlist_t *nvl, const char *name, size_t *sizep, void *defval, size_t defsize);
 
-__END_DECLS
-
 #endif	/* !_DNV_H_ */
diff --git a/src/dnvlist.c b/src/dnvlist.c
index 1360824..54f5b8b 100644
--- a/src/dnvlist.c
+++ b/src/dnvlist.c
@@ -30,24 +30,11 @@
  */
 
 #include <sys/cdefs.h>
-__FBSDID("$FreeBSD: head/sys/contrib/libnv/dnvlist.c 285139 2015-07-04 16:33:37Z oshogbo $");
 
-#ifdef _KERNEL
-
-#include <sys/types.h>
-#include <sys/param.h>
-#include <sys/kernel.h>
-#include <sys/systm.h>
-#include <sys/malloc.h>
-
-#include <machine/stdarg.h>
-
-#else
 #include <stdarg.h>
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdlib.h>
-#endif
 
 #include "dnv.h"
 #include "nv.h"
@@ -69,9 +56,7 @@ DNVLIST_GET(bool, bool)
 DNVLIST_GET(uint64_t, number)
 DNVLIST_GET(const char *, string)
 DNVLIST_GET(const nvlist_t *, nvlist)
-#ifndef _KERNEL
 DNVLIST_GET(int, descriptor)
-#endif
 
 #undef	DNVLIST_GET
 
@@ -106,9 +91,7 @@ DNVLIST_TAKE(bool, bool)
 DNVLIST_TAKE(uint64_t, number)
 DNVLIST_TAKE(char *, string)
 DNVLIST_TAKE(nvlist_t *, nvlist)
-#ifndef _KERNEL
 DNVLIST_TAKE(int, descriptor)
-#endif
 
 #undef	DNVLIST_TAKE
 
diff --git a/src/msgio.c b/src/msgio.c
deleted file mode 100644
index 9408e6e..0000000
--- a/src/msgio.c
+++ /dev/null
@@ -1,472 +0,0 @@
-/*-
- * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
- *
- * Copyright (c) 2013 The FreeBSD Foundation
- * Copyright (c) 2013 Mariusz Zaborski <oshogbo@FreeBSD.org>
- * All rights reserved.
- *
- * This software was developed by Pawel Jakub Dawidek under sponsorship from
- * the FreeBSD Foundation.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
-
-#include <sys/cdefs.h>
-__FBSDID("$FreeBSD: head/lib/libnv/msgio.c 271578 2014-09-14 09:27:12Z pjd $");
-
-#include <sys/param.h>
-#include <sys/socket.h>
-#include <sys/select.h>
-
-#include <errno.h>
-#include <fcntl.h>
-#include <stdbool.h>
-#include <stdint.h>
-#include <stdlib.h>
-#include <string.h>
-#include <unistd.h>
-
-#ifdef HAVE_PJDLOG
-#include <pjdlog.h>
-#endif
-
-#include "common_impl.h"
-#include "msgio.h"
-
-#ifndef	HAVE_PJDLOG
-#include <assert.h>
-#define	PJDLOG_ASSERT(...)		assert(__VA_ARGS__)
-#define	PJDLOG_RASSERT(expr, ...)	assert(expr)
-#define	PJDLOG_ABORT(...)		abort()
-#endif
-
-#ifdef __linux__
-/* Linux: arbitrary size, but must be lower than SCM_MAX_FD. */
-#define	PKG_MAX_SIZE	((64U - 1) * CMSG_SPACE(sizeof(int)))
-#else
-#define	PKG_MAX_SIZE	(MCLBYTES / CMSG_SPACE(sizeof(int)) - 1)
-#endif
-
-static int
-msghdr_add_fd(struct cmsghdr *cmsg, int fd)
-{
-
-	PJDLOG_ASSERT(fd >= 0);
-
-	cmsg->cmsg_level = SOL_SOCKET;
-	cmsg->cmsg_type = SCM_RIGHTS;
-	cmsg->cmsg_len = CMSG_LEN(sizeof(fd));
-	bcopy(&fd, CMSG_DATA(cmsg), sizeof(fd));
-
-	return (0);
-}
-
-static void
-fd_wait(int fd, bool doread)
-{
-	fd_set fds;
-
-	PJDLOG_ASSERT(fd >= 0);
-
-	FD_ZERO(&fds);
-	FD_SET(fd, &fds);
-	(void)select(fd + 1, doread ? &fds : NULL, doread ? NULL : &fds,
-	    NULL, NULL);
-}
-
-static int
-msg_recv(int sock, struct msghdr *msg)
-{
-	int flags;
-
-	PJDLOG_ASSERT(sock >= 0);
-
-#ifdef MSG_CMSG_CLOEXEC
-	flags = MSG_CMSG_CLOEXEC;
-#else
-	flags = 0;
-#endif
-
-	for (;;) {
-		fd_wait(sock, true);
-		if (recvmsg(sock, msg, flags) == -1) {
-			if (errno == EINTR)
-				continue;
-			return (-1);
-		}
-		break;
-	}
-
-	return (0);
-}
-
-static int
-msg_send(int sock, const struct msghdr *msg)
-{
-
-	PJDLOG_ASSERT(sock >= 0);
-
-	for (;;) {
-		fd_wait(sock, false);
-		if (sendmsg(sock, msg, 0) == -1) {
-			if (errno == EINTR)
-				continue;
-			return (-1);
-		}
-		break;
-	}
-
-	return (0);
-}
-
-#ifdef __FreeBSD__
-int
-cred_send(int sock)
-{
-	unsigned char credbuf[CMSG_SPACE(sizeof(struct cmsgcred))];
-	struct msghdr msg;
-	struct cmsghdr *cmsg;
-	struct iovec iov;
-	uint8_t dummy;
-
-	bzero(credbuf, sizeof(credbuf));
-	bzero(&msg, sizeof(msg));
-	bzero(&iov, sizeof(iov));
-
-	/*
-	 * XXX: We send one byte along with the control message, because
-	 *      setting msg_iov to NULL only works if this is the first
-	 *      packet send over the socket. Once we send some data we
-	 *      won't be able to send credentials anymore. This is most
-	 *      likely a kernel bug.
-	 */
-	dummy = 0;
-	iov.iov_base = &dummy;
-	iov.iov_len = sizeof(dummy);
-
-	msg.msg_iov = &iov;
-	msg.msg_iovlen = 1;
-	msg.msg_control = credbuf;
-	msg.msg_controllen = sizeof(credbuf);
-
-	cmsg = CMSG_FIRSTHDR(&msg);
-	cmsg->cmsg_len = CMSG_LEN(sizeof(struct cmsgcred));
-	cmsg->cmsg_level = SOL_SOCKET;
-	cmsg->cmsg_type = SCM_CREDS;
-
-	if (msg_send(sock, &msg) == -1)
-		return (-1);
-
-	return (0);
-}
-
-int
-cred_recv(int sock, struct cmsgcred *cred)
-{
-	unsigned char credbuf[CMSG_SPACE(sizeof(struct cmsgcred))];
-	struct msghdr msg;
-	struct cmsghdr *cmsg;
-	struct iovec iov;
-	uint8_t dummy;
-
-	bzero(credbuf, sizeof(credbuf));
-	bzero(&msg, sizeof(msg));
-	bzero(&iov, sizeof(iov));
-
-	iov.iov_base = &dummy;
-	iov.iov_len = sizeof(dummy);
-
-	msg.msg_iov = &iov;
-	msg.msg_iovlen = 1;
-	msg.msg_control = credbuf;
-	msg.msg_controllen = sizeof(credbuf);
-
-	if (msg_recv(sock, &msg) == -1)
-		return (-1);
-
-	cmsg = CMSG_FIRSTHDR(&msg);
-	if (cmsg == NULL ||
-	    cmsg->cmsg_len != CMSG_LEN(sizeof(struct cmsgcred)) ||
-	    cmsg->cmsg_level != SOL_SOCKET || cmsg->cmsg_type != SCM_CREDS) {
-		errno = EINVAL;
-		return (-1);
-	}
-	bcopy(CMSG_DATA(cmsg), cred, sizeof(*cred));
-
-	return (0);
-}
-#endif
-
-static int
-fd_package_send(int sock, const int *fds, size_t nfds)
-{
-	struct msghdr msg;
-	struct cmsghdr *cmsg;
-	struct iovec iov;
-	unsigned int i;
-	int serrno, ret;
-	uint8_t dummy;
-
-	PJDLOG_ASSERT(sock >= 0);
-	PJDLOG_ASSERT(fds != NULL);
-	PJDLOG_ASSERT(nfds > 0);
-
-	bzero(&msg, sizeof(msg));
-
-	/*
-	 * XXX: Look into cred_send function for more details.
-	 */
-	dummy = 0;
-	iov.iov_base = &dummy;
-	iov.iov_len = sizeof(dummy);
-
-	msg.msg_iov = &iov;
-	msg.msg_iovlen = 1;
-	msg.msg_controllen = nfds * CMSG_SPACE(sizeof(int));
-	msg.msg_control = calloc(1, msg.msg_controllen);
-	if (msg.msg_control == NULL)
-		return (-1);
-
-	ret = -1;
-
-	for (i = 0, cmsg = CMSG_FIRSTHDR(&msg); i < nfds && cmsg != NULL;
-	    i++, cmsg = CMSG_NXTHDR(&msg, cmsg)) {
-		if (msghdr_add_fd(cmsg, fds[i]) == -1)
-			goto end;
-	}
-
-	if (msg_send(sock, &msg) == -1)
-		goto end;
-
-	ret = 0;
-end:
-	serrno = errno;
-	free(msg.msg_control);
-	errno = serrno;
-	return (ret);
-}
-
-static int
-fd_package_recv(int sock, int *fds, size_t nfds)
-{
-	struct msghdr msg;
-	struct cmsghdr *cmsg;
-	unsigned int i;
-	int serrno, ret;
-	struct iovec iov;
-	uint8_t dummy;
-
-	PJDLOG_ASSERT(sock >= 0);
-	PJDLOG_ASSERT(nfds > 0);
-	PJDLOG_ASSERT(fds != NULL);
-
-	bzero(&msg, sizeof(msg));
-	bzero(&iov, sizeof(iov));
-
-	/*
-	 * XXX: Look into cred_send function for more details.
-	 */
-	iov.iov_base = &dummy;
-	iov.iov_len = sizeof(dummy);
-
-	msg.msg_iov = &iov;
-	msg.msg_iovlen = 1;
-	msg.msg_controllen = nfds * CMSG_SPACE(sizeof(int));
-	msg.msg_control = calloc(1, msg.msg_controllen);
-	if (msg.msg_control == NULL)
-		return (-1);
-
-	ret = -1;
-
-	if (msg_recv(sock, &msg) == -1)
-		goto end;
-
-	i = 0;
-	cmsg = CMSG_FIRSTHDR(&msg);
-	while (cmsg && i < nfds) {
-		unsigned int n;
-
-		if (cmsg->cmsg_level != SOL_SOCKET ||
-		    cmsg->cmsg_type != SCM_RIGHTS) {
-			errno = EINVAL;
-			break;
-		}
-		n = (cmsg->cmsg_len - CMSG_LEN(0)) / sizeof(int);
-		if (i + n > nfds) {
-			errno = EINVAL;
-			break;
-		}
-		bcopy(CMSG_DATA(cmsg), fds + i, sizeof(int) * n);
-		cmsg = CMSG_NXTHDR(&msg, cmsg);
-		i += n;
-	}
-
-	if (cmsg != NULL || i < nfds) {
-		unsigned int last;
-
-		/*
-		 * We need to close all received descriptors, even if we have
-		 * different control message (eg. SCM_CREDS) in between.
-		 */
-		last = i;
-		for (i = 0; i < last; i++) {
-			if (fds[i] >= 0) {
-				close(fds[i]);
-			}
-		}
-		errno = EINVAL;
-		goto end;
-	}
-
-#ifndef MSG_CMSG_CLOEXEC
-	/*
-	 * If the MSG_CMSG_CLOEXEC flag is not available we cannot set the
-	 * close-on-exec flag atomically, but we still want to set it for
-	 * consistency.
-	 */
-	for (i = 0; i < nfds; i++) {
-		(void) fcntl(fds[i], F_SETFD, FD_CLOEXEC);
-	}
-#endif
-
-	ret = 0;
-end:
-	serrno = errno;
-	free(msg.msg_control);
-	errno = serrno;
-	return (ret);
-}
-
-int
-fd_recv(int sock, int *fds, size_t nfds)
-{
-	unsigned int i, step, j;
-	int ret, serrno;
-
-	if (nfds == 0 || fds == NULL) {
-		errno = EINVAL;
-		return (-1);
-	}
-
-	ret = i = step = 0;
-	while (i < nfds) {
-		if (PKG_MAX_SIZE < nfds - i)
-			step = PKG_MAX_SIZE;
-		else
-			step = nfds - i;
-		ret = fd_package_recv(sock, fds + i, step);
-		if (ret != 0) {
-			/* Close all received descriptors. */
-			serrno = errno;
-			for (j = 0; j < i; j++)
-				close(fds[j]);
-			errno = serrno;
-			break;
-		}
-		i += step;
-	}
-
-	return (ret);
-}
-
-int
-fd_send(int sock, const int *fds, size_t nfds)
-{
-	unsigned int i, step;
-	int ret;
-
-	if (nfds == 0 || fds == NULL) {
-		errno = EINVAL;
-		return (-1);
-	}
-
-	ret = i = step = 0;
-	while (i < nfds) {
-		if (PKG_MAX_SIZE < nfds - i)
-			step = PKG_MAX_SIZE;
-		else
-			step = nfds - i;
-		ret = fd_package_send(sock, fds + i, step);
-		if (ret != 0)
-			break;
-		i += step;
-	}
-
-	return (ret);
-}
-
-int
-buf_send(int sock, void *buf, size_t size)
-{
-	ssize_t done;
-	unsigned char *ptr;
-
-	PJDLOG_ASSERT(sock >= 0);
-	PJDLOG_ASSERT(size > 0);
-	PJDLOG_ASSERT(buf != NULL);
-
-	ptr = buf;
-	do {
-		fd_wait(sock, false);
-		done = send(sock, ptr, size, 0);
-		if (done == -1) {
-			if (errno == EINTR)
-				continue;
-			return (-1);
-		} else if (done == 0) {
-			errno = ENOTCONN;
-			return (-1);
-		}
-		size -= done;
-		ptr += done;
-	} while (size > 0);
-
-	return (0);
-}
-
-int
-buf_recv(int sock, void *buf, size_t size)
-{
-	ssize_t done;
-	unsigned char *ptr;
-
-	PJDLOG_ASSERT(sock >= 0);
-	PJDLOG_ASSERT(buf != NULL);
-
-	ptr = buf;
-	while (size > 0) {
-		fd_wait(sock, true);
-		done = recv(sock, ptr, size, 0);
-		if (done == -1) {
-			if (errno == EINTR)
-				continue;
-			return (-1);
-		} else if (done == 0) {
-			errno = ENOTCONN;
-			return (-1);
-		}
-		size -= done;
-		ptr += done;
-	}
-
-	return (0);
-}
diff --git a/src/msgio.h b/src/msgio.h
deleted file mode 100644
index 9b889d6..0000000
--- a/src/msgio.h
+++ /dev/null
@@ -1,52 +0,0 @@
-/*-
- * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
- *
- * Copyright (c) 2013 The FreeBSD Foundation
- * All rights reserved.
- *
- * This software was developed by Pawel Jakub Dawidek under sponsorship from
- * the FreeBSD Foundation.
- *
- * Copyright (c) 2013 Mariusz Zaborski <oshogbo@FreeBSD.org>
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- * $FreeBSD: head/lib/libnv/msgio.h 259430 2013-12-15 22:58:09Z pjd $
- */
-
-#ifndef	_MSGIO_H_
-#define	_MSGIO_H_
-
-struct cmsgcred;
-struct iovec;
-struct msghdr;
-
-int cred_send(int sock);
-int cred_recv(int sock, struct cmsgcred *cred);
-
-int fd_send(int sock, const int *fds, size_t nfds);
-int fd_recv(int sock, int *fds, size_t nfds);
-
-int buf_send(int sock, void *buf, size_t size);
-int buf_recv(int sock, void *buf, size_t size);
-
-#endif	/* !_MSGIO_H_ */
diff --git a/src/nv.h b/src/nv.h
index f0bd37a..73423ed 100644
--- a/src/nv.h
+++ b/src/nv.h
@@ -35,12 +35,10 @@
 
 #include <sys/cdefs.h>
 
-#ifndef _KERNEL
 #include <stdarg.h>
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdio.h>
-#endif
 
 #ifndef	_NVLIST_T_DECLARED
 #define	_NVLIST_T_DECLARED
@@ -75,12 +73,6 @@ typedef struct nvlist nvlist_t;
  */
 #define	NV_FLAG_NO_UNIQUE		0x02
 
-#if defined(_KERNEL) && defined(MALLOC_DECLARE)
-MALLOC_DECLARE(M_NVLIST);
-#endif
-
-__BEGIN_DECLS
-
 nvlist_t	*nvlist_create(int flags);
 void		 nvlist_destroy(nvlist_t *nvl);
 int		 nvlist_error(const nvlist_t *nvl);
@@ -90,10 +82,8 @@ void		 nvlist_set_error(nvlist_t *nvl, int error);
 
 nvlist_t *nvlist_clone(const nvlist_t *nvl);
 
-#ifndef _KERNEL
 void nvlist_dump(const nvlist_t *nvl, int fd);
 void nvlist_fdump(const nvlist_t *nvl, FILE *fp);
-#endif
 
 size_t		 nvlist_size(const nvlist_t *nvl);
 void		*nvlist_pack(const nvlist_t *nvl, size_t *sizep);
@@ -101,7 +91,8 @@ nvlist_t	*nvlist_unpack(const void *buf, size_t size, int flags);
 
 int nvlist_send(int sock, const nvlist_t *nvl);
 nvlist_t *nvlist_recv(int sock, int flags);
-nvlist_t *nvlist_xfer(int sock, nvlist_t *nvl, int flags);
+
+int nvlist_bstgw_post(const char *path, const nvlist_t *req, nvlist_t **resp, int flags);
 
 const char *nvlist_next(const nvlist_t *nvl, int *typep, void **cookiep);
 
@@ -130,10 +121,8 @@ bool nvlist_exists_bool_array(const nvlist_t *nvl, const char *name);
 bool nvlist_exists_number_array(const nvlist_t *nvl, const char *name);
 bool nvlist_exists_string_array(const nvlist_t *nvl, const char *name);
 bool nvlist_exists_nvlist_array(const nvlist_t *nvl, const char *name);
-#ifndef _KERNEL
 bool nvlist_exists_descriptor(const nvlist_t *nvl, const char *name);
 bool nvlist_exists_descriptor_array(const nvlist_t *nvl, const char *name);
-#endif
 
 /*
  * The nvlist_add functions add the given name/value pair.
@@ -146,27 +135,21 @@ void nvlist_add_bool(nvlist_t *nvl, const char *name, bool value);
 void nvlist_add_number(nvlist_t *nvl, const char *name, uint64_t value);
 void nvlist_add_string(nvlist_t *nvl, const char *name, const char *value);
 void nvlist_add_stringf(nvlist_t *nvl, const char *name, const char *valuefmt, ...) __attribute__((__format__(__printf__,3,4)));
-#if defined(_VA_LIST_DECLARED) || defined(_VA_LIST_DEFINED)
 void nvlist_add_stringv(nvlist_t *nvl, const char *name, const char *valuefmt, va_list valueap) __attribute__((__format__(__printf__,3,0)));
-#endif
 void nvlist_add_nvlist(nvlist_t *nvl, const char *name, const nvlist_t *value);
 void nvlist_add_binary(nvlist_t *nvl, const char *name, const void *value, size_t size);
 void nvlist_add_bool_array(nvlist_t *nvl, const char *name, const bool *value, size_t nitems);
 void nvlist_add_number_array(nvlist_t *nvl, const char *name, const uint64_t *value, size_t nitems);
 void nvlist_add_string_array(nvlist_t *nvl, const char *name, const char * const *value, size_t nitems);
 void nvlist_add_nvlist_array(nvlist_t *nvl, const char *name, const nvlist_t * const *value, size_t nitems);
-#ifndef _KERNEL
 void nvlist_add_descriptor(nvlist_t *nvl, const char *name, int value);
 void nvlist_add_descriptor_array(nvlist_t *nvl, const char *name, const int *value, size_t nitems);
-#endif
 
 void nvlist_append_bool_array(nvlist_t *nvl, const char *name, const bool value);
 void nvlist_append_number_array(nvlist_t *nvl, const char *name, const uint64_t value);
 void nvlist_append_string_array(nvlist_t *nvl, const char *name, const char * const value);
 void nvlist_append_nvlist_array(nvlist_t *nvl, const char *name, const nvlist_t * const value);
-#ifndef _KERNEL
 void nvlist_append_descriptor_array(nvlist_t *nvl, const char *name, int value);
-#endif
 
 /*
  * The nvlist_move functions add the given name/value pair.
@@ -180,10 +163,8 @@ void nvlist_move_bool_array(nvlist_t *nvl, const char *name, bool *value, size_t
 void nvlist_move_string_array(nvlist_t *nvl, const char *name, char **value, size_t nitems);
 void nvlist_move_nvlist_array(nvlist_t *nvl, const char *name, nvlist_t **value, size_t nitems);
 void nvlist_move_number_array(nvlist_t *nvl, const char *name, uint64_t *value, size_t nitems);
-#ifndef _KERNEL
 void nvlist_move_descriptor(nvlist_t *nvl, const char *name, int value);
 void nvlist_move_descriptor_array(nvlist_t *nvl, const char *name, int *value, size_t nitems);
-#endif
 
 /*
  * The nvlist_get functions returns value associated with the given name.
@@ -200,10 +181,8 @@ const bool		*nvlist_get_bool_array(const nvlist_t *nvl, const char *name, size_t
 const uint64_t		*nvlist_get_number_array(const nvlist_t *nvl, const char *name, size_t *nitemsp);
 const char * const	*nvlist_get_string_array(const nvlist_t *nvl, const char *name, size_t *nitemsp);
 const nvlist_t * const	*nvlist_get_nvlist_array(const nvlist_t *nvl, const char *name, size_t *nitemsp);
-#ifndef _KERNEL
 int			 nvlist_get_descriptor(const nvlist_t *nvl, const char *name);
 const int		*nvlist_get_descriptor_array(const nvlist_t *nvl, const char *name, size_t *nitemsp);
-#endif
 
 /*
  * The nvlist_take functions returns value associated with the given name and
@@ -220,10 +199,8 @@ bool		 *nvlist_take_bool_array(nvlist_t *nvl, const char *name, size_t *nitemsp)
 uint64_t	 *nvlist_take_number_array(nvlist_t *nvl, const char *name, size_t *nitemsp);
 char		**nvlist_take_string_array(nvlist_t *nvl, const char *name, size_t *nitemsp);
 nvlist_t	**nvlist_take_nvlist_array(nvlist_t *nvl, const char *name, size_t *nitemsp);
-#ifndef _KERNEL
 int		 nvlist_take_descriptor(nvlist_t *nvl, const char *name);
 int		 *nvlist_take_descriptor_array(nvlist_t *nvl, const char *name, size_t *nitemsp);
-#endif
 
 /*
  * The nvlist_free functions removes the given name/value pair from the nvlist
@@ -244,11 +221,7 @@ void nvlist_free_number_array(nvlist_t *nvl, const char *name);
 void nvlist_free_string_array(nvlist_t *nvl, const char *name);
 void nvlist_free_nvlist_array(nvlist_t *nvl, const char *name);
 void nvlist_free_binary_array(nvlist_t *nvl, const char *name);
-#ifndef _KERNEL
 void nvlist_free_descriptor(nvlist_t *nvl, const char *name);
 void nvlist_free_descriptor_array(nvlist_t *nvl, const char *name);
-#endif
-
-__END_DECLS
 
 #endif	/* !_NV_H_ */
diff --git a/src/nv_compat.h b/src/nv_compat.h
index 6bdd131..5c9d46e 100644
--- a/src/nv_compat.h
+++ b/src/nv_compat.h
@@ -45,13 +45,8 @@
 	    __attribute__((__format__ (__printf__, fmtarg, firstvararg)))
 #endif
 
-#ifdef __linux__
 #include <endian.h>
-#else
-#include <sys/endian.h>
-#endif
 
-#ifdef __linux__
 static inline uint32_t
 be32dec(const void *buf)
 {
@@ -79,6 +74,5 @@ le64dec(const void *buf)
 	uint8_t const *p = (uint8_t const *)buf;
 	return (((uint64_t)le32dec(p + 4) << 32) | le32dec(p));
 }
-#endif
 
 #endif
diff --git a/src/nv_impl.h b/src/nv_impl.h
index 130680b..64477bf 100644
--- a/src/nv_impl.h
+++ b/src/nv_impl.h
@@ -53,24 +53,6 @@ typedef struct nvpair nvpair_t;
 #define	NV_FLAG_BIG_ENDIAN		0x080
 #define	NV_FLAG_IN_ARRAY		0x100
 
-#ifdef _KERNEL
-#define	nv_malloc(size)			malloc((size), M_NVLIST, M_WAITOK)
-#define	nv_calloc(n, size)		mallocarray((n), (size), M_NVLIST, \
-					    M_WAITOK | M_ZERO)
-#define	nv_realloc(buf, size)		realloc((buf), (size), M_NVLIST, \
-					    M_WAITOK)
-#define	nv_free(buf)			free((buf), M_NVLIST)
-#define	nv_strdup(buf)			strdup((buf), M_NVLIST)
-#define	nv_vasprintf(ptr, ...)		vasprintf(ptr, M_NVLIST, __VA_ARGS__)
-
-#define	ERRNO_SET(var)			do { } while (0)
-#define	ERRNO_SAVE()			do { do { } while(0)
-#define	ERRNO_RESTORE()			} while (0)
-
-#define	ERRNO_OR_DEFAULT(default)	(default)
-
-#else
-
 #define	nv_malloc(size)			malloc((size))
 #define	nv_calloc(n, size)		calloc((n), (size))
 #define	nv_realloc(buf, size)		realloc((buf), (size))
@@ -89,8 +71,6 @@ typedef struct nvpair nvpair_t;
 
 #define	ERRNO_OR_DEFAULT(default)	(errno == 0 ? (default) : errno)
 
-#endif
-
 int	*nvlist_descriptors(const nvlist_t *nvl, size_t *nitemsp);
 size_t	 nvlist_ndescriptors(const nvlist_t *nvl);
 void	 nvlist_set_flags(nvlist_t *nvl, int flags);
diff --git a/src/nvlist.c b/src/nvlist.c
index 9a00792..1072069 100644
--- a/src/nvlist.c
+++ b/src/nvlist.c
@@ -31,22 +31,10 @@
  */
 
 #include <sys/cdefs.h>
-__FBSDID("$FreeBSD: head/sys/contrib/libnv/nvlist.c 286796 2015-08-15 06:34:49Z oshogbo $");
 
 #include <sys/param.h>
 #include <sys/queue.h>
 
-#ifdef _KERNEL
-
-#include <sys/errno.h>
-#include <sys/kernel.h>
-#include <sys/lock.h>
-#include <sys/malloc.h>
-#include <sys/systm.h>
-
-#include <machine/stdarg.h>
-
-#else
 #include <sys/socket.h>
 
 #include <errno.h>
@@ -59,25 +47,12 @@ __FBSDID("$FreeBSD: head/sys/contrib/libnv/nvlist.c 286796 2015-08-15 06:34:49Z
 #include <string.h>
 #include <unistd.h>
 
-#include "msgio.h"
-#endif
-
-#ifdef HAVE_PJDLOG
-#include <pjdlog.h>
-#endif
-
 #include "nv.h"
 
 #include "nv_impl.h"
 #include "nvlist_impl.h"
 #include "nvpair_impl.h"
 
-#ifndef	HAVE_PJDLOG
-#ifdef _KERNEL
-#define	PJDLOG_ASSERT(...)		MPASS(__VA_ARGS__)
-#define	PJDLOG_RASSERT(expr, ...)	KASSERT(expr, (__VA_ARGS__))
-#define	PJDLOG_ABORT(...)		panic(__VA_ARGS__)
-#else
 #include <assert.h>
 #define	PJDLOG_ASSERT(...)		assert(__VA_ARGS__)
 #define	PJDLOG_RASSERT(expr, ...)	assert(expr)
@@ -87,8 +62,6 @@ __FBSDID("$FreeBSD: head/sys/contrib/libnv/nvlist.c 286796 2015-08-15 06:34:49Z
 	fprintf(stderr, "\n");						\
 	abort();							\
 } while (0)
-#endif
-#endif
 
 #define	NV_FLAG_PRIVATE_MASK	(NV_FLAG_BIG_ENDIAN | NV_FLAG_IN_ARRAY)
 #define	NV_FLAG_PUBLIC_MASK	(NV_FLAG_IGNORE_CASE | NV_FLAG_NO_UNIQUE)
@@ -109,14 +82,14 @@ struct nvlist {
 	PJDLOG_ASSERT((nvl)->nvl_magic == NVLIST_MAGIC);		\
 } while (0)
 
-#ifdef _KERNEL
-MALLOC_DEFINE(M_NVLIST, "nvlist", "kernel nvlist");
-#endif
-
 #define	NVPAIR_ASSERT(nvp)	nvpair_assert(nvp)
 
 #define	NVLIST_HEADER_MAGIC	0x6c
 #define	NVLIST_HEADER_VERSION	0x00
+
+#ifndef __packed
+#define __packed __attribute__((packed))
+#endif
 struct nvlist_header {
 	uint8_t		nvlh_magic;
 	uint8_t		nvlh_version;
@@ -419,7 +392,6 @@ nvlist_clone(const nvlist_t *nvl)
 	return (newnvl);
 }
 
-#ifndef _KERNEL
 static bool
 nvlist_dump_error_check(const nvlist_t *nvl, int fd, int level)
 {
@@ -632,7 +604,6 @@ nvlist_fdump(const nvlist_t *nvl, FILE *fp)
 	fflush(fp);
 	nvlist_dump(nvl, fileno(fp));
 }
-#endif
 
 /*
  * The function obtains size of the nvlist after nvlist_pack().
@@ -714,7 +685,6 @@ out:
 	return (size);
 }
 
-#ifndef _KERNEL
 static int *
 nvlist_xdescriptors(const nvlist_t *nvl, int *descs)
 {
@@ -771,9 +741,7 @@ nvlist_xdescriptors(const nvlist_t *nvl, int *descs)
 
 	return (descs);
 }
-#endif
 
-#ifndef _KERNEL
 int *
 nvlist_descriptors(const nvlist_t *nvl, size_t *nitemsp)
 {
@@ -791,12 +759,10 @@ nvlist_descriptors(const nvlist_t *nvl, size_t *nitemsp)
 		*nitemsp = nitems;
 	return (fds);
 }
-#endif
 
 size_t
 nvlist_ndescriptors(const nvlist_t *nvl)
 {
-#ifndef _KERNEL
 	void *cookie;
 	nvpair_t *nvp;
 	size_t ndescs;
@@ -845,9 +811,6 @@ nvlist_ndescriptors(const nvlist_t *nvl)
 	} while ((nvl = nvlist_get_pararr(nvl, &cookie)) != NULL);
 
 	return (ndescs);
-#else
-	return (0);
-#endif
 }
 
 static unsigned char *
@@ -860,9 +823,6 @@ nvlist_pack_header(const nvlist_t *nvl, unsigned char *ptr, size_t *leftp)
 	nvlhdr.nvlh_magic = NVLIST_HEADER_MAGIC;
 	nvlhdr.nvlh_version = NVLIST_HEADER_VERSION;
 	nvlhdr.nvlh_flags = nvl->nvl_flags;
-#if BYTE_ORDER == BIG_ENDIAN
-	nvlhdr.nvlh_flags |= NV_FLAG_BIG_ENDIAN;
-#endif
 	nvlhdr.nvlh_descriptors = nvlist_ndescriptors(nvl);
 	nvlhdr.nvlh_size = *leftp - sizeof(nvlhdr);
 	PJDLOG_ASSERT(*leftp >= sizeof(nvlhdr));
@@ -933,7 +893,6 @@ nvlist_xpack(const nvlist_t *nvl, int64_t *fdidxp, size_t *sizep)
 			}
 			ptr = nvpair_pack_nvlist_up(ptr, &left);
 			break;
-#ifndef _KERNEL
 		case NV_TYPE_DESCRIPTOR:
 			ptr = nvpair_pack_descriptor(nvp, ptr, fdidxp, &left);
 			break;
@@ -941,7 +900,6 @@ nvlist_xpack(const nvlist_t *nvl, int64_t *fdidxp, size_t *sizep)
 			ptr = nvpair_pack_descriptor_array(nvp, ptr, fdidxp,
 			    &left);
 			break;
-#endif
 		case NV_TYPE_BINARY:
 			ptr = nvpair_pack_binary(nvp, ptr, &left);
 			break;
@@ -1060,17 +1018,10 @@ nvlist_check_header(struct nvlist_header *nvlhdrp)
 		ERRNO_SET(EINVAL);
 		return (false);
 	}
-#if BYTE_ORDER == BIG_ENDIAN
-	if ((nvlhdrp->nvlh_flags & NV_FLAG_BIG_ENDIAN) == 0) {
-		nvlhdrp->nvlh_size = le64toh(nvlhdrp->nvlh_size);
-		nvlhdrp->nvlh_descriptors = le64toh(nvlhdrp->nvlh_descriptors);
-	}
-#else
 	if ((nvlhdrp->nvlh_flags & NV_FLAG_BIG_ENDIAN) != 0) {
 		nvlhdrp->nvlh_size = be64toh(nvlhdrp->nvlh_size);
 		nvlhdrp->nvlh_descriptors = be64toh(nvlhdrp->nvlh_descriptors);
 	}
-#endif
 	return (true);
 }
 
@@ -1167,7 +1118,6 @@ nvlist_xunpack(const void *buf, size_t size, const int *fds, size_t nfds,
 				goto fail;
 			nvlist_set_parent(tmpnvl, nvp);
 			break;
-#ifndef _KERNEL
 		case NV_TYPE_DESCRIPTOR:
 			ptr = nvpair_unpack_descriptor(isbe, nvp, ptr, &left,
 			    fds, nfds);
@@ -1176,7 +1126,6 @@ nvlist_xunpack(const void *buf, size_t size, const int *fds, size_t nfds,
 			ptr = nvpair_unpack_descriptor_array(isbe, nvp, ptr,
 			    &left, fds, nfds);
 			break;
-#endif
 		case NV_TYPE_BINARY:
 			ptr = nvpair_unpack_binary(isbe, nvp, ptr, &left);
 			break;
@@ -1251,10 +1200,89 @@ nvlist_unpack(const void *buf, size_t size, int flags)
 	return (nvlist_xunpack(buf, size, NULL, 0, flags));
 }
 
-#if !defined(_KERNEL) && defined(WITH_MSGIO)
+#include <emscripten.h>
+#include <emscripten/fetch.h>
+
+//#if !defined(_KERNEL) && defined(WITH_MSGIO)
+EMSCRIPTEN_KEEPALIVE
+int
+nvlist_bstgw_post(const char *path, const nvlist_t *req, nvlist_t **resp, int flags)
+{
+	size_t datasize;
+	void *data;
+	int64_t fdidx;
+	int ret;
+
+	emscripten_fetch_attr_t attr;
+	static const char* const headers[] = {"BstGw-no-csrf", "fs-bstgw", "Content-Type", "application/octet-stream", 0};
+	emscripten_fetch_t *fetch = NULL;
+
+	if (nvlist_error(req) != 0 || path == NULL) {
+		ERRNO_SET(nvlist_error(req));
+		return (-1);
+	}
+
+	/* pack */
+	ret = -1;
+	fdidx = 0;
+
+	data = nvlist_xpack(req, &fdidx, &datasize);
+	if (data == NULL)
+		goto out;
+
+	/* send via POST */
+	emscripten_fetch_attr_init(&attr);
+	// REPLACE is needed when not using INLINE (SINGLE_FILE) mode, but don't know why!
+	//attr.attributes = EMSCRIPTEN_FETCH_REPLACE | EMSCRIPTEN_FETCH_LOAD_TO_MEMORY | EMSCRIPTEN_FETCH_SYNCHRONOUS;
+	attr.attributes = EMSCRIPTEN_FETCH_REPLACE | EMSCRIPTEN_FETCH_LOAD_TO_MEMORY | EMSCRIPTEN_FETCH_SYNCHRONOUS;
+
+	strcpy(attr.requestMethod, "POST");
+	attr.requestHeaders = headers;
+
+	//attr.overriddenMimeType
+
+	attr.requestData = data;
+	attr.requestDataSize = datasize;
+
+	fetch = emscripten_fetch(&attr, path);
+	printf("after fetch!!\n");
+	if (fetch == NULL) {
+		printf("emscripten_fetch() failed!\n");
+		goto out;
+	} else if (fetch->status != 200) {
+		printf("POST to URL %s failed with status code: %d.\n", fetch->url, fetch->status);
+		emscripten_fetch_close(fetch);
+		goto out;
+	}
+
+	/* if response request try to parse and deliver it */
+	if (resp != NULL) {
+/*
+		if (!nvlist_check_header((struct nvlist_header *) &fetch->data))
+			return (NULL);
+*/
+		nvlist_t *nvl = nvlist_xunpack(fetch->data, fetch->numBytes, NULL, 0, flags);
+		*resp = nvl; // NULL on error! (TODO)
+	}
+
+	emscripten_fetch_close(fetch);
+	ret = 0;
+out:
+	ERRNO_SAVE();
+	nv_free(data);
+	ERRNO_RESTORE();
+	return (ret);
+}
+
 int
 nvlist_send(int sock, const nvlist_t *nvl)
 {
+	(void)sock;
+	(void)nvl;
+	printf("TODO: nvlist_send()\n");
+	return -1;
+
+	/*
 	size_t datasize, nfds;
 	int *fds;
 	void *data;
@@ -1292,11 +1320,18 @@ out:
 	nv_free(data);
 	ERRNO_RESTORE();
 	return (ret);
+	*/
 }
 
 nvlist_t *
 nvlist_recv(int sock, int flags)
 {
+	(void)sock;
+	(void)flags;
+	printf("TODO: nvlist_recv()\n");
+	return NULL;
+
+	/*
 	struct nvlist_header nvlhdr;
 	nvlist_t *nvl, *ret;
 	unsigned char *buf;
@@ -1349,8 +1384,10 @@ out:
 	ERRNO_RESTORE();
 
 	return (ret);
+	*/
 }
 
+/* TODO: where used? (I think I remember to have seen it somewehere)
 nvlist_t *
 nvlist_xfer(int sock, nvlist_t *nvl, int flags)
 {
@@ -1362,7 +1399,8 @@ nvlist_xfer(int sock, nvlist_t *nvl, int flags)
 	nvlist_destroy(nvl);
 	return (nvlist_recv(sock, flags));
 }
-#endif
+*/
+//#endif
 
 nvpair_t *
 nvlist_first_nvpair(const nvlist_t *nvl)
@@ -1449,10 +1487,8 @@ NVLIST_EXISTS(bool_array, BOOL_ARRAY)
 NVLIST_EXISTS(number_array, NUMBER_ARRAY)
 NVLIST_EXISTS(string_array, STRING_ARRAY)
 NVLIST_EXISTS(nvlist_array, NVLIST_ARRAY)
-#ifndef _KERNEL
 NVLIST_EXISTS(descriptor, DESCRIPTOR)
 NVLIST_EXISTS(descriptor_array, DESCRIPTOR_ARRAY)
-#endif
 
 #undef	NVLIST_EXISTS
 
@@ -1579,9 +1615,7 @@ NVLIST_ADD(bool, bool)
 NVLIST_ADD(uint64_t, number)
 NVLIST_ADD(const char *, string)
 NVLIST_ADD(const nvlist_t *, nvlist)
-#ifndef _KERNEL
 NVLIST_ADD(int, descriptor);
-#endif
 
 #undef	NVLIST_ADD
 
@@ -1610,9 +1644,7 @@ NVLIST_ADD_ARRAY(const bool *, bool)
 NVLIST_ADD_ARRAY(const uint64_t *, number)
 NVLIST_ADD_ARRAY(const char * const *, string)
 NVLIST_ADD_ARRAY(const nvlist_t * const *, nvlist)
-#ifndef _KERNEL
 NVLIST_ADD_ARRAY(const int *, descriptor)
-#endif
 
 #undef	NVLIST_ADD_ARRAY
 
@@ -1641,9 +1673,7 @@ NVLIST_APPEND_ARRAY(const bool, bool, BOOL)
 NVLIST_APPEND_ARRAY(const uint64_t, number, NUMBER)
 NVLIST_APPEND_ARRAY(const char *, string, STRING)
 NVLIST_APPEND_ARRAY(const nvlist_t *, nvlist, NVLIST)
-#ifndef _KERNEL
 NVLIST_APPEND_ARRAY(const int, descriptor, DESCRIPTOR)
-#endif
 
 #undef	NVLIST_APPEND_ARRAY
 
@@ -1713,7 +1743,6 @@ nvlist_move_nvlist(nvlist_t *nvl, const char *name, nvlist_t *value)
 	}
 }
 
-#ifndef _KERNEL
 void
 nvlist_move_descriptor(nvlist_t *nvl, const char *name, int value)
 {
@@ -1733,7 +1762,6 @@ nvlist_move_descriptor(nvlist_t *nvl, const char *name, int value)
 		(void)nvlist_move_nvpair(nvl, nvp);
 	}
 }
-#endif
 
 void
 nvlist_move_binary(nvlist_t *nvl, const char *name, void *value, size_t size)
@@ -1851,7 +1879,6 @@ nvlist_move_number_array(nvlist_t *nvl, const char *name, uint64_t *value,
 	}
 }
 
-#ifndef _KERNEL
 void
 nvlist_move_descriptor_array(nvlist_t *nvl, const char *name, int *value,
     size_t nitems)
@@ -1878,7 +1905,6 @@ nvlist_move_descriptor_array(nvlist_t *nvl, const char *name, int *value,
 		(void)nvlist_move_nvpair(nvl, nvp);
 	}
 }
-#endif
 
 const nvpair_t *
 nvlist_get_nvpair(const nvlist_t *nvl, const char *name)
@@ -1903,9 +1929,7 @@ NVLIST_GET(bool, bool, BOOL)
 NVLIST_GET(uint64_t, number, NUMBER)
 NVLIST_GET(const char *, string, STRING)
 NVLIST_GET(const nvlist_t *, nvlist, NVLIST)
-#ifndef _KERNEL
 NVLIST_GET(int, descriptor, DESCRIPTOR)
-#endif
 
 #undef	NVLIST_GET
 
@@ -1938,9 +1962,7 @@ NVLIST_GET_ARRAY(const bool *, bool, BOOL)
 NVLIST_GET_ARRAY(const uint64_t *, number, NUMBER)
 NVLIST_GET_ARRAY(const char * const *, string, STRING)
 NVLIST_GET_ARRAY(const nvlist_t * const *, nvlist, NVLIST)
-#ifndef _KERNEL
 NVLIST_GET_ARRAY(const int *, descriptor, DESCRIPTOR)
-#endif
 
 #undef	NVLIST_GET_ARRAY
 
@@ -1964,9 +1986,7 @@ NVLIST_TAKE(bool, bool, BOOL)
 NVLIST_TAKE(uint64_t, number, NUMBER)
 NVLIST_TAKE(char *, string, STRING)
 NVLIST_TAKE(nvlist_t *, nvlist, NVLIST)
-#ifndef _KERNEL
 NVLIST_TAKE(int, descriptor, DESCRIPTOR)
-#endif
 
 #undef	NVLIST_TAKE
 
@@ -2007,9 +2027,7 @@ NVLIST_TAKE_ARRAY(bool *, bool, BOOL)
 NVLIST_TAKE_ARRAY(uint64_t *, number, NUMBER)
 NVLIST_TAKE_ARRAY(char **, string, STRING)
 NVLIST_TAKE_ARRAY(nvlist_t **, nvlist, NVLIST)
-#ifndef _KERNEL
 NVLIST_TAKE_ARRAY(int *, descriptor, DESCRIPTOR)
-#endif
 
 void
 nvlist_remove_nvpair(nvlist_t *nvl, nvpair_t *nvp)
@@ -2047,10 +2065,8 @@ NVLIST_FREE(bool_array, BOOL_ARRAY)
 NVLIST_FREE(number_array, NUMBER_ARRAY)
 NVLIST_FREE(string_array, STRING_ARRAY)
 NVLIST_FREE(nvlist_array, NVLIST_ARRAY)
-#ifndef _KERNEL
 NVLIST_FREE(descriptor, DESCRIPTOR)
 NVLIST_FREE(descriptor_array, DESCRIPTOR_ARRAY)
-#endif
 
 #undef	NVLIST_FREE
 
diff --git a/src/nvlist_impl.h b/src/nvlist_impl.h
index 22acbaa..84e710f 100644
--- a/src/nvlist_impl.h
+++ b/src/nvlist_impl.h
@@ -35,9 +35,7 @@
 #ifndef	_NVLIST_IMPL_H_
 #define	_NVLIST_IMPL_H_
 
-#ifndef _KERNEL
 #include <stdint.h>
-#endif
 
 void nvlist_report_missing(int type, const char *name);
 nvpair_t *nvlist_get_nvpair_parent(const nvlist_t *nvl);
diff --git a/src/nvpair.c b/src/nvpair.c
index 656b2de..94419f3 100644
--- a/src/nvpair.c
+++ b/src/nvpair.c
@@ -31,21 +31,10 @@
  */
 
 #include <sys/cdefs.h>
-__FBSDID("$FreeBSD: head/sys/contrib/libnv/nvpair.c 286796 2015-08-15 06:34:49Z oshogbo $");
 
 #include <sys/param.h>
 #include <sys/queue.h>
 
-#ifdef _KERNEL
-
-#include <sys/errno.h>
-#include <sys/lock.h>
-#include <sys/malloc.h>
-#include <sys/systm.h>
-
-#include <machine/stdarg.h>
-
-#else
 #include <errno.h>
 #include <fcntl.h>
 #include <stdarg.h>
@@ -56,11 +45,6 @@ __FBSDID("$FreeBSD: head/sys/contrib/libnv/nvpair.c 286796 2015-08-15 06:34:49Z
 #include <unistd.h>
 
 #include "common_impl.h"
-#endif
-
-#ifdef HAVE_PJDLOG
-#include <pjdlog.h>
-#endif
 
 #include "nv.h"
 
@@ -68,18 +52,10 @@ __FBSDID("$FreeBSD: head/sys/contrib/libnv/nvpair.c 286796 2015-08-15 06:34:49Z
 #include "nvlist_impl.h"
 #include "nvpair_impl.h"
 
-#ifndef	HAVE_PJDLOG
-#ifdef _KERNEL
-#define	PJDLOG_ASSERT(...)		MPASS(__VA_ARGS__)
-#define	PJDLOG_RASSERT(expr, ...)	KASSERT(expr, (__VA_ARGS__))
-#define	PJDLOG_ABORT(...)		panic(__VA_ARGS__)
-#else
 #include <assert.h>
 #define	PJDLOG_ASSERT(...)		assert(__VA_ARGS__)
 #define	PJDLOG_RASSERT(expr, ...)	assert(expr)
 #define	PJDLOG_ABORT(...)		abort()
-#endif
-#endif
 
 #define	NVPAIR_MAGIC	0x6e7670	/* "nvp" */
 struct nvpair {
@@ -98,6 +74,9 @@ struct nvpair {
 	PJDLOG_ASSERT((nvp)->nvp_magic == NVPAIR_MAGIC);		\
 } while (0)
 
+#ifndef __packed
+#define __packed __attribute__((packed))
+#endif
 struct nvpair_header {
 	uint8_t		nvph_type;
 	uint16_t	nvph_namesize;
@@ -298,7 +277,6 @@ nvpair_clone(const nvpair_t *nvp)
 		data = nvpair_get_nvlist_array(nvp, &datasize);
 		newnvp = nvpair_create_nvlist_array(name, data, datasize);
 		break;
-#ifndef _KERNEL
 	case NV_TYPE_DESCRIPTOR:
 		newnvp = nvpair_create_descriptor(name,
 		    nvpair_get_descriptor(nvp));
@@ -307,7 +285,6 @@ nvpair_clone(const nvpair_t *nvp)
 		data = nvpair_get_descriptor_array(nvp, &datasize);
 		newnvp = nvpair_create_descriptor_array(name, data, datasize);
 		break;
-#endif
 	default:
 		PJDLOG_ABORT("Unknown type: %d.", nvpair_type(nvp));
 	}
@@ -470,7 +447,6 @@ nvpair_pack_nvlist_array_next(unsigned char *ptr, size_t *leftp)
 	return (ptr);
 }
 
-#ifndef _KERNEL
 unsigned char *
 nvpair_pack_descriptor(const nvpair_t *nvp, unsigned char *ptr, int64_t *fdidxp,
     size_t *leftp)
@@ -500,7 +476,6 @@ nvpair_pack_descriptor(const nvpair_t *nvp, unsigned char *ptr, int64_t *fdidxp,
 
 	return (ptr);
 }
-#endif
 
 unsigned char *
 nvpair_pack_binary(const nvpair_t *nvp, unsigned char *ptr, size_t *leftp)
@@ -577,7 +552,6 @@ nvpair_pack_string_array(const nvpair_t *nvp, unsigned char *ptr, size_t *leftp)
 	return (ptr);
 }
 
-#ifndef _KERNEL
 unsigned char *
 nvpair_pack_descriptor_array(const nvpair_t *nvp, unsigned char *ptr,
     int64_t *fdidxp, size_t *leftp)
@@ -615,7 +589,6 @@ nvpair_pack_descriptor_array(const nvpair_t *nvp, unsigned char *ptr,
 
 	return (ptr);
 }
-#endif
 
 void
 nvpair_init_datasize(nvpair_t *nvp)
@@ -656,17 +629,10 @@ nvpair_unpack_header(bool isbe, nvpair_t *nvp, const unsigned char *ptr,
 		goto fail;
 	}
 
-#if BYTE_ORDER == BIG_ENDIAN
-	if (!isbe) {
-		nvphdr.nvph_namesize = le16toh(nvphdr.nvph_namesize);
-		nvphdr.nvph_datasize = le64toh(nvphdr.nvph_datasize);
-	}
-#else
 	if (isbe) {
 		nvphdr.nvph_namesize = be16toh(nvphdr.nvph_namesize);
 		nvphdr.nvph_datasize = be64toh(nvphdr.nvph_datasize);
 	}
-#endif
 
 	if (nvphdr.nvph_namesize > NV_NAME_MAX)
 		goto fail;
@@ -825,7 +791,6 @@ nvpair_unpack_nvlist(bool isbe __unused, nvpair_t *nvp,
 	return (ptr);
 }
 
-#ifndef _KERNEL
 const unsigned char *
 nvpair_unpack_descriptor(bool isbe, nvpair_t *nvp, const unsigned char *ptr,
     size_t *leftp, const int *fds, size_t nfds)
@@ -865,7 +830,6 @@ nvpair_unpack_descriptor(bool isbe, nvpair_t *nvp, const unsigned char *ptr,
 
 	return (ptr);
 }
-#endif
 
 const unsigned char *
 nvpair_unpack_binary(bool isbe __unused, nvpair_t *nvp,
@@ -1018,7 +982,6 @@ out:
 	return (NULL);
 }
 
-#ifndef _KERNEL
 const unsigned char *
 nvpair_unpack_descriptor_array(bool isbe, nvpair_t *nvp,
     const unsigned char *ptr, size_t *leftp, const int *fds, size_t nfds)
@@ -1069,7 +1032,6 @@ nvpair_unpack_descriptor_array(bool isbe, nvpair_t *nvp,
 
 	return (ptr);
 }
-#endif
 
 const unsigned char *
 nvpair_unpack_nvlist_array(bool isbe __unused, nvpair_t *nvp,
@@ -1269,7 +1231,6 @@ nvpair_create_nvlist(const char *name, const nvlist_t *value)
 	return (nvp);
 }
 
-#ifndef _KERNEL
 nvpair_t *
 nvpair_create_descriptor(const char *name, int value)
 {
@@ -1289,7 +1250,6 @@ nvpair_create_descriptor(const char *name, int value)
 
 	return (nvp);
 }
-#endif
 
 nvpair_t *
 nvpair_create_binary(const char *name, const void *value, size_t size)
@@ -1488,7 +1448,6 @@ fail:
 	return (NULL);
 }
 
-#ifndef _KERNEL
 nvpair_t *
 nvpair_create_descriptor_array(const char *name, const int *value,
     size_t nitems)
@@ -1533,7 +1492,6 @@ fail:
 
 	return (nvp);
 }
-#endif
 
 nvpair_t *
 nvpair_move_string(const char *name, char *value)
@@ -1582,7 +1540,6 @@ nvpair_move_nvlist(const char *name, nvlist_t *value)
 	return (nvp);
 }
 
-#ifndef _KERNEL
 nvpair_t *
 nvpair_move_descriptor(const char *name, int value)
 {
@@ -1603,7 +1560,6 @@ nvpair_move_descriptor(const char *name, int value)
 
 	return (nvp);
 }
-#endif
 
 nvpair_t *
 nvpair_move_binary(const char *name, void *value, size_t size)
@@ -1756,7 +1712,6 @@ fail:
 	return (NULL);
 }
 
-#ifndef _KERNEL
 nvpair_t *
 nvpair_move_descriptor_array(const char *name, int *value, size_t nitems)
 {
@@ -1792,7 +1747,6 @@ fail:
 
 	return (NULL);
 }
-#endif
 
 bool
 nvpair_get_bool(const nvpair_t *nvp)
@@ -1832,7 +1786,6 @@ nvpair_get_nvlist(const nvpair_t *nvp)
 	return ((const nvlist_t *)(intptr_t)nvp->nvp_data);
 }
 
-#ifndef _KERNEL
 int
 nvpair_get_descriptor(const nvpair_t *nvp)
 {
@@ -1842,7 +1795,6 @@ nvpair_get_descriptor(const nvpair_t *nvp)
 
 	return ((int)nvp->nvp_data);
 }
-#endif
 
 const void *
 nvpair_get_binary(const nvpair_t *nvp, size_t *sizep)
@@ -1909,7 +1861,6 @@ nvpair_get_nvlist_array(const nvpair_t *nvp, size_t *nitems)
 	return ((const nvlist_t * const *)((intptr_t)nvp->nvp_data));
 }
 
-#ifndef _KERNEL
 const int *
 nvpair_get_descriptor_array(const nvpair_t *nvp, size_t *nitems)
 {
@@ -1922,7 +1873,6 @@ nvpair_get_descriptor_array(const nvpair_t *nvp, size_t *nitems)
 
 	return ((const int *)(intptr_t)nvp->nvp_data);
 }
-#endif
 
 int
 nvpair_append_bool_array(nvpair_t *nvp, const bool value)
@@ -2016,7 +1966,6 @@ fail:
 	return (-1);
 }
 
-#ifndef _KERNEL
 int
 nvpair_append_descriptor_array(nvpair_t *nvp, const int value)
 {
@@ -2034,7 +1983,6 @@ nvpair_append_descriptor_array(nvpair_t *nvp, const int value)
 	}
 	return (0);
 }
-#endif
 
 void
 nvpair_free(nvpair_t *nvp)
@@ -2046,7 +1994,6 @@ nvpair_free(nvpair_t *nvp)
 
 	nvp->nvp_magic = 0;
 	switch (nvp->nvp_type) {
-#ifndef _KERNEL
 	case NV_TYPE_DESCRIPTOR:
 		close((int)nvp->nvp_data);
 		break;
@@ -2055,7 +2002,6 @@ nvpair_free(nvpair_t *nvp)
 			close(((int *)(intptr_t)nvp->nvp_data)[i]);
 		nv_free((int *)(intptr_t)nvp->nvp_data);
 		break;
-#endif
 	case NV_TYPE_NVLIST:
 		nvlist_destroy((nvlist_t *)(intptr_t)nvp->nvp_data);
 		break;
diff --git a/src/nvpair_impl.h b/src/nvpair_impl.h
index 57106da..7048ed0 100644
--- a/src/nvpair_impl.h
+++ b/src/nvpair_impl.h
@@ -37,9 +37,7 @@
 
 #include <sys/queue.h>
 
-#ifndef _KERNEL
 #include <stdint.h>
-#endif
 
 TAILQ_HEAD(nvl_head, nvpair);
 
diff --git a/src/tests/Makefile b/src/tests/Makefile
deleted file mode 100644
index 7590cc0..0000000
--- a/src/tests/Makefile
+++ /dev/null
@@ -1,19 +0,0 @@
-# $FreeBSD: head/lib/libnv/tests/Makefile 289172 2015-10-12 08:16:03Z ngie $
-
-ATF_TESTS_CXX=	\
-	dnv_tests \
-	nv_array_tests \
-	nv_tests \
-
-TAP_TESTS_C+=	nvlist_add_test
-TAP_TESTS_C+=	nvlist_exists_test
-TAP_TESTS_C+=	nvlist_free_test
-TAP_TESTS_C+=	nvlist_get_test
-TAP_TESTS_C+=	nvlist_move_test
-TAP_TESTS_C+=	nvlist_send_recv_test
-
-LIBADD+=	nv
-
-WARNS?=		3
-
-.include <bsd.test.mk>
diff --git a/src/tests/dnv_tests.cc b/src/tests/dnv_tests.cc
deleted file mode 100644
index 1a4ef98..0000000
--- a/src/tests/dnv_tests.cc
+++ /dev/null
@@ -1,573 +0,0 @@
-/*-
- * Copyright (c) 2014-2015 Sandvine Inc.  All rights reserved.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
-
-#include <sys/cdefs.h>
-__FBSDID("$FreeBSD: head/lib/libnv/tests/dnv_tests.cc 285063 2015-07-02 21:58:10Z oshogbo $");
-
-#include <sys/dnv.h>
-#include <sys/nv.h>
-
-#include <atf-c++.hpp>
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_get_bool__present);
-ATF_TEST_CASE_BODY(dnvlist_get_bool__present)
-{
-	nvlist_t *nvl;
-	const char *key;
-	bool value;
-
-	nvl = nvlist_create(0);
-
-	key = "name";
-	value = true;
-	nvlist_add_bool(nvl, key, value);
-
-	ATF_REQUIRE_EQ(dnvlist_get_bool(nvl, key, false), value);
-	ATF_REQUIRE_EQ(dnvlist_get_bool(nvl, "name", false), value);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_get_bool__default_value);
-ATF_TEST_CASE_BODY(dnvlist_get_bool__default_value)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	key = "123";
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE_EQ(dnvlist_get_bool(nvl, key, false), false);
-	ATF_REQUIRE_EQ(dnvlist_get_bool(nvl, "123", true), true);
-
-	nvlist_add_bool(nvl, key, true);
-
-	ATF_REQUIRE_EQ(dnvlist_get_bool(nvl, "otherkey", true), true);
-	ATF_REQUIRE_EQ(dnvlist_get_bool(nvl, "12c", false), false);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_get_number__present);
-ATF_TEST_CASE_BODY(dnvlist_get_number__present)
-{
-	nvlist_t *nvl;
-	const char *key;
-	uint64_t value;
-
-	nvl = nvlist_create(0);
-
-	key = "key";
-	value = 48952;
-	nvlist_add_number(nvl, key, value);
-
-	ATF_REQUIRE_EQ(dnvlist_get_number(nvl, key, 19), value);
-	ATF_REQUIRE_EQ(dnvlist_get_number(nvl, "key", 65), value);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_get_number__default_value);
-ATF_TEST_CASE_BODY(dnvlist_get_number__default_value)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	key = "123";
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE_EQ(dnvlist_get_number(nvl, key, 5), 5);
-	ATF_REQUIRE_EQ(dnvlist_get_number(nvl, "1234", 5), 5);
-
-	nvlist_add_number(nvl, key, 24841);
-
-	ATF_REQUIRE_EQ(dnvlist_get_number(nvl, "1234", 5641), 5641);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_get_string__present);
-ATF_TEST_CASE_BODY(dnvlist_get_string__present)
-{
-	nvlist_t *nvl;
-	const char *key;
-	const char *value, *actual_value;
-
-	nvl = nvlist_create(0);
-
-	key = "string";
-	value = "fjdojfdi";
-	nvlist_add_string(nvl, key, value);
-
-	ATF_REQUIRE_EQ(strcmp(dnvlist_get_string(nvl, key, "g"), value), 0);
-
-	actual_value = dnvlist_get_string(nvl, key, "rs");
-	ATF_REQUIRE_EQ(strcmp(actual_value, value), 0);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_get_string__default_value);
-ATF_TEST_CASE_BODY(dnvlist_get_string__default_value)
-{
-	nvlist_t *nvl;
-	const char *key;
-	const char *actual_value;
-
-	key = "123";
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE_EQ(strcmp(dnvlist_get_string(nvl, key, "bar"), "bar"), 0);
-
-	actual_value = dnvlist_get_string(nvl, key, "d");
-	ATF_REQUIRE_EQ(strcmp(actual_value, "d"), 0);
-
-	nvlist_add_string(nvl, key, "cxhweh");
-
-	ATF_REQUIRE_EQ(strcmp(dnvlist_get_string(nvl, "hthth", "fd"), "fd"), 0);
-	actual_value = dnvlist_get_string(nvl, "5", "5");
-	ATF_REQUIRE_EQ(strcmp(actual_value, "5"), 0);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_get_nvlist__present);
-ATF_TEST_CASE_BODY(dnvlist_get_nvlist__present)
-{
-	nvlist_t *nvl;
-	const char *key;
-	nvlist_t *value;
-	const nvlist_t *actual_value;
-
-	nvl = nvlist_create(0);
-
-	key = "nvlist";
-	value = nvlist_create(0);
-	nvlist_move_nvlist(nvl, key, value);
-
-	actual_value = dnvlist_get_nvlist(nvl, key, NULL);
-	ATF_REQUIRE(actual_value != NULL);
-	ATF_REQUIRE(nvlist_empty(actual_value));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_get_nvlist__default_value);
-ATF_TEST_CASE_BODY(dnvlist_get_nvlist__default_value)
-{
-	nvlist_t *nvl;
-	const char *key;
-	nvlist_t *dummy;
-
-	key = "123";
-	nvl = nvlist_create(0);
-	dummy = nvlist_create(0);
-
-	ATF_REQUIRE_EQ(dnvlist_get_nvlist(nvl, key, dummy), dummy);
-
-	nvlist_move_nvlist(nvl, key, nvlist_create(0));
-	ATF_REQUIRE_EQ(dnvlist_get_nvlist(nvl, "456", dummy), dummy);
-	ATF_REQUIRE_EQ(dnvlist_get_nvlist(nvl, "gh", dummy), dummy);
-
-	nvlist_destroy(nvl);
-}
-
-static void
-set_const_binary_value(const void *&value, size_t &size, const char *str)
-{
-
-	value = str;
-	size = strlen(str) + 1; /* +1 to include '\0' */
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_get_binary__present);
-ATF_TEST_CASE_BODY(dnvlist_get_binary__present)
-{
-	nvlist_t *nvl;
-	const char *k;
-	const void *value, *actual_value;
-	size_t value_size, actual_size;
-
-	nvl = nvlist_create(0);
-
-	k = "binary";
-	set_const_binary_value(value, value_size, "fjdojfdi");
-	nvlist_add_binary(nvl, k, value, value_size);
-
-	actual_value = dnvlist_get_binary(nvl, k, &actual_size, "g", 1);
-	ATF_REQUIRE_EQ(value_size, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_value, value, actual_size), 0);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_get_binary__default_value);
-ATF_TEST_CASE_BODY(dnvlist_get_binary__default_value)
-{
-	nvlist_t *nvl;
-	const char *key;
-	const void *default_value, *actual_value;
-	size_t default_size, actual_size;
-
-	key = "123";
-	nvl = nvlist_create(0);
-
-	set_const_binary_value(default_value, default_size, "bar");
-	actual_value = dnvlist_get_binary(nvl, key, &actual_size, default_value,
-	    default_size);
-	ATF_REQUIRE_EQ(default_size, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_value, default_value, actual_size), 0);
-
-	set_const_binary_value(default_value, default_size, "atf");
-	actual_value = dnvlist_get_binary(nvl, key, &actual_size, default_value,
-	    default_size);
-	ATF_REQUIRE_EQ(default_size, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_value, default_value, actual_size), 0);
-
-	nvlist_add_binary(nvl, key, "test", 4);
-
-	set_const_binary_value(default_value, default_size, "bthrg");
-	actual_value = dnvlist_get_binary(nvl, "k", &actual_size, default_value,
-	    default_size);
-	ATF_REQUIRE_EQ(default_size, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_value, default_value, actual_size), 0);
-
-	set_const_binary_value(default_value, default_size,
-	     "rrhgrythtyrtgbrhgrtdsvdfbtjlkul");
-	actual_value = dnvlist_get_binary(nvl, "s", &actual_size, default_value,
-	    default_size);
-	ATF_REQUIRE_EQ(default_size, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_value, default_value, actual_size), 0);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_bool__present);
-ATF_TEST_CASE_BODY(dnvlist_take_bool__present)
-{
-	nvlist_t *nvl;
-	const char *key;
-	bool value;
-
-	nvl = nvlist_create(0);
-
-	key = "name";
-	value = true;
-	nvlist_add_bool(nvl, key, value);
-
-	ATF_REQUIRE_EQ(dnvlist_take_bool(nvl, key, false), value);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_bool__empty);
-ATF_TEST_CASE_BODY(dnvlist_take_bool__empty)
-{
-	nvlist_t *nvl;
-
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE_EQ(dnvlist_take_bool(nvl, "123", false), false);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_bool__default_value);
-ATF_TEST_CASE_BODY(dnvlist_take_bool__default_value)
-{
-	nvlist_t *nvl;
-
-	nvl = nvlist_create(0);
-	nvlist_add_bool(nvl, "key", true);
-
-	ATF_REQUIRE_EQ(dnvlist_take_bool(nvl, "otherkey", true), true);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_number__present);
-ATF_TEST_CASE_BODY(dnvlist_take_number__present)
-{
-	nvlist_t *nvl;
-	const char *key;
-	uint64_t value;
-
-	nvl = nvlist_create(0);
-
-	key = "name";
-	value = 194154;
-	nvlist_add_number(nvl, key, value);
-
-	ATF_REQUIRE_EQ(dnvlist_take_number(nvl, key, 2), value);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_number__empty);
-ATF_TEST_CASE_BODY(dnvlist_take_number__empty)
-{
-	nvlist_t *nvl;
-
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE_EQ(dnvlist_take_number(nvl, "123", 126484), 126484);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_number__default_value);
-ATF_TEST_CASE_BODY(dnvlist_take_number__default_value)
-{
-	nvlist_t *nvl;
-
-	nvl = nvlist_create(0);
-	nvlist_add_number(nvl, "key", 12);
-
-	ATF_REQUIRE_EQ(dnvlist_take_number(nvl, "otherkey", 13), 13);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_string__present);
-ATF_TEST_CASE_BODY(dnvlist_take_string__present)
-{
-	nvlist_t *nvl;
-	const char *key;
-	const char *value;
-	char *default_val, *actual_val;
-
-	nvl = nvlist_create(0);
-
-	key = "name";
-	value = "wrowm";
-	default_val = strdup("default");
-	nvlist_add_string(nvl, key, value);
-
-	actual_val = dnvlist_take_string(nvl, key, default_val);
-	ATF_REQUIRE_EQ(strcmp(actual_val, value), 0);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	free(actual_val);
-	free(default_val);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_string__empty);
-ATF_TEST_CASE_BODY(dnvlist_take_string__empty)
-{
-	nvlist_t *nvl;
-	char *default_val, *actual_val;
-
-	nvl = nvlist_create(0);
-	default_val = strdup("");
-
-	actual_val = dnvlist_take_string(nvl, "123", default_val);
-	ATF_REQUIRE_EQ(strcmp(actual_val, default_val), 0);
-
-	free(actual_val);
-	free(default_val);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_string__default_value);
-ATF_TEST_CASE_BODY(dnvlist_take_string__default_value)
-{
-	nvlist_t *nvl;
-	char *default_val, *actual_val;
-
-	nvl = nvlist_create(0);
-	nvlist_add_string(nvl, "key", "foobar");
-	default_val = strdup("other");
-
-	actual_val = dnvlist_take_string(nvl, "otherkey", default_val);
-	ATF_REQUIRE_EQ(strcmp(actual_val, default_val), 0);
-
-	free(actual_val);
-	free(default_val);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_nvlist__present);
-ATF_TEST_CASE_BODY(dnvlist_take_nvlist__present)
-{
-	nvlist_t *nvl;
-	const char *key;
-	nvlist_t *value, *default_val, *actual_val;
-
-	nvl = nvlist_create(0);
-
-	key = "name";
-	value = nvlist_create(0);
-	default_val = nvlist_create(0);
-	nvlist_move_nvlist(nvl, key, value);
-
-	actual_val = dnvlist_take_nvlist(nvl, key, default_val);
-	ATF_REQUIRE_EQ(actual_val, value);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	free(actual_val);
-	free(default_val);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_nvlist__empty);
-ATF_TEST_CASE_BODY(dnvlist_take_nvlist__empty)
-{
-	nvlist_t *nvl, *actual_val;
-
-	nvl = nvlist_create(0);
-
-	actual_val = dnvlist_take_nvlist(nvl, "123", NULL);
-	ATF_REQUIRE_EQ(actual_val, static_cast<nvlist_t *>(NULL));
-
-	free(actual_val);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_nvlist__default_value);
-ATF_TEST_CASE_BODY(dnvlist_take_nvlist__default_value)
-{
-	nvlist_t *nvl;
-	nvlist_t *default_val, *actual_val;
-
-	nvl = nvlist_create(0);
-	nvlist_move_nvlist(nvl, "key", nvlist_create(0));
-	default_val = nvlist_create(0);
-
-	actual_val = dnvlist_take_nvlist(nvl, "otherkey", default_val);
-	ATF_REQUIRE_EQ(actual_val, default_val);
-
-	free(actual_val);
-	nvlist_destroy(nvl);
-}
-
-static void
-set_binary_value(void *&value, size_t &size, const char *str)
-{
-
-	value = strdup(str);
-	size = strlen(str) + 1; /* +1 to include '\0' */
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_binary__present);
-ATF_TEST_CASE_BODY(dnvlist_take_binary__present)
-{
-	nvlist_t *nvl;
-	const char *key;
-	void *value, *default_val, *actual_val;
-	size_t value_size, default_size, actual_size;
-
-	nvl = nvlist_create(0);
-
-	key = "name";
-	set_binary_value(value, value_size, "fkdojvmo908");
-	set_binary_value(default_val, default_size, "16546");
-	nvlist_add_binary(nvl, key, value, value_size);
-
-	actual_val = dnvlist_take_binary(nvl, key, &actual_size, default_val,
-	    default_size);
-	ATF_REQUIRE_EQ(value_size, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_val, value, value_size), 0);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	free(actual_val);
-	free(default_val);
-	free(value);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_binary__empty);
-ATF_TEST_CASE_BODY(dnvlist_take_binary__empty)
-{
-	nvlist_t *nvl;
-	void *default_val, *actual_val;
-	size_t default_size, actual_size;
-
-	nvl = nvlist_create(0);
-	set_binary_value(default_val, default_size, "\xa8\x89\x49\xff\xe2\x08");
-
-	actual_val = dnvlist_take_binary(nvl, "123", &actual_size, default_val,
-	    default_size);
-	ATF_REQUIRE_EQ(default_size, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_val, default_val, actual_size), 0);
-
-	free(actual_val);
-	free(default_val);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(dnvlist_take_binary__default_value);
-ATF_TEST_CASE_BODY(dnvlist_take_binary__default_value)
-{
-	nvlist_t *nvl;
-	void *default_val, *actual_val;
-	size_t default_size, actual_size;
-
-	nvl = nvlist_create(0);
-	nvlist_add_binary(nvl, "key", "foobar", 6);
-	set_binary_value(default_val, default_size, "vbhag");
-
-	actual_val = dnvlist_take_binary(nvl, "otherkey", &actual_size,
-	    default_val, default_size);
-	ATF_REQUIRE_EQ(default_size, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_val, default_val, default_size), 0);
-
-	free(actual_val);
-	free(default_val);
-	nvlist_destroy(nvl);
-}
-
-ATF_INIT_TEST_CASES(tp)
-{
-	ATF_ADD_TEST_CASE(tp, dnvlist_get_bool__present);
-	ATF_ADD_TEST_CASE(tp, dnvlist_get_bool__default_value);
-	ATF_ADD_TEST_CASE(tp, dnvlist_get_number__present);
-	ATF_ADD_TEST_CASE(tp, dnvlist_get_number__default_value);
-	ATF_ADD_TEST_CASE(tp, dnvlist_get_string__present);
-	ATF_ADD_TEST_CASE(tp, dnvlist_get_string__default_value);
-	ATF_ADD_TEST_CASE(tp, dnvlist_get_nvlist__present);
-	ATF_ADD_TEST_CASE(tp, dnvlist_get_nvlist__default_value);
-	ATF_ADD_TEST_CASE(tp, dnvlist_get_binary__present);
-	ATF_ADD_TEST_CASE(tp, dnvlist_get_binary__default_value);
-
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_bool__present);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_bool__empty);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_bool__default_value);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_number__present);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_number__empty);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_number__default_value);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_string__present);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_string__empty);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_string__default_value);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_nvlist__present);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_nvlist__empty);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_nvlist__default_value);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_binary__present);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_binary__empty);
-	ATF_ADD_TEST_CASE(tp, dnvlist_take_binary__default_value);
-}
diff --git a/src/tests/nv_array_tests.cc b/src/tests/nv_array_tests.cc
deleted file mode 100644
index 70daecf..0000000
--- a/src/tests/nv_array_tests.cc
+++ /dev/null
@@ -1,1197 +0,0 @@
-/*-
- * Copyright (c) 2015 Mariusz Zaborski <oshogbo@FreeBSD.org>
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
-
-#include <sys/cdefs.h>
-__FBSDID("$FreeBSD: head/lib/libnv/tests/nv_array_tests.cc 286796 2015-08-15 06:34:49Z oshogbo $");
-
-#include <sys/param.h>
-#include <sys/types.h>
-#include <sys/nv.h>
-#include <sys/socket.h>
-
-#include <atf-c++.hpp>
-
-#include <cstdio>
-#include <errno.h>
-#include <fcntl.h>
-#include <limits>
-#include <set>
-#include <sstream>
-#include <string>
-
-#define fd_is_valid(fd) (fcntl((fd), F_GETFL) != -1 || errno != EBADF)
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_bool_array__basic);
-ATF_TEST_CASE_BODY(nvlist_bool_array__basic)
-{
-	bool testbool[16];
-	const bool *const_result;
-	bool *result;
-	nvlist_t *nvl;
-	size_t num_items;
-	unsigned int i;
-	const char *key;
-
-	key = "nvl/bool";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	for (i = 0; i < 16; i++)
-		testbool[i] = (i % 2 == 0);
-
-	nvlist_add_bool_array(nvl, key, testbool, 16);
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_bool_array(nvl, key));
-	ATF_REQUIRE(nvlist_exists_bool_array(nvl, "nvl/bool"));
-
-	const_result = nvlist_get_bool_array(nvl, key, &num_items);
-	ATF_REQUIRE_EQ(num_items, 16);
-	ATF_REQUIRE(const_result != NULL);
-	for (i = 0; i < num_items; i++)
-		ATF_REQUIRE_EQ(const_result[i], testbool[i]);
-
-	result = nvlist_take_bool_array(nvl, key, &num_items);
-	ATF_REQUIRE_EQ(num_items, 16);
-	ATF_REQUIRE(const_result != NULL);
-	for (i = 0; i < num_items; i++)
-		ATF_REQUIRE_EQ(result[i], testbool[i]);
-
-	ATF_REQUIRE(!nvlist_exists_bool_array(nvl, key));
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-
-	free(result);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_string_array__basic);
-ATF_TEST_CASE_BODY(nvlist_string_array__basic)
-{
-	const char * const *const_result;
-	char **result;
-	nvlist_t *nvl;
-	size_t num_items;
-	unsigned int i;
-	const char *key;
-	const char *string_arr[8] = { "a", "b", "kot", "foo",
-	    "tests", "nice test", "", "abcdef" };
-
-	key = "nvl/string";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	nvlist_add_string_array(nvl, key, string_arr, nitems(string_arr));
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_string_array(nvl, key));
-	ATF_REQUIRE(nvlist_exists_string_array(nvl, "nvl/string"));
-
-	const_result = nvlist_get_string_array(nvl, key, &num_items);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(const_result != NULL);
-	ATF_REQUIRE(num_items == nitems(string_arr));
-	for (i = 0; i < num_items; i++) {
-		if (string_arr[i] != NULL) {
-			ATF_REQUIRE(strcmp(const_result[i],
-			    string_arr[i]) == 0);
-		} else {
-			ATF_REQUIRE(const_result[i] == string_arr[i]);
-		}
-	}
-
-	result = nvlist_take_string_array(nvl, key, &num_items);
-	ATF_REQUIRE(result != NULL);
-	ATF_REQUIRE_EQ(num_items, nitems(string_arr));
-	for (i = 0; i < num_items; i++) {
-		if (string_arr[i] != NULL) {
-			ATF_REQUIRE_EQ(strcmp(result[i], string_arr[i]), 0);
-		} else {
-			ATF_REQUIRE_EQ(result[i], string_arr[i]);
-		}
-	}
-
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-
-	for (i = 0; i < num_items; i++)
-		free(result[i]);
-	free(result);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_descriptor_array__basic);
-ATF_TEST_CASE_BODY(nvlist_descriptor_array__basic)
-{
-	int fd[32], *result;
-	const int *const_result;
-	nvlist_t *nvl;
-	size_t num_items;
-	unsigned int i;
-	const char *key;
-
-	for (i = 0; i < nitems(fd); i++) {
-		fd[i] = dup(STDERR_FILENO);
-		ATF_REQUIRE(fd_is_valid(fd[i]));
-	}
-
-	key = "nvl/descriptor";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_descriptor_array(nvl, key));
-
-	nvlist_add_descriptor_array(nvl, key, fd, nitems(fd));
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_descriptor_array(nvl, key));
-	ATF_REQUIRE(nvlist_exists_descriptor_array(nvl, "nvl/descriptor"));
-
-	const_result = nvlist_get_descriptor_array(nvl, key, &num_items);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(const_result != NULL);
-	ATF_REQUIRE(num_items == nitems(fd));
-	for (i = 0; i < num_items; i++) {
-		ATF_REQUIRE(fd_is_valid(const_result[i]));
-		if (i > 0)
-			ATF_REQUIRE(const_result[i] != const_result[i - 1]);
-	}
-
-	result = nvlist_take_descriptor_array(nvl, key, &num_items);
-	ATF_REQUIRE(result != NULL);
-	ATF_REQUIRE_EQ(num_items, nitems(fd));
-	for (i = 0; i < num_items; i++) {
-		ATF_REQUIRE(fd_is_valid(result[i]));
-		if (i > 0)
-			ATF_REQUIRE(const_result[i] != const_result[i - 1]);
-	}
-
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-
-	for (i = 0; i < num_items; i++) {
-		close(result[i]);
-		close(fd[i]);
-	}
-	free(result);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_number_array__basic);
-ATF_TEST_CASE_BODY(nvlist_number_array__basic)
-{
-	const uint64_t *const_result;
-	uint64_t *result;
-	nvlist_t *nvl;
-	size_t num_items;
-	unsigned int i;
-	const char *key;
-	const uint64_t number[8] = { 0, UINT_MAX, 7, 123, 90,
-	    100000, 8, 1 };
-
-	key = "nvl/number";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	nvlist_add_number_array(nvl, key, number, nitems(number));
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_number_array(nvl, key));
-	ATF_REQUIRE(nvlist_exists_number_array(nvl, "nvl/number"));
-
-	const_result = nvlist_get_number_array(nvl, key, &num_items);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(const_result != NULL);
-	ATF_REQUIRE(num_items == nitems(number));
-	for (i = 0; i < num_items; i++)
-		ATF_REQUIRE_EQ(const_result[i], number[i]);
-
-	result = nvlist_take_number_array(nvl, key, &num_items);
-	ATF_REQUIRE(result != NULL);
-	ATF_REQUIRE_EQ(num_items, nitems(number));
-	for (i = 0; i < num_items; i++)
-		ATF_REQUIRE_EQ(result[i], number[i]);
-
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-
-	free(result);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_nvlist_array__basic);
-ATF_TEST_CASE_BODY(nvlist_nvlist_array__basic)
-{
-	nvlist_t *testnvl[8];
-	const nvlist_t * const *const_result;
-	nvlist_t **result;
-	nvlist_t *nvl;
-	size_t num_items;
-	unsigned int i;
-	const char *somestr[8] = { "a", "b", "c", "d", "e", "f", "g", "h" };
-	const char *key;
-
-	for (i = 0; i < 8; i++) {
-		testnvl[i] = nvlist_create(0);
-		ATF_REQUIRE(testnvl[i] != NULL);
-		ATF_REQUIRE_EQ(nvlist_error(testnvl[i]), 0);
-		nvlist_add_string(testnvl[i], "nvl/string", somestr[i]);
-		ATF_REQUIRE_EQ(nvlist_error(testnvl[i]), 0);
-		ATF_REQUIRE(nvlist_exists_string(testnvl[i], "nvl/string"));
-	}
-
-	key = "nvl/nvlist";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	nvlist_add_nvlist_array(nvl, key, (const nvlist_t * const *)testnvl, 8);
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_nvlist_array(nvl, key));
-	ATF_REQUIRE(nvlist_exists_nvlist_array(nvl, "nvl/nvlist"));
-
-	const_result = nvlist_get_nvlist_array(nvl, key, &num_items);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(const_result != NULL);
-	ATF_REQUIRE(num_items == nitems(testnvl));
-
-	for (i = 0; i < num_items; i++) {
-		ATF_REQUIRE_EQ(nvlist_error(const_result[i]), 0);
-		if (i < num_items - 1) {
-			ATF_REQUIRE(nvlist_get_array_next(const_result[i]) ==
-			    const_result[i + 1]);
-		} else {
-			ATF_REQUIRE(nvlist_get_array_next(const_result[i]) ==
-			    NULL);
-		}
-		ATF_REQUIRE(nvlist_get_parent(const_result[i], NULL) == nvl);
-		ATF_REQUIRE(nvlist_in_array(const_result[i]));
-		ATF_REQUIRE(nvlist_exists_string(const_result[i],
-		    "nvl/string"));
-		ATF_REQUIRE(strcmp(nvlist_get_string(const_result[i],
-		    "nvl/string"), somestr[i]) == 0);
-	}
-
-	result = nvlist_take_nvlist_array(nvl, key, &num_items);
-	ATF_REQUIRE(result != NULL);
-	ATF_REQUIRE_EQ(num_items, 8);
-	for (i = 0; i < num_items; i++) {
-		ATF_REQUIRE_EQ(nvlist_error(result[i]), 0);
-		ATF_REQUIRE(nvlist_get_array_next(result[i]) == NULL);
-		ATF_REQUIRE(nvlist_get_parent(result[i], NULL) == NULL);
-		ATF_REQUIRE(nvlist_get_array_next(const_result[i]) == NULL);
-		ATF_REQUIRE(!nvlist_in_array(const_result[i]));
-	}
-
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-
-	for (i = 0; i < 8; i++) {
-		nvlist_destroy(result[i]);
-		nvlist_destroy(testnvl[i]);
-	}
-
-	free(result);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_clone_array);
-ATF_TEST_CASE_BODY(nvlist_clone_array)
-{
-	nvlist_t *testnvl[8];
-	nvlist_t *src, *dst;
-	const nvlist_t *nvl;
-	bool testbool[16];
-	int testfd[16];
-	size_t i, num_items;
-	const char *string_arr[8] = { "a", "b", "kot", "foo",
-	    "tests", "nice test", "", "abcdef" };
-	const char *somestr[8] = { "a", "b", "c", "d", "e", "f", "g", "h" };
-	const uint64_t number[8] = { 0, UINT_MAX, 7, 123, 90,
-	    100000, 8, 1 };
-
-	for (i = 0; i < nitems(testfd); i++) {
-		testbool[i] = (i % 2 == 0);
-		testfd[i] = dup(STDERR_FILENO);
-		ATF_REQUIRE(fd_is_valid(testfd[i]));
-	}
-	for (i = 0; i < nitems(testnvl); i++) {
-		testnvl[i] = nvlist_create(0);
-		ATF_REQUIRE(nvlist_error(testnvl[i]) == 0);
-		nvlist_add_string(testnvl[i], "nvl/nvl/teststr", somestr[i]);
-		ATF_REQUIRE(nvlist_error(testnvl[i]) == 0);
-	}
-
-	src = nvlist_create(0);
-	ATF_REQUIRE(nvlist_error(src) == 0);
-
-	ATF_REQUIRE(!nvlist_exists_bool_array(src, "nvl/bool"));
-	nvlist_add_bool_array(src, "nvl/bool", testbool, nitems(testbool));
-	ATF_REQUIRE_EQ(nvlist_error(src), 0);
-	ATF_REQUIRE(nvlist_exists_bool_array(src, "nvl/bool"));
-
-	ATF_REQUIRE(!nvlist_exists_string_array(src, "nvl/string"));
-	nvlist_add_string_array(src, "nvl/string", string_arr,
-	    nitems(string_arr));
-	ATF_REQUIRE_EQ(nvlist_error(src), 0);
-	ATF_REQUIRE(nvlist_exists_string_array(src, "nvl/string"));
-
-	ATF_REQUIRE(!nvlist_exists_descriptor_array(src, "nvl/fd"));
-	nvlist_add_descriptor_array(src, "nvl/fd", testfd, nitems(testfd));
-	ATF_REQUIRE_EQ(nvlist_error(src), 0);
-	ATF_REQUIRE(nvlist_exists_descriptor_array(src, "nvl/fd"));
-
-	ATF_REQUIRE(!nvlist_exists_number_array(src, "nvl/number"));
-	nvlist_add_number_array(src, "nvl/number", number,
-	    nitems(number));
-	ATF_REQUIRE_EQ(nvlist_error(src), 0);
-	ATF_REQUIRE(nvlist_exists_number_array(src, "nvl/number"));
-
-	ATF_REQUIRE(!nvlist_exists_nvlist_array(src, "nvl/array"));
-	nvlist_add_nvlist_array(src, "nvl/array",
-	    (const nvlist_t * const *)testnvl, nitems(testnvl));
-	ATF_REQUIRE_EQ(nvlist_error(src), 0);
-	ATF_REQUIRE(nvlist_exists_nvlist_array(src, "nvl/array"));
-
-	dst = nvlist_clone(src);
-	ATF_REQUIRE(dst != NULL);
-
-	ATF_REQUIRE(nvlist_exists_bool_array(dst, "nvl/bool"));
-	(void) nvlist_get_bool_array(dst, "nvl/bool", &num_items);
-	ATF_REQUIRE_EQ(num_items, nitems(testbool));
-	for (i = 0; i < num_items; i++) {
-		ATF_REQUIRE(
-		    nvlist_get_bool_array(dst, "nvl/bool", &num_items)[i] ==
-		    nvlist_get_bool_array(src, "nvl/bool", &num_items)[i]);
-	}
-
-	ATF_REQUIRE(nvlist_exists_string_array(dst, "nvl/string"));
-	(void) nvlist_get_string_array(dst, "nvl/string", &num_items);
-	ATF_REQUIRE_EQ(num_items, nitems(string_arr));
-	for (i = 0; i < num_items; i++) {
-		if (nvlist_get_string_array(dst, "nvl/string",
-		    &num_items)[i] == NULL) {
-			ATF_REQUIRE(nvlist_get_string_array(dst, "nvl/string",
-			    &num_items)[i] == nvlist_get_string_array(src,
-			    "nvl/string", &num_items)[i]);
-		} else {
-			ATF_REQUIRE(strcmp(nvlist_get_string_array(dst,
-			    "nvl/string", &num_items)[i], nvlist_get_string_array(
-			    src, "nvl/string", &num_items)[i]) == 0);
-		}
-	}
-
-	ATF_REQUIRE(nvlist_exists_descriptor_array(dst, "nvl/fd"));
-	(void) nvlist_get_descriptor_array(dst, "nvl/fd", &num_items);
-	ATF_REQUIRE_EQ(num_items, nitems(testfd));
-	for (i = 0; i < num_items; i++) {
-		ATF_REQUIRE(fd_is_valid(
-		    nvlist_get_descriptor_array(dst, "nvl/fd", &num_items)[i]));
-	}
-	ATF_REQUIRE(nvlist_exists_number_array(dst, "nvl/number"));
-	(void) nvlist_get_number_array(dst, "nvl/number", &num_items);
-	ATF_REQUIRE_EQ(num_items, nitems(number));
-
-	for (i = 0; i < num_items; i++) {
-		ATF_REQUIRE(
-		    nvlist_get_number_array(dst, "nvl/number", &num_items)[i] ==
-		    nvlist_get_number_array(src, "nvl/number", &num_items)[i]);
-	}
-
-	ATF_REQUIRE(nvlist_exists_nvlist_array(dst, "nvl/array"));
-	(void) nvlist_get_nvlist_array(dst, "nvl/array", &num_items);
-	ATF_REQUIRE_EQ(num_items, nitems(testnvl));
-	for (i = 0; i < num_items; i++) {
-		nvl = nvlist_get_nvlist_array(dst, "nvl/array", &num_items)[i];
-		ATF_REQUIRE(nvlist_exists_string(nvl, "nvl/nvl/teststr"));
-		ATF_REQUIRE(strcmp(nvlist_get_string(nvl, "nvl/nvl/teststr"),
-		    somestr[i]) == 0);
-	}
-
-	for (i = 0; i < nitems(testfd); i++) {
-		close(testfd[i]);
-	}
-	for (i = 0; i < nitems(testnvl); i++) {
-		nvlist_destroy(testnvl[i]);
-	}
-	nvlist_destroy(src);
-	nvlist_destroy(dst);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_bool_array__move);
-ATF_TEST_CASE_BODY(nvlist_bool_array__move)
-{
-	bool *testbool;
-	const bool *const_result;
-	nvlist_t *nvl;
-	size_t num_items, count;
-	unsigned int i;
-	const char *key;
-
-	key = "nvl/bool";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	count = 16;
-	testbool = (bool*)malloc(sizeof(*testbool) * count);
-	ATF_REQUIRE(testbool != NULL);
-	for (i = 0; i < count; i++)
-		testbool[i] = (i % 2 == 0);
-
-	nvlist_move_bool_array(nvl, key, testbool, count);
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_bool_array(nvl, key));
-
-	const_result = nvlist_get_bool_array(nvl, key, &num_items);
-	ATF_REQUIRE_EQ(num_items, count);
-	ATF_REQUIRE(const_result != NULL);
-	ATF_REQUIRE(const_result == testbool);
-	for (i = 0; i < num_items; i++)
-		ATF_REQUIRE_EQ(const_result[i], (i % 2 == 0));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_string_array__move);
-ATF_TEST_CASE_BODY(nvlist_string_array__move)
-{
-	char **teststr;
-	const char * const *const_result;
-	nvlist_t *nvl;
-	size_t num_items, count;
-	unsigned int i;
-	const char *key;
-
-	key = "nvl/string";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	count = 26;
-	teststr = (char**)malloc(sizeof(*teststr) * count);
-	ATF_REQUIRE(teststr != NULL);
-	for (i = 0; i < count; i++) {
-		teststr[i] = (char*)malloc(sizeof(**teststr) * 2);
-		ATF_REQUIRE(teststr[i] != NULL);
-		teststr[i][0] = 'a' + i;
-		teststr[i][1] = '\0';
-	}
-
-	nvlist_move_string_array(nvl, key, teststr, count);
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_string_array(nvl, key));
-
-	const_result = nvlist_get_string_array(nvl, key, &num_items);
-	ATF_REQUIRE_EQ(num_items, count);
-	ATF_REQUIRE(const_result != NULL);
-	ATF_REQUIRE((intptr_t)const_result == (intptr_t)teststr);
-	for (i = 0; i < num_items; i++) {
-		ATF_REQUIRE_EQ(const_result[i][0], (char)('a' + i));
-		ATF_REQUIRE_EQ(const_result[i][1], '\0');
-	}
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_nvlist_array__move);
-ATF_TEST_CASE_BODY(nvlist_nvlist_array__move)
-{
-	nvlist **testnv;
-	const nvlist * const *const_result;
-	nvlist_t *nvl;
-	size_t num_items, count;
-	unsigned int i;
-	const char *key;
-
-	key = "nvl/nvlist";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_nvlist_array(nvl, key));
-
-	count = 26;
-	testnv = (nvlist**)malloc(sizeof(*testnv) * count);
-	ATF_REQUIRE(testnv != NULL);
-	for (i = 0; i < count; i++) {
-		testnv[i] = nvlist_create(0);
-		ATF_REQUIRE(testnv[i] != NULL);
-	}
-
-	nvlist_move_nvlist_array(nvl, key, testnv, count);
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_nvlist_array(nvl, key));
-
-	const_result = nvlist_get_nvlist_array(nvl, key, &num_items);
-	ATF_REQUIRE_EQ(num_items, count);
-	ATF_REQUIRE(const_result != NULL);
-	ATF_REQUIRE((intptr_t)const_result == (intptr_t)testnv);
-	for (i = 0; i < num_items; i++) {
-		ATF_REQUIRE_EQ(nvlist_error(const_result[i]), 0);
-		ATF_REQUIRE(nvlist_empty(const_result[i]));
-		if (i < num_items - 1) {
-			ATF_REQUIRE(nvlist_get_array_next(const_result[i]) ==
-			    const_result[i + 1]);
-		} else {
-			ATF_REQUIRE(nvlist_get_array_next(const_result[i]) ==
-			    NULL);
-		}
-		ATF_REQUIRE(nvlist_get_parent(const_result[i], NULL) == nvl);
-		ATF_REQUIRE(nvlist_in_array(const_result[i]));
-	}
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_number_array__move);
-ATF_TEST_CASE_BODY(nvlist_number_array__move)
-{
-	uint64_t *testnumber;
-	const uint64_t *const_result;
-	nvlist_t *nvl;
-	size_t num_items, count;
-	unsigned int i;
-	const char *key;
-
-	key = "nvl/number";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	count = 1000;
-	testnumber = (uint64_t*)malloc(sizeof(*testnumber) * count);
-	ATF_REQUIRE(testnumber != NULL);
-	for (i = 0; i < count; i++)
-		testnumber[i] = i;
-
-	nvlist_move_number_array(nvl, key, testnumber, count);
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_number_array(nvl, key));
-
-	const_result = nvlist_get_number_array(nvl, key, &num_items);
-	ATF_REQUIRE_EQ(num_items, count);
-	ATF_REQUIRE(const_result != NULL);
-	ATF_REQUIRE(const_result == testnumber);
-	for (i = 0; i < num_items; i++)
-		ATF_REQUIRE_EQ(const_result[i], i);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_descriptor_array__move);
-ATF_TEST_CASE_BODY(nvlist_descriptor_array__move)
-{
-	int *testfd;
-	const int *const_result;
-	nvlist_t *nvl;
-	size_t num_items, count;
-	unsigned int i;
-	const char *key;
-
-	key = "nvl/fd";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	count = 50;
-	testfd = (int*)malloc(sizeof(*testfd) * count);
-	ATF_REQUIRE(testfd != NULL);
-	for (i = 0; i < count; i++) {
-		testfd[i] = dup(STDERR_FILENO);
-		ATF_REQUIRE(fd_is_valid(testfd[i]));
-	}
-
-	nvlist_move_descriptor_array(nvl, key, testfd, count);
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_descriptor_array(nvl, key));
-
-	const_result = nvlist_get_descriptor_array(nvl, key, &num_items);
-	ATF_REQUIRE_EQ(num_items, count);
-	ATF_REQUIRE(const_result != NULL);
-	ATF_REQUIRE(const_result == testfd);
-	for (i = 0; i < num_items; i++)
-		ATF_REQUIRE(fd_is_valid(const_result[i]));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_arrays__error_null);
-ATF_TEST_CASE_BODY(nvlist_arrays__error_null)
-{
-	nvlist_t *nvl;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_add_number_array(nvl, "nvl/number", NULL, 0);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_move_number_array(nvl, "nvl/number", NULL, 0);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_add_descriptor_array(nvl, "nvl/fd", NULL, 0);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_move_descriptor_array(nvl, "nvl/fd", NULL, 0);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_add_string_array(nvl, "nvl/string", NULL, 0);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_move_string_array(nvl, "nvl/string", NULL, 0);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_add_nvlist_array(nvl, "nvl/nvlist", NULL, 0);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_move_nvlist_array(nvl, "nvl/nvlist", NULL, 0);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_add_bool_array(nvl, "nvl/bool", NULL, 0);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_move_bool_array(nvl, "nvl/bool", NULL, 0);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_arrays__bad_value);
-ATF_TEST_CASE_BODY(nvlist_arrays__bad_value)
-{
-	nvlist_t *nvl, *nvladd[1], **nvlmove;
-	int fdadd[1], *fdmove;
-
-	nvladd[0] = NULL;
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_add_nvlist_array(nvl, "nvl/nvlist", nvladd, 1);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	nvlmove = (nvlist_t**)malloc(sizeof(*nvlmove));
-	ATF_REQUIRE(nvlmove != NULL);
-	nvlmove[0] = NULL;
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_move_nvlist_array(nvl, "nvl/nvlist", nvlmove, 1);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	fdadd[0] = -2;
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_add_descriptor_array(nvl, "nvl/fd", fdadd, 1);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-
-	fdmove = (int*)malloc(sizeof(*fdmove));
-	ATF_REQUIRE(fdmove != NULL);
-	fdmove[0] = -2;
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_move_descriptor_array(nvl, "nvl/fd", fdmove, 1);
-	ATF_REQUIRE(nvlist_error(nvl) != 0);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_nvlist_array__travel);
-ATF_TEST_CASE_BODY(nvlist_nvlist_array__travel)
-{
-	nvlist_t *nvl, *test[5], *nasted;
-	const nvlist_t *travel;
-	const char *name;
-	void *cookie;
-	int type;
-	unsigned int i, index;
-
-	for (i = 0; i < nitems(test); i++) {
-		test[i] = nvlist_create(0);
-		ATF_REQUIRE(test[i] != NULL);
-		nvlist_add_number(test[i], "nvl/number", i);
-		ATF_REQUIRE(nvlist_error(test[i]) == 0);
-	}
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_add_nvlist_array(nvl, "nvl/nvlist_array", test, nitems(test));
-	ATF_REQUIRE(nvlist_error(nvl) == 0);
-	nasted = nvlist_create(0);
-	ATF_REQUIRE(nasted != NULL);
-	nvlist_add_nvlist_array(nasted, "nvl/nvl/nvlist_array", test,
-	    nitems(test));
-	ATF_REQUIRE(nvlist_error(nasted) == 0);
-	nvlist_move_nvlist(nvl, "nvl/nvl", nasted);
-	ATF_REQUIRE(nvlist_error(nvl) == 0);
-	nvlist_add_string(nvl, "nvl/string", "END");
-	ATF_REQUIRE(nvlist_error(nvl) == 0);
-
-	cookie = NULL;
-	index = 0;
-	travel = nvl;
-	do {
-		while ((name = nvlist_next(travel, &type, &cookie)) != NULL) {
-			if (index == 0) {
-				ATF_REQUIRE(type == NV_TYPE_NVLIST_ARRAY);
-			} else if (index >= 1 && index <= nitems(test)) {
-				ATF_REQUIRE(type == NV_TYPE_NUMBER);
-			} else if (index == nitems(test) + 1) {
-				ATF_REQUIRE(type == NV_TYPE_NVLIST);
-			} else if (index == nitems(test) + 2) {
-				ATF_REQUIRE(type == NV_TYPE_NVLIST_ARRAY);
-			} else if (index >= nitems(test) + 3 &&
-				   index <= 2 * nitems(test) + 2) {
-				ATF_REQUIRE(type == NV_TYPE_NUMBER);
-			} else if (index == 2 * nitems(test) + 3) {
-				ATF_REQUIRE(type == NV_TYPE_STRING);
-			}
-
-			if (type == NV_TYPE_NVLIST) {
-				travel = nvlist_get_nvlist(travel, name);
-				cookie = NULL;
-			} else if (type == NV_TYPE_NVLIST_ARRAY) {
-				travel = nvlist_get_nvlist_array(travel, name,
-				    NULL)[0];
-				cookie = NULL;
-			}
-			index ++;
-		}
-	} while ((travel = nvlist_get_pararr(travel, &cookie)) != NULL);
-
-	for (i = 0; i < nitems(test); i++)
-		nvlist_destroy(test[i]);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_nvlist_array__travel_alternative);
-ATF_TEST_CASE_BODY(nvlist_nvlist_array__travel_alternative)
-{
-	nvlist_t *nvl, *test[5], *nasted;
-	const nvlist_t *travel, *tmp;
-	void *cookie;
-	int index, i, type;
-	const char *name;
-
-	for (i = 0; i < 5; i++) {
-		test[i] = nvlist_create(0);
-		ATF_REQUIRE(test[i] != NULL);
-		nvlist_add_number(test[i], "nvl/number", i);
-		ATF_REQUIRE(nvlist_error(test[i]) == 0);
-	}
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	nvlist_add_nvlist_array(nvl, "nvl/nvlist_array", test, 5);
-	ATF_REQUIRE(nvlist_error(nvl) == 0);
-	nasted = nvlist_create(0);
-	ATF_REQUIRE(nasted != NULL);
-	nvlist_add_nvlist_array(nasted, "nvl/nvl/nvlist_array", test, 5);
-	ATF_REQUIRE(nvlist_error(nasted) == 0);
-	nvlist_move_nvlist(nvl, "nvl/nvl", nasted);
-	ATF_REQUIRE(nvlist_error(nvl) == 0);
-	nvlist_add_string(nvl, "nvl/string", "END");
-	ATF_REQUIRE(nvlist_error(nvl) == 0);
-
-	cookie = NULL;
-	index = 0;
-	tmp = travel = nvl;
-	do {
-		do {
-			travel = tmp;
-			while ((name = nvlist_next(travel, &type, &cookie)) !=
-			    NULL) {
-				if (index == 0) {
-					ATF_REQUIRE(type ==
-					    NV_TYPE_NVLIST_ARRAY);
-				} else if (index >= 1 && index <= 5) {
-					ATF_REQUIRE(type == NV_TYPE_NUMBER);
-				} else if (index == 6) {
-					ATF_REQUIRE(type == NV_TYPE_NVLIST);
-				} else if (index == 7) {
-					ATF_REQUIRE(type ==
-					    NV_TYPE_NVLIST_ARRAY);
-				} else if (index >= 8 && index <= 12) {
-					ATF_REQUIRE(type == NV_TYPE_NUMBER);
-				} else if (index == 13) {
-					ATF_REQUIRE(type == NV_TYPE_STRING);
-				}
-
-				if (type == NV_TYPE_NVLIST) {
-					travel = nvlist_get_nvlist(travel,
-					    name);
-					cookie = NULL;
-				} else if (type == NV_TYPE_NVLIST_ARRAY) {
-					travel = nvlist_get_nvlist_array(travel,
-					    name, NULL)[0];
-					cookie = NULL;
-				}
-				index ++;
-			}
-			cookie = NULL;
-		} while ((tmp = nvlist_get_array_next(travel)) != NULL);
-	} while ((tmp = nvlist_get_parent(travel, &cookie)) != NULL);
-
-	for (i = 0; i < 5; i++)
-		nvlist_destroy(test[i]);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_bool_array__pack);
-ATF_TEST_CASE_BODY(nvlist_bool_array__pack)
-{
-	nvlist_t *nvl, *unpacked;
-	const char *key;
-	size_t packed_size, count;
-	void *packed;
-	unsigned int i;
-	const bool *const_result;
-	bool testbool[16];
-
-	for (i = 0; i < nitems(testbool); i++)
-		testbool[i] = (i % 2 == 0);
-
-	key = "nvl/bool";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	nvlist_add_bool_array(nvl, key, testbool, nitems(testbool));
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_bool_array(nvl, key));
-
-	packed = nvlist_pack(nvl, &packed_size);
-	ATF_REQUIRE(packed != NULL);
-
-	unpacked = nvlist_unpack(packed, packed_size, 0);
-	ATF_REQUIRE(unpacked != NULL);
-	ATF_REQUIRE_EQ(nvlist_error(unpacked), 0);
-	ATF_REQUIRE(nvlist_exists_bool_array(unpacked, key));
-
-	const_result = nvlist_get_bool_array(unpacked, key, &count);
-	ATF_REQUIRE_EQ(count, nitems(testbool));
-	for (i = 0; i < count; i++) {
-		ATF_REQUIRE_EQ(testbool[i], const_result[i]);
-	}
-
-	nvlist_destroy(nvl);
-	nvlist_destroy(unpacked);
-	free(packed);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_number_array__pack);
-ATF_TEST_CASE_BODY(nvlist_number_array__pack)
-{
-	nvlist_t *nvl, *unpacked;
-	const char *key;
-	size_t packed_size, count;
-	void *packed;
-	unsigned int i;
-	const uint64_t *const_result;
-	const uint64_t number[8] = { 0, UINT_MAX, 7, 123, 90,
-	    100000, 8, 1 };
-
-	key = "nvl/number";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	nvlist_add_number_array(nvl, key, number, 8);
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_number_array(nvl, key));
-
-	packed = nvlist_pack(nvl, &packed_size);
-	ATF_REQUIRE(packed != NULL);
-
-	unpacked = nvlist_unpack(packed, packed_size, 0);
-	ATF_REQUIRE(unpacked != NULL);
-	ATF_REQUIRE_EQ(nvlist_error(unpacked), 0);
-	ATF_REQUIRE(nvlist_exists_number_array(unpacked, key));
-
-	const_result = nvlist_get_number_array(unpacked, key, &count);
-	ATF_REQUIRE_EQ(count, nitems(number));
-	for (i = 0; i < count; i++) {
-		ATF_REQUIRE_EQ(number[i], const_result[i]);
-	}
-
-	nvlist_destroy(nvl);
-	nvlist_destroy(unpacked);
-	free(packed);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_descriptor_array__pack);
-ATF_TEST_CASE_BODY(nvlist_descriptor_array__pack)
-{
-	nvlist_t *nvl;
-	const char *key;
-	size_t num_items;
-	unsigned int i;
-	const int *const_result;
-	int desc[32], fd, socks[2];
-	pid_t pid;
-
-	key = "nvl/descriptor";
-
-	ATF_REQUIRE_EQ(socketpair(PF_UNIX, SOCK_STREAM, 0, socks), 0);
-
-	pid = atf::utils::fork();
-	ATF_REQUIRE(pid >= 0);
-	if (pid == 0) {
-		/* Child. */
-		fd = socks[0];
-		close(socks[1]);
-		for (i = 0; i < nitems(desc); i++) {
-			desc[i] = dup(STDERR_FILENO);
-			ATF_REQUIRE(fd_is_valid(desc[i]));
-		}
-
-		nvl = nvlist_create(0);
-		ATF_REQUIRE(nvl != NULL);
-		ATF_REQUIRE(nvlist_empty(nvl));
-		ATF_REQUIRE(!nvlist_exists_descriptor_array(nvl, key));
-
-		nvlist_add_descriptor_array(nvl, key, desc, nitems(desc));
-		ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-		ATF_REQUIRE(!nvlist_empty(nvl));
-		ATF_REQUIRE(nvlist_exists_descriptor_array(nvl, key));
-
-		ATF_REQUIRE(nvlist_send(fd, nvl) >= 0);
-
-		for (i = 0; i < nitems(desc); i++)
-			close(desc[i]);
-	} else {
-		/* Parent */
-		fd = socks[1];
-		close(socks[0]);
-
-		errno = 0;
-		nvl = nvlist_recv(fd, 0);
-		ATF_REQUIRE(nvl != NULL);
-		ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-		ATF_REQUIRE(nvlist_exists_descriptor_array(nvl, key));
-
-		const_result = nvlist_get_descriptor_array(nvl, key, &num_items);
-		ATF_REQUIRE(const_result != NULL);
-		ATF_REQUIRE_EQ(num_items, nitems(desc));
-		for (i = 0; i < num_items; i++)
-			ATF_REQUIRE(fd_is_valid(const_result[i]));
-
-		atf::utils::wait(pid, 0, "", "");
-	}
-
-	nvlist_destroy(nvl);
-	close(fd);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_string_array__pack);
-ATF_TEST_CASE_BODY(nvlist_string_array__pack)
-{
-	nvlist_t *nvl, *unpacked;
-	const char *key;
-	size_t packed_size, count;
-	void *packed;
-	unsigned int i;
-	const char * const *const_result;
-	const char *string_arr[8] = { "a", "b", "kot", "foo",
-	    "tests", "nice test", "", "abcdef" };
-
-	key = "nvl/string";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	nvlist_add_string_array(nvl, key, string_arr, nitems(string_arr));
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_string_array(nvl, key));
-
-	packed = nvlist_pack(nvl, &packed_size);
-	ATF_REQUIRE(packed != NULL);
-
-	unpacked = nvlist_unpack(packed, packed_size, 0);
-	ATF_REQUIRE(unpacked != NULL);
-	ATF_REQUIRE_EQ(nvlist_error(unpacked), 0);
-	ATF_REQUIRE(nvlist_exists_string_array(unpacked, key));
-
-	const_result = nvlist_get_string_array(unpacked, key, &count);
-	ATF_REQUIRE_EQ(count, nitems(string_arr));
-	for (i = 0; i < count; i++) {
-		ATF_REQUIRE_EQ(strcmp(string_arr[i], const_result[i]), 0);
-	}
-
-	nvlist_destroy(nvl);
-	nvlist_destroy(unpacked);
-	free(packed);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_nvlist_array__pack);
-ATF_TEST_CASE_BODY(nvlist_nvlist_array__pack)
-{
-	nvlist_t *testnvl[8], *unpacked;
-	const nvlist_t * const *const_result;
-	nvlist_t *nvl;
-	size_t num_items, packed_size;
-	unsigned int i;
-	void *packed;
-	const char *somestr[8] = { "a", "b", "c", "d", "e", "f", "g", "h" };
-	const char *key;
-
-	for (i = 0; i < nitems(testnvl); i++) {
-		testnvl[i] = nvlist_create(0);
-		ATF_REQUIRE(testnvl[i] != NULL);
-		ATF_REQUIRE_EQ(nvlist_error(testnvl[i]), 0);
-		nvlist_add_string(testnvl[i], "nvl/string", somestr[i]);
-		ATF_REQUIRE_EQ(nvlist_error(testnvl[i]), 0);
-		ATF_REQUIRE(nvlist_exists_string(testnvl[i], "nvl/string"));
-	}
-
-	key = "nvl/nvlist";
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(nvlist_empty(nvl));
-	ATF_REQUIRE(!nvlist_exists_string_array(nvl, key));
-
-	nvlist_add_nvlist_array(nvl, key, (const nvlist_t * const *)testnvl, 8);
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_nvlist_array(nvl, key));
-	ATF_REQUIRE(nvlist_exists_nvlist_array(nvl, "nvl/nvlist"));
-	packed = nvlist_pack(nvl, &packed_size);
-	ATF_REQUIRE(packed != NULL);
-
-	unpacked = nvlist_unpack(packed, packed_size, 0);
-	ATF_REQUIRE(unpacked != NULL);
-	ATF_REQUIRE_EQ(nvlist_error(unpacked), 0);
-	ATF_REQUIRE(nvlist_exists_nvlist_array(unpacked, key));
-
-	const_result = nvlist_get_nvlist_array(unpacked, key, &num_items);
-	ATF_REQUIRE(const_result != NULL);
-	ATF_REQUIRE_EQ(num_items, nitems(testnvl));
-	for (i = 0; i < num_items; i++) {
-		ATF_REQUIRE_EQ(nvlist_error(const_result[i]), 0);
-		if (i < num_items - 1) {
-			ATF_REQUIRE(nvlist_get_array_next(const_result[i]) ==
-			    const_result[i + 1]);
-		} else {
-			ATF_REQUIRE(nvlist_get_array_next(const_result[i]) ==
-			    NULL);
-		}
-		ATF_REQUIRE(nvlist_get_parent(const_result[i], NULL) == unpacked);
-		ATF_REQUIRE(nvlist_in_array(const_result[i]));
-		ATF_REQUIRE(nvlist_exists_string(const_result[i],
-		    "nvl/string"));
-		ATF_REQUIRE(strcmp(nvlist_get_string(const_result[i],
-		    "nvl/string"), somestr[i]) == 0);
-	}
-
-	for (i = 0; i < nitems(testnvl); i++)
-		nvlist_destroy(testnvl[i]);
-	nvlist_destroy(nvl);
-	nvlist_destroy(unpacked);
-	free(packed);
-}
-
-ATF_INIT_TEST_CASES(tp)
-{
-
-	ATF_ADD_TEST_CASE(tp, nvlist_bool_array__basic);
-	ATF_ADD_TEST_CASE(tp, nvlist_string_array__basic);
-	ATF_ADD_TEST_CASE(tp, nvlist_descriptor_array__basic);
-	ATF_ADD_TEST_CASE(tp, nvlist_number_array__basic);
-	ATF_ADD_TEST_CASE(tp, nvlist_nvlist_array__basic)
-
-	ATF_ADD_TEST_CASE(tp, nvlist_clone_array)
-
-	ATF_ADD_TEST_CASE(tp, nvlist_bool_array__move);
-	ATF_ADD_TEST_CASE(tp, nvlist_string_array__move);
-	ATF_ADD_TEST_CASE(tp, nvlist_nvlist_array__move);
-	ATF_ADD_TEST_CASE(tp, nvlist_number_array__move);
-	ATF_ADD_TEST_CASE(tp, nvlist_descriptor_array__move);
-
-	ATF_ADD_TEST_CASE(tp, nvlist_arrays__error_null);
-
-	ATF_ADD_TEST_CASE(tp, nvlist_arrays__bad_value)
-
-	ATF_ADD_TEST_CASE(tp, nvlist_nvlist_array__travel)
-	ATF_ADD_TEST_CASE(tp, nvlist_nvlist_array__travel_alternative)
-
-	ATF_ADD_TEST_CASE(tp, nvlist_bool_array__pack)
-	ATF_ADD_TEST_CASE(tp, nvlist_number_array__pack)
-	ATF_ADD_TEST_CASE(tp, nvlist_descriptor_array__pack)
-	ATF_ADD_TEST_CASE(tp, nvlist_string_array__pack)
-	ATF_ADD_TEST_CASE(tp, nvlist_nvlist_array__pack)
-}
-
diff --git a/src/tests/nv_tests.cc b/src/tests/nv_tests.cc
deleted file mode 100644
index dac1e18..0000000
--- a/src/tests/nv_tests.cc
+++ /dev/null
@@ -1,1277 +0,0 @@
-/*-
- * Copyright (c) 2014-2015 Sandvine Inc.  All rights reserved.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
-
-#include <sys/cdefs.h>
-__FBSDID("$FreeBSD: head/lib/libnv/tests/nv_tests.cc 285063 2015-07-02 21:58:10Z oshogbo $");
-
-#include <sys/nv.h>
-
-#include <atf-c++.hpp>
-
-#include <errno.h>
-#include <limits>
-#include <set>
-#include <sstream>
-#include <string>
-
-/*
- * Test that a newly created nvlist has no errors, and is empty.
- */
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_create__is_empty);
-ATF_TEST_CASE_BODY(nvlist_create__is_empty)
-{
-	nvlist_t *nvl;
-	int type;
-	void *it;
-
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE(nvl != NULL);
-
-	ATF_REQUIRE_EQ(nvlist_error(nvl), 0);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	it = NULL;
-	ATF_REQUIRE_EQ(nvlist_next(nvl, &type, &it), static_cast<const char *>(NULL));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_add_null__single_insert);
-ATF_TEST_CASE_BODY(nvlist_add_null__single_insert)
-{
-	nvlist_t *nvl;
-	void *it;
-	const char *key;
-	int type;
-
-	key = "key";
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(!nvlist_exists(nvl, key));
-
-	nvlist_add_null(nvl, key);
-
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists(nvl, key));
-	ATF_REQUIRE(nvlist_exists_null(nvl, key));
-	ATF_REQUIRE(nvlist_exists_null(nvl, "key"));
-
-	/* Iterate over the nvlist; ensure that it has only our one key. */
-	it = NULL;
-	ATF_REQUIRE_EQ(strcmp(nvlist_next(nvl, &type, &it), key), 0);
-	ATF_REQUIRE_EQ(type, NV_TYPE_NULL);
-	ATF_REQUIRE_EQ(nvlist_next(nvl, &type,&it), static_cast<const char *>(NULL));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_add_bool__single_insert);
-ATF_TEST_CASE_BODY(nvlist_add_bool__single_insert)
-{
-	nvlist_t *nvl;
-	void *it;
-	const char *key;
-	int type;
-
-	key = "name";
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(!nvlist_exists(nvl, key));
-
-	nvlist_add_bool(nvl, key, true);
-
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists(nvl, key));
-	ATF_REQUIRE(nvlist_exists(nvl, "name"));
-	ATF_REQUIRE(nvlist_exists_bool(nvl, key));
-	ATF_REQUIRE(nvlist_exists_bool(nvl, "name"));
-	ATF_REQUIRE_EQ(nvlist_get_bool(nvl, key), true);
-
-	/* Iterate over the nvlist; ensure that it has only our one key. */
-	it = NULL;
-	ATF_REQUIRE_EQ(strcmp(nvlist_next(nvl, &type, &it), key), 0);
-	ATF_REQUIRE_EQ(type, NV_TYPE_BOOL);
-	ATF_REQUIRE_EQ(nvlist_next(nvl, &type,&it), static_cast<const char *>(NULL));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_add_number__single_insert);
-ATF_TEST_CASE_BODY(nvlist_add_number__single_insert)
-{
-	nvlist_t *nvl;
-	void *it;
-	const char *key;
-	uint64_t value;
-	int type;
-
-	key = "foo123";
-	value = 71965;
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(!nvlist_exists(nvl, key));
-
-	nvlist_add_number(nvl, key, value);
-
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists(nvl, key));
-	ATF_REQUIRE(nvlist_exists(nvl, "foo123"));
-	ATF_REQUIRE(nvlist_exists_number(nvl, key));
-	ATF_REQUIRE_EQ(nvlist_get_number(nvl, key), value);
-
-	/* Iterate over the nvlist; ensure that it has only our one key. */
-	it = NULL;
-	ATF_REQUIRE_EQ(strcmp(nvlist_next(nvl, &type, &it), key), 0);
-	ATF_REQUIRE_EQ(type, NV_TYPE_NUMBER);
-	ATF_REQUIRE_EQ(nvlist_next(nvl, &type,&it), static_cast<const char *>(NULL));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_add_string__single_insert);
-ATF_TEST_CASE_BODY(nvlist_add_string__single_insert)
-{
-	nvlist_t *nvl;
-	void *it;
-	const char *key;
-	const char *value;
-	int type;
-
-	key = "test";
-	value = "fgjdkgjdk";
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(!nvlist_exists(nvl, key));
-
-	nvlist_add_string(nvl, key, value);
-
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists(nvl, key));
-	ATF_REQUIRE(nvlist_exists(nvl, "test"));
-	ATF_REQUIRE(nvlist_exists_string(nvl, key));
-	ATF_REQUIRE(nvlist_exists_string(nvl, "test"));
-	ATF_REQUIRE_EQ(strcmp(nvlist_get_string(nvl, key), value), 0);
-
-	/* nvlist_add_* is required to clone the value, so check for that. */
-	ATF_REQUIRE(nvlist_get_string(nvl, key) != value);
-
-	/* Iterate over the nvlist; ensure that it has only our one key. */
-	it = NULL;
-	ATF_REQUIRE_EQ(strcmp(nvlist_next(nvl, &type, &it), key), 0);
-	ATF_REQUIRE_EQ(type, NV_TYPE_STRING);
-	ATF_REQUIRE_EQ(nvlist_next(nvl, &type,&it), static_cast<const char *>(NULL));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_add_nvlist__single_insert);
-ATF_TEST_CASE_BODY(nvlist_add_nvlist__single_insert)
-{
-	nvlist_t *nvl;
-	void *it;
-	const char *key, *subkey;
-	nvlist_t *sublist;
-	const nvlist_t *value;
-	int type;
-
-	key = "test";
-	subkey = "subkey";
-	sublist = nvlist_create(0);
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(!nvlist_exists(nvl, key));
-
-	nvlist_add_null(sublist, subkey);
-	nvlist_add_nvlist(nvl, key, sublist);
-
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists(nvl, key));
-	ATF_REQUIRE(nvlist_exists(nvl, "test"));
-	ATF_REQUIRE(nvlist_exists_nvlist(nvl, key));
-	ATF_REQUIRE(nvlist_exists_nvlist(nvl, "test"));
-
-	value = nvlist_get_nvlist(nvl, key);
-	ATF_REQUIRE(nvlist_exists_null(value, subkey));
-
-	/* nvlist_add_* is required to clone the value, so check for that. */
-	ATF_REQUIRE(sublist != value);
-
-	/* Iterate over the nvlist; ensure that it has only our one key. */
-	it = NULL;
-	ATF_REQUIRE_EQ(strcmp(nvlist_next(nvl, &type, &it), key), 0);
-	ATF_REQUIRE_EQ(type, NV_TYPE_NVLIST);
-	ATF_REQUIRE_EQ(nvlist_next(nvl, &type,&it), static_cast<const char *>(NULL));
-
-	nvlist_destroy(sublist);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_add_nvlist__child_with_error);
-ATF_TEST_CASE_BODY(nvlist_add_nvlist__child_with_error)
-{
-	nvlist_t *nvl, *parent;
-
-	nvl = nvlist_create(0);
-	parent = nvlist_create(0);
-
-	nvlist_set_error(nvl, EBADF);
-	nvlist_add_nvlist(parent, "test", nvl);
-	ATF_REQUIRE_EQ(nvlist_error(parent), EBADF);
-
-	nvlist_destroy(nvl);
-	nvlist_destroy(parent);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_add_binary__single_insert);
-ATF_TEST_CASE_BODY(nvlist_add_binary__single_insert)
-{
-	nvlist_t *nvl;
-	void *it;
-	const char *key;
-	void *value;
-	const void *ret_value;
-	size_t value_size, ret_size;
-	int type;
-
-	key = "binary";
-	value_size = 13;
-	value = malloc(value_size);
-	memset(value, 0xa5, value_size);
-	nvl = nvlist_create(0);
-
-	ATF_REQUIRE(nvl != NULL);
-	ATF_REQUIRE(!nvlist_exists(nvl, key));
-
-	nvlist_add_binary(nvl, key, value, value_size);
-
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists(nvl, key));
-	ATF_REQUIRE(nvlist_exists(nvl, "binary"));
-	ATF_REQUIRE(nvlist_exists_binary(nvl, key));
-	ATF_REQUIRE(nvlist_exists_binary(nvl, "binary"));
-
-	ret_value = nvlist_get_binary(nvl, key, &ret_size);
-	ATF_REQUIRE_EQ(value_size, ret_size);
-	ATF_REQUIRE_EQ(memcmp(value, ret_value, ret_size), 0);
-
-	/* nvlist_add_* is required to clone the value, so check for that. */
-	ATF_REQUIRE(value != ret_value);
-
-	/* Iterate over the nvlist; ensure that it has only our one key. */
-	it = NULL;
-	ATF_REQUIRE_EQ(strcmp(nvlist_next(nvl, &type, &it), key), 0);
-	ATF_REQUIRE_EQ(type, NV_TYPE_BINARY);
-	ATF_REQUIRE_EQ(nvlist_next(nvl, &type,&it), static_cast<const char *>(NULL));
-
-	nvlist_destroy(nvl);
-	free(value);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_clone__empty_nvlist);
-ATF_TEST_CASE_BODY(nvlist_clone__empty_nvlist)
-{
-	nvlist_t *nvl, *clone;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	clone = nvlist_clone(nvl);
-	ATF_REQUIRE(clone != NULL);
-	ATF_REQUIRE(clone != nvl);
-	ATF_REQUIRE(nvlist_empty(clone));
-
-	nvlist_destroy(clone);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_clone__nonempty_nvlist);
-ATF_TEST_CASE_BODY(nvlist_clone__nonempty_nvlist)
-{
-	nvlist_t *nvl, *clone;
-	const char *key;
-	void *it;
-	uint64_t value;
-	int type;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	key = "testkey";
-	value = 684874;
-	nvlist_add_number(nvl, key, value);
-
-	clone = nvlist_clone(nvl);
-	ATF_REQUIRE(clone != NULL);
-	ATF_REQUIRE(clone != nvl);
-	ATF_REQUIRE(nvlist_exists_number(clone, key));
-	ATF_REQUIRE_EQ(nvlist_get_number(clone, key), value);
-
-	/* Iterate over the nvlist; ensure that it has only our one key. */
-	it = NULL;
-	ATF_REQUIRE_EQ(strcmp(nvlist_next(clone, &type, &it), key), 0);
-	ATF_REQUIRE_EQ(type, NV_TYPE_NUMBER);
-	ATF_REQUIRE_EQ(nvlist_next(clone, &type, &it), static_cast<const char *>(NULL));
-
-	nvlist_destroy(clone);
-	nvlist_destroy(nvl);
-}
-
-static const char * const test_subnvlist_key = "nvlist";
-
-static const char * const test_string_key = "string";
-static const char * const test_string_val = "59525";
-
-static nvlist_t*
-create_test_nvlist(void)
-{
-	nvlist_t *nvl, *sublist;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	sublist = nvlist_create(0);
-	ATF_REQUIRE(sublist != NULL);
-
-	nvlist_add_string(sublist, test_string_key, test_string_val);
-	nvlist_move_nvlist(nvl, test_subnvlist_key, sublist);
-
-	return (nvl);
-}
-
-static void
-verify_test_nvlist(const nvlist_t *nvl)
-{
-	void *it;
-	const nvlist_t *value;
-	int type;
-
-	ATF_REQUIRE(nvlist_exists_nvlist(nvl, test_subnvlist_key));
-
-	value = nvlist_get_nvlist(nvl, test_subnvlist_key);
-
-	ATF_REQUIRE(nvlist_exists_string(value, test_string_key));
-	ATF_REQUIRE_EQ(strcmp(nvlist_get_string(value, test_string_key), test_string_val), 0);
-	ATF_REQUIRE(nvlist_get_string(value, test_string_key) != test_string_val);
-
-	/* Iterate over both nvlists; ensure that each has only the one key. */
-	it = NULL;
-	ATF_REQUIRE_EQ(strcmp(nvlist_next(value, &type, &it),
-	    test_string_key), 0);
-	ATF_REQUIRE_EQ(type, NV_TYPE_STRING);
-	ATF_REQUIRE_EQ(nvlist_next(value, &type, &it), static_cast<const char *>(NULL));
-
-	it = NULL;
-	ATF_REQUIRE_EQ(strcmp(nvlist_next(nvl, &type, &it),
-	    test_subnvlist_key), 0);
-	ATF_REQUIRE_EQ(type, NV_TYPE_NVLIST);
-	ATF_REQUIRE_EQ(nvlist_next(nvl, &type, &it), static_cast<const char *>(NULL));
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_clone__nested_nvlist);
-ATF_TEST_CASE_BODY(nvlist_clone__nested_nvlist)
-{
-	nvlist_t *nvl, *clone;
-
-	nvl = create_test_nvlist();
-	clone = nvlist_clone(nvl);
-
-	ATF_REQUIRE(clone != NULL);
-	ATF_REQUIRE(clone != nvl);
-	verify_test_nvlist(clone);
-
-	nvlist_destroy(clone);
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_clone__error_nvlist);
-ATF_TEST_CASE_BODY(nvlist_clone__error_nvlist)
-{
-	nvlist_t *nvl, *clone;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	nvlist_set_error(nvl, ENOMEM);
-
-	clone = nvlist_clone(nvl);
-	ATF_REQUIRE(clone == NULL);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_pack__empty_nvlist);
-ATF_TEST_CASE_BODY(nvlist_pack__empty_nvlist)
-{
-	nvlist_t *nvl, *unpacked;
-	void *packed;
-	size_t packed_size;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	packed = nvlist_pack(nvl, &packed_size);
-	ATF_REQUIRE(packed != NULL);
-
-	unpacked = nvlist_unpack(packed, packed_size, 0);
-	ATF_REQUIRE(unpacked != NULL);
-	ATF_REQUIRE(unpacked != nvl);
-	ATF_REQUIRE(nvlist_empty(unpacked));
-
-	nvlist_destroy(unpacked);
-	nvlist_destroy(nvl);
-	free(packed);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_unpack__flags_nvlist);
-ATF_TEST_CASE_BODY(nvlist_unpack__flags_nvlist)
-{
-	nvlist_t *nvl, *unpacked;
-	void *packed;
-	size_t packed_size;
-
-	nvl = nvlist_create(NV_FLAG_NO_UNIQUE);
-	ATF_REQUIRE(nvl != NULL);
-
-	nvlist_add_bool(nvl, "name", true);
-	ATF_REQUIRE(!nvlist_empty(nvl));
-	ATF_REQUIRE(nvlist_exists_bool(nvl, "name"));
-
-	packed = nvlist_pack(nvl, &packed_size);
-	ATF_REQUIRE(packed != NULL);
-
-	unpacked = nvlist_unpack(packed, packed_size, 0);
-	ATF_REQUIRE(unpacked == NULL);
-
-	unpacked = nvlist_unpack(packed, packed_size, NV_FLAG_IGNORE_CASE);
-	ATF_REQUIRE(unpacked == NULL);
-
-	unpacked = nvlist_unpack(packed, packed_size, NV_FLAG_NO_UNIQUE);
-	ATF_REQUIRE(unpacked != NULL);
-	ATF_REQUIRE(unpacked != nvl);
-	ATF_REQUIRE(!nvlist_empty(unpacked));
-	ATF_REQUIRE(nvlist_exists_bool(unpacked, "name"));
-
-	nvlist_destroy(unpacked);
-	nvlist_destroy(nvl);
-	free(packed);
-}
-
-static void
-verify_null(const nvlist_t *nvl, int type)
-{
-
-	ATF_REQUIRE_EQ(type, NV_TYPE_NULL);
-}
-
-static void
-verify_number(const nvlist_t *nvl, const char *name, int type, uint64_t value)
-{
-
-	ATF_REQUIRE_EQ(type, NV_TYPE_NUMBER);
-	ATF_REQUIRE_EQ(nvlist_get_number(nvl, name), value);
-}
-
-static void
-verify_string(const nvlist_t *nvl, const char *name, int type,
-    const char * value)
-{
-
-	ATF_REQUIRE_EQ(type, NV_TYPE_STRING);
-	ATF_REQUIRE_EQ(strcmp(nvlist_get_string(nvl, name), value), 0);
-}
-
-static void
-verify_nvlist(const nvlist_t *nvl, const char *name, int type)
-{
-
-	ATF_REQUIRE_EQ(type, NV_TYPE_NVLIST);
-	verify_test_nvlist(nvlist_get_nvlist(nvl, name));
-}
-
-static void
-verify_binary(const nvlist_t *nvl, const char *name, int type,
-    const void * value, size_t size)
-{
-	const void *actual_value;
-	size_t actual_size;
-
-	ATF_REQUIRE_EQ(type, NV_TYPE_BINARY);
-	actual_value = nvlist_get_binary(nvl, name, &actual_size);
-	ATF_REQUIRE_EQ(size, actual_size);
-	ATF_REQUIRE_EQ(memcmp(value, actual_value, size), 0);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_pack__multiple_values);
-ATF_TEST_CASE_BODY(nvlist_pack__multiple_values)
-{
-	std::ostringstream msg;
-	std::set<std::string> keys_seen;
-	nvlist_t *nvl, *unpacked, *nvvalue;
-	const char *nullkey, *numkey, *strkey, *nvkey, *binkey, *name;
-	int numvalue;
-	const char * strvalue;
-	void *binvalue, *packed, *it;
-	size_t binsize, packed_size;
-	int type;
-
-	nvl = nvlist_create(0);
-
-	nullkey = "null";
-	nvlist_add_null(nvl, nullkey);
-
-	numkey = "number";
-	numvalue = 939853984;
-	nvlist_add_number(nvl, numkey, numvalue);
-
-	strkey = "string";
-	strvalue = "jfieutijf";
-	nvlist_add_string(nvl, strkey, strvalue);
-
-	nvkey = "nvlist";
-	nvvalue = create_test_nvlist();
-	nvlist_move_nvlist(nvl, nvkey, nvvalue);
-
-	binkey = "binary";
-	binsize = 4;
-	binvalue = malloc(binsize);
-	memset(binvalue, 'b', binsize);
-	nvlist_move_binary(nvl, binkey, binvalue, binsize);
-
-	packed = nvlist_pack(nvl, &packed_size);
-	ATF_REQUIRE(packed != NULL);
-
-	unpacked = nvlist_unpack(packed, packed_size, 0);
-	ATF_REQUIRE(unpacked != 0);
-
-	it = NULL;
-	while ((name = nvlist_next(unpacked, &type, &it)) != NULL) {
-		/* Ensure that we see every key only once. */
-		ATF_REQUIRE_EQ(keys_seen.count(name), 0);
-
-		if (strcmp(name, nullkey) == 0)
-			verify_null(unpacked, type);
-		else if (strcmp(name, numkey) == 0)
-			verify_number(unpacked, name, type, numvalue);
-		else if (strcmp(name, strkey) == 0)
-			verify_string(unpacked, name, type, strvalue);
-		else if (strcmp(name, nvkey) == 0)
-			verify_nvlist(unpacked, name, type);
-		else if (strcmp(name, binkey) == 0)
-			verify_binary(unpacked, name, type, binvalue, binsize);
-		else {
-			msg << "Unexpected key :'" << name << "'";
-			ATF_FAIL(msg.str().c_str());
-		}
-
-		keys_seen.insert(name);
-	}
-
-	/* Ensure that we saw every key. */
-	ATF_REQUIRE_EQ(keys_seen.size(), 5);
-
-	nvlist_destroy(nvl);
-	nvlist_destroy(unpacked);
-	free(packed);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_pack__error_nvlist);
-ATF_TEST_CASE_BODY(nvlist_pack__error_nvlist)
-{
-	nvlist_t *nvl;
-	void *packed;
-	size_t size;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	nvlist_set_error(nvl, ENOMEM);
-
-	packed = nvlist_pack(nvl, &size);
-	ATF_REQUIRE(packed == NULL);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_unpack__duplicate_key);
-ATF_TEST_CASE_BODY(nvlist_unpack__duplicate_key)
-{
-	nvlist_t *nvl, *unpacked;
-	const char *key1, *key2;
-	void *packed, *keypos;
-	size_t size, keylen;
-
-	nvl = nvlist_create(0);
-
-	key1 = "key1";
-	keylen = strlen(key1);
-	nvlist_add_number(nvl, key1, 5);
-
-	key2 = "key2";
-	ATF_REQUIRE_EQ(keylen, strlen(key2));
-	nvlist_add_number(nvl, key2, 10);
-
-	packed = nvlist_pack(nvl, &size);
-	ATF_REQUIRE(packed != NULL);
-
-	/*
-	 * Mangle the packed nvlist by replacing key1 with key2, creating a
-	 * packed nvlist with a duplicate key.
-	 */
-	keypos = memmem(packed, size, key1, keylen);
-	ATF_REQUIRE(keypos != NULL);
-	memcpy(keypos, key2, keylen);
-
-	unpacked = nvlist_unpack(packed, size, 0);
-	ATF_REQUIRE(nvlist_error(unpacked) != 0);
-
-	free(packed);
-	nvlist_destroy(nvl);
-	nvlist_destroy(unpacked);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_move_string__single_insert);
-ATF_TEST_CASE_BODY(nvlist_move_string__single_insert)
-{
-	nvlist_t *nvl;
-	const char *key;
-	char *value;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	key = "testkey";
-	value = strdup("testval");
-	ATF_REQUIRE(value != NULL);
-
-	nvlist_move_string(nvl, key, value);
-	ATF_REQUIRE_EQ(nvlist_get_string(nvl, key), value);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_move_nvlist__null_child);
-ATF_TEST_CASE_BODY(nvlist_move_nvlist__null_child)
-{
-	nvlist_t *parent;
-
-	parent = nvlist_create(0);
-
-	nvlist_move_nvlist(parent, "test", NULL);
-
-	ATF_REQUIRE(nvlist_error(parent) != 0);
-
-	nvlist_destroy(parent);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_move_nvlist__child_with_error);
-ATF_TEST_CASE_BODY(nvlist_move_nvlist__child_with_error)
-{
-	nvlist_t *nvl, *parent;
-
-	nvl = nvlist_create(0);
-	parent = nvlist_create(0);
-
-	nvlist_set_error(nvl, EBADF);
-	nvlist_move_nvlist(parent, "test", nvl);
-	ATF_REQUIRE_EQ(nvlist_error(parent), EBADF);
-
-	nvlist_destroy(parent);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_move_nvlist__single_insert);
-ATF_TEST_CASE_BODY(nvlist_move_nvlist__single_insert)
-{
-	nvlist_t *nvl;
-	const char *key;
-	nvlist_t *value;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	key = "testkey";
-	value = nvlist_create(0);
-	ATF_REQUIRE(value != NULL);
-
-	nvlist_move_nvlist(nvl, key, value);
-	ATF_REQUIRE_EQ(nvlist_get_nvlist(nvl, key), value);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_move_binary__single_insert);
-ATF_TEST_CASE_BODY(nvlist_move_binary__single_insert)
-{
-	nvlist_t *nvl;
-	const char *key;
-	void *value;
-	size_t size, actual_size;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	key = "testkey";
-	size = 73;
-	value = malloc(size);
-	ATF_REQUIRE(value != NULL);
-
-	nvlist_move_binary(nvl, key, value, size);
-	ATF_REQUIRE_EQ(nvlist_get_binary(nvl, key, &actual_size), value);
-	ATF_REQUIRE_EQ(size, actual_size);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_take_bool__single_remove);
-ATF_TEST_CASE_BODY(nvlist_take_bool__single_remove)
-{
-	nvlist_t *nvl;
-	const char *testkey;
-	bool testval;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	testkey = "boolkey";
-	testval = false;
-	nvlist_add_bool(nvl, testkey, testval);
-
-	ATF_REQUIRE_EQ(nvlist_take_bool(nvl, testkey), testval);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_take_bool__other_keys_unchanged);
-ATF_TEST_CASE_BODY(nvlist_take_bool__other_keys_unchanged)
-{
-	nvlist_t *nvl;
-	const char *testkey, *otherkey1, *otherkey2;
-	bool testval, otherval1;
-	nvlist_t *otherval2;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	testkey = "boolkey";
-	testval = true;
-	nvlist_add_bool(nvl, testkey, testval);
-
-	otherkey1 = "key1";
-	otherval1 = false;
-	nvlist_add_bool(nvl, otherkey1, otherval1);
-
-	otherkey2 = "key2";
-	otherval2 = create_test_nvlist();
-	nvlist_move_nvlist(nvl, otherkey2, otherval2);
-
-	ATF_REQUIRE_EQ(nvlist_take_bool(nvl, testkey), testval);
-
-	ATF_REQUIRE(nvlist_exists_bool(nvl, otherkey1));
-	ATF_REQUIRE_EQ(nvlist_get_bool(nvl, otherkey1), otherval1);
-
-	ATF_REQUIRE(nvlist_exists_nvlist(nvl, otherkey2));
-	verify_test_nvlist(nvlist_get_nvlist(nvl, otherkey2));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_take_number__single_remove);
-ATF_TEST_CASE_BODY(nvlist_take_number__single_remove)
-{
-	nvlist_t *nvl;
-	const char *testkey;
-	uint64_t testval;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	testkey = "numkey";
-	testval = std::numeric_limits<uint64_t>::max();
-	nvlist_add_number(nvl, testkey, testval);
-
-	ATF_REQUIRE_EQ(nvlist_take_number(nvl, testkey), testval);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_take_number__other_keys_unchanged);
-ATF_TEST_CASE_BODY(nvlist_take_number__other_keys_unchanged)
-{
-	nvlist_t *nvl;
-	const char *testkey, *otherkey1, *otherkey2;
-	uint64_t testval, otherval1;
-	const char *otherval2;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	otherkey1 = "key1";
-	otherval1 = 5;
-	nvlist_add_number(nvl, otherkey1, otherval1);
-
-	testkey = "numkey";
-	testval = 1654;
-	nvlist_add_number(nvl, testkey, testval);
-
-	otherkey2 = "key2";
-	otherval2 = "string";
-	nvlist_add_string(nvl, otherkey2, otherval2);
-
-	ATF_REQUIRE_EQ(nvlist_take_number(nvl, testkey), testval);
-
-	ATF_REQUIRE(nvlist_exists_number(nvl, otherkey1));
-	ATF_REQUIRE_EQ(nvlist_get_number(nvl, otherkey1), otherval1);
-
-	ATF_REQUIRE(nvlist_exists_string(nvl, otherkey2));
-	ATF_REQUIRE_EQ(strcmp(nvlist_get_string(nvl, otherkey2), otherval2), 0);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_take_string__single_remove);
-ATF_TEST_CASE_BODY(nvlist_take_string__single_remove)
-{
-	nvlist_t *nvl;
-	const char *testkey;
-	const char *testval;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	testkey = "numkey";
-	testval = "nvlist";
-	nvlist_add_string(nvl, testkey, testval);
-
-	ATF_REQUIRE_EQ(strcmp(nvlist_take_string(nvl, testkey), testval), 0);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_take_string__other_keys_unchanged);
-ATF_TEST_CASE_BODY(nvlist_take_string__other_keys_unchanged)
-{
-	nvlist_t *nvl;
-	const char *testkey, *otherkey1, *otherkey2;
-	const char *testval, *otherval1;
-	bool otherval2;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	otherkey1 = "key1";
-	otherval1 = "fjdifjdk";
-	nvlist_add_string(nvl, otherkey1, otherval1);
-
-	otherkey2 = "key2";
-	otherval2 = true;
-	nvlist_add_bool(nvl, otherkey2, otherval2);
-
-	testkey = "strkey";
-	testval = "1654";
-	nvlist_add_string(nvl, testkey, testval);
-
-	ATF_REQUIRE_EQ(strcmp(nvlist_take_string(nvl, testkey), testval), 0);
-
-	ATF_REQUIRE(nvlist_exists_string(nvl, otherkey1));
-	ATF_REQUIRE_EQ(strcmp(nvlist_get_string(nvl, otherkey1), otherval1), 0);
-
-	ATF_REQUIRE(nvlist_exists_bool(nvl, otherkey2));
-	ATF_REQUIRE_EQ(nvlist_get_bool(nvl, otherkey2), otherval2);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_take_nvlist__single_remove);
-ATF_TEST_CASE_BODY(nvlist_take_nvlist__single_remove)
-{
-	nvlist_t *nvl;
-	const char *testkey;
-	nvlist_t *testval;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	testkey = "numkey";
-	testval = create_test_nvlist();
-	nvlist_move_nvlist(nvl, testkey, testval);
-
-	verify_test_nvlist(nvlist_take_nvlist(nvl, testkey));
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_take_nvlist__other_keys_unchanged);
-ATF_TEST_CASE_BODY(nvlist_take_nvlist__other_keys_unchanged)
-{
-	nvlist_t *nvl;
-	const char *testkey, *otherkey1, *otherkey2;
-	nvlist_t *testval, *otherval1;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	testkey = "strkey";
-	testval = create_test_nvlist();
-	nvlist_move_nvlist(nvl, testkey, testval);
-
-	otherkey1 = "key1";
-	otherval1 = nvlist_create(0);
-	nvlist_move_nvlist(nvl, otherkey1, otherval1);
-
-	otherkey2 = "key2";
-	nvlist_add_null(nvl, otherkey2);
-
-	verify_test_nvlist(nvlist_take_nvlist(nvl, testkey));
-
-	ATF_REQUIRE(nvlist_exists_nvlist(nvl, otherkey1));
-	ATF_REQUIRE(nvlist_empty(nvlist_get_nvlist(nvl, otherkey1)));
-
-	ATF_REQUIRE(nvlist_exists_null(nvl, otherkey2));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_take_binary__single_remove);
-ATF_TEST_CASE_BODY(nvlist_take_binary__single_remove)
-{
-	nvlist_t *nvl;
-	const char *testkey;
-	void *testval;
-	const void *actual_val;
-	size_t testsize, actual_size;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	testkey = "numkey";
-	testsize = 457;
-	testval = malloc(testsize);
-	memset(testval, '5', testsize);
-	nvlist_move_binary(nvl, testkey, testval, testsize);
-
-	actual_val = nvlist_take_binary(nvl, testkey, &actual_size);
-	ATF_REQUIRE_EQ(testsize, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_val, testval, testsize), 0);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_take_binary__other_keys_unchanged);
-ATF_TEST_CASE_BODY(nvlist_take_binary__other_keys_unchanged)
-{
-	nvlist_t *nvl;
-	const char *testkey, *otherkey1, *otherkey2;
-	const void *actual_value;
-	char testval[] = "gjiertj";
-	char otherval1[] = "fdreg";
-	size_t testsize, othersize, actual_size;
-	bool otherval2;
-
-	nvl = nvlist_create(0);
-	ATF_REQUIRE(nvl != NULL);
-
-	otherkey1 = "key1";
-	othersize = sizeof(otherval1);
-	nvlist_add_binary(nvl, otherkey1, otherval1, othersize);
-
-	otherkey2 = "key2";
-	otherval2 = true;
-	nvlist_add_bool(nvl, otherkey2, otherval2);
-
-	testkey = "strkey";
-	testsize = sizeof(testval);
-	nvlist_add_binary(nvl, testkey, testval, testsize);
-
-	actual_value = nvlist_take_binary(nvl, testkey, &actual_size);
-	ATF_REQUIRE_EQ(testsize, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_value, testval, testsize), 0);
-
-	ATF_REQUIRE(nvlist_exists_binary(nvl, otherkey1));
-	actual_value = nvlist_get_binary(nvl, otherkey1, &actual_size);
-	ATF_REQUIRE_EQ(othersize, actual_size);
-	ATF_REQUIRE_EQ(memcmp(actual_value, otherval1, othersize), 0);
-
-	ATF_REQUIRE(nvlist_exists_bool(nvl, otherkey2));
-	ATF_REQUIRE_EQ(nvlist_get_bool(nvl, otherkey2), otherval2);
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free__single_null);
-ATF_TEST_CASE_BODY(nvlist_free__single_null)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_null(nvl, key);
-
-	nvlist_free(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free__single_bool);
-ATF_TEST_CASE_BODY(nvlist_free__single_bool)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_bool(nvl, key, true);
-
-	nvlist_free(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free__single_number);
-ATF_TEST_CASE_BODY(nvlist_free__single_number)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_number(nvl, key, 584);
-
-	nvlist_free(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free__single_string);
-ATF_TEST_CASE_BODY(nvlist_free__single_string)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_string(nvl, key, "gjkfkjd");
-
-	nvlist_free(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free__single_nvlist);
-ATF_TEST_CASE_BODY(nvlist_free__single_nvlist)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_nvlist(nvl, key, nvlist_create(0));
-
-	nvlist_free(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free__single_binary);
-ATF_TEST_CASE_BODY(nvlist_free__single_binary)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_binary(nvl, key, "jgjgfd", 6);
-
-	nvlist_free(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free_null__single_null);
-ATF_TEST_CASE_BODY(nvlist_free_null__single_null)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_null(nvl, key);
-
-	nvlist_free_null(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free_bool__single_bool);
-ATF_TEST_CASE_BODY(nvlist_free_bool__single_bool)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_bool(nvl, key, true);
-
-	nvlist_free_bool(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free_number__single_number);
-ATF_TEST_CASE_BODY(nvlist_free_number__single_number)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_number(nvl, key, 584);
-
-	nvlist_free_number(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free_string__single_string);
-ATF_TEST_CASE_BODY(nvlist_free_string__single_string)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_string(nvl, key, "gjkfkjd");
-
-	nvlist_free_string(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free_nvlist__single_nvlist);
-ATF_TEST_CASE_BODY(nvlist_free_nvlist__single_nvlist)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_nvlist(nvl, key, nvlist_create(0));
-
-	nvlist_free_nvlist(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_TEST_CASE_WITHOUT_HEAD(nvlist_free_binary__single_binary);
-ATF_TEST_CASE_BODY(nvlist_free_binary__single_binary)
-{
-	nvlist_t *nvl;
-	const char *key;
-
-	nvl = nvlist_create(0);
-	key = "test";
-	nvlist_add_binary(nvl, key, "jgjgfd", 6);
-
-	nvlist_free_binary(nvl, key);
-	ATF_REQUIRE(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-}
-
-ATF_INIT_TEST_CASES(tp)
-{
-	ATF_ADD_TEST_CASE(tp, nvlist_create__is_empty);
-	ATF_ADD_TEST_CASE(tp, nvlist_add_null__single_insert);
-	ATF_ADD_TEST_CASE(tp, nvlist_add_bool__single_insert);
-	ATF_ADD_TEST_CASE(tp, nvlist_add_number__single_insert);
-	ATF_ADD_TEST_CASE(tp, nvlist_add_string__single_insert);
-	ATF_ADD_TEST_CASE(tp, nvlist_add_nvlist__single_insert);
-	ATF_ADD_TEST_CASE(tp, nvlist_add_nvlist__child_with_error);
-	ATF_ADD_TEST_CASE(tp, nvlist_add_binary__single_insert);
-
-	ATF_ADD_TEST_CASE(tp, nvlist_clone__empty_nvlist);
-	ATF_ADD_TEST_CASE(tp, nvlist_clone__nonempty_nvlist);
-	ATF_ADD_TEST_CASE(tp, nvlist_clone__nested_nvlist);
-	ATF_ADD_TEST_CASE(tp, nvlist_clone__error_nvlist);
-
-	ATF_ADD_TEST_CASE(tp, nvlist_pack__empty_nvlist);
-	ATF_ADD_TEST_CASE(tp, nvlist_pack__multiple_values);
-	ATF_ADD_TEST_CASE(tp, nvlist_pack__error_nvlist);
-	ATF_ADD_TEST_CASE(tp, nvlist_unpack__duplicate_key);
-	ATF_ADD_TEST_CASE(tp, nvlist_unpack__flags_nvlist);
-
-	ATF_ADD_TEST_CASE(tp, nvlist_move_string__single_insert);
-	ATF_ADD_TEST_CASE(tp, nvlist_move_nvlist__single_insert);
-	ATF_ADD_TEST_CASE(tp, nvlist_move_nvlist__null_child);
-	ATF_ADD_TEST_CASE(tp, nvlist_move_nvlist__child_with_error);
-	ATF_ADD_TEST_CASE(tp, nvlist_move_binary__single_insert);
-
-	ATF_ADD_TEST_CASE(tp, nvlist_take_bool__single_remove);
-	ATF_ADD_TEST_CASE(tp, nvlist_take_bool__other_keys_unchanged);
-	ATF_ADD_TEST_CASE(tp, nvlist_take_number__single_remove);
-	ATF_ADD_TEST_CASE(tp, nvlist_take_number__other_keys_unchanged);
-	ATF_ADD_TEST_CASE(tp, nvlist_take_string__single_remove);
-	ATF_ADD_TEST_CASE(tp, nvlist_take_string__other_keys_unchanged);
-	ATF_ADD_TEST_CASE(tp, nvlist_take_nvlist__single_remove);
-	ATF_ADD_TEST_CASE(tp, nvlist_take_nvlist__other_keys_unchanged);
-	ATF_ADD_TEST_CASE(tp, nvlist_take_binary__single_remove);
-	ATF_ADD_TEST_CASE(tp, nvlist_take_binary__other_keys_unchanged);
-
-	ATF_ADD_TEST_CASE(tp, nvlist_free__single_null);
-	ATF_ADD_TEST_CASE(tp, nvlist_free__single_bool);
-	ATF_ADD_TEST_CASE(tp, nvlist_free__single_number);
-	ATF_ADD_TEST_CASE(tp, nvlist_free__single_string);
-	ATF_ADD_TEST_CASE(tp, nvlist_free__single_nvlist);
-	ATF_ADD_TEST_CASE(tp, nvlist_free__single_binary);
-
-	ATF_ADD_TEST_CASE(tp, nvlist_free_null__single_null);
-	ATF_ADD_TEST_CASE(tp, nvlist_free_bool__single_bool);
-	ATF_ADD_TEST_CASE(tp, nvlist_free_number__single_number);
-	ATF_ADD_TEST_CASE(tp, nvlist_free_string__single_string);
-	ATF_ADD_TEST_CASE(tp, nvlist_free_nvlist__single_nvlist);
-	ATF_ADD_TEST_CASE(tp, nvlist_free_binary__single_binary);
-}
diff --git a/src/tests/nvlist_add_test.c b/src/tests/nvlist_add_test.c
deleted file mode 100644
index 73432a4..0000000
--- a/src/tests/nvlist_add_test.c
+++ /dev/null
@@ -1,196 +0,0 @@
-/*-
- * Copyright (c) 2013 The FreeBSD Foundation
- * All rights reserved.
- *
- * This software was developed by Pawel Jakub Dawidek under sponsorship from
- * the FreeBSD Foundation.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- * $FreeBSD: head/lib/libnv/tests/nvlist_add_test.c 285063 2015-07-02 21:58:10Z oshogbo $
- */
-
-#include <errno.h>
-#include <stdio.h>
-#include <unistd.h>
-
-#include "nv.h"
-
-static int ntest = 1;
-
-#define	CHECK(expr)	do {						\
-	if ((expr))							\
-		printf("ok # %d %s:%u\n", ntest, __FILE__, __LINE__);	\
-	else								\
-		printf("not ok # %d %s:%u\n", ntest, __FILE__, __LINE__);\
-	ntest++;							\
-} while (0)
-
-int
-main(void)
-{
-	const nvlist_t *cnvl;
-	nvlist_t *nvl;
-
-	printf("1..94\n");
-
-	nvl = nvlist_create(0);
-
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	nvlist_add_null(nvl, "nvlist/null");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_null(nvl, "nvlist/null"));
-
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool/true"));
-	nvlist_add_bool(nvl, "nvlist/bool/true", true);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool/true"));
-
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool/false"));
-	nvlist_add_bool(nvl, "nvlist/bool/false", false);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool/false"));
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/0"));
-	nvlist_add_number(nvl, "nvlist/number/0", 0);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/0"));
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/1"));
-	nvlist_add_number(nvl, "nvlist/number/1", 1);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/1"));
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/-1"));
-	nvlist_add_number(nvl, "nvlist/number/-1", -1);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/-1"));
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/UINT64_MAX"));
-	nvlist_add_number(nvl, "nvlist/number/UINT64_MAX", UINT64_MAX);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/UINT64_MAX"));
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/INT64_MIN"));
-	nvlist_add_number(nvl, "nvlist/number/INT64_MIN", INT64_MIN);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/INT64_MIN"));
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/INT64_MAX"));
-	nvlist_add_number(nvl, "nvlist/number/INT64_MAX", INT64_MAX);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/INT64_MAX"));
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string/"));
-	nvlist_add_string(nvl, "nvlist/string/", "");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_string(nvl, "nvlist/string/"));
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string/x"));
-	nvlist_add_string(nvl, "nvlist/string/x", "x");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_string(nvl, "nvlist/string/x"));
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz"));
-	nvlist_add_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz"));
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/stringf/"));
-	nvlist_add_stringf(nvl, "nvlist/stringf/", "%s", "");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_string(nvl, "nvlist/stringf/"));
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/stringf/x"));
-	nvlist_add_stringf(nvl, "nvlist/stringf/x", "%s", "x");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_string(nvl, "nvlist/stringf/x"));
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/stringf/666Xabc"));
-	nvlist_add_stringf(nvl, "nvlist/stringf/666Xabc", "%d%c%s", 666, 'X', "abc");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_string(nvl, "nvlist/stringf/666Xabc"));
-
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO"));
-	nvlist_add_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO", STDERR_FILENO);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO"));
-
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/binary/x"));
-	nvlist_add_binary(nvl, "nvlist/binary/x", "x", 1);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary/x"));
-
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz"));
-	nvlist_add_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz"));
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz"));
-
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	nvlist_add_nvlist(nvl, "nvlist/nvlist", nvl);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-
-	CHECK(nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool/true"));
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool/false"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/0"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/1"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/-1"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/UINT64_MAX"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/INT64_MIN"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number/INT64_MAX"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string/"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string/x"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/stringf/"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/stringf/x"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/stringf/666Xabc"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary/x"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-
-	cnvl = nvlist_get_nvlist(nvl, "nvlist/nvlist");
-	CHECK(nvlist_exists_null(cnvl, "nvlist/null"));
-	CHECK(nvlist_exists_bool(cnvl, "nvlist/bool/true"));
-	CHECK(nvlist_exists_bool(cnvl, "nvlist/bool/false"));
-	CHECK(nvlist_exists_number(cnvl, "nvlist/number/0"));
-	CHECK(nvlist_exists_number(cnvl, "nvlist/number/1"));
-	CHECK(nvlist_exists_number(cnvl, "nvlist/number/-1"));
-	CHECK(nvlist_exists_number(cnvl, "nvlist/number/UINT64_MAX"));
-	CHECK(nvlist_exists_number(cnvl, "nvlist/number/INT64_MIN"));
-	CHECK(nvlist_exists_number(cnvl, "nvlist/number/INT64_MAX"));
-	CHECK(nvlist_exists_string(cnvl, "nvlist/string/"));
-	CHECK(nvlist_exists_string(cnvl, "nvlist/string/x"));
-	CHECK(nvlist_exists_string(cnvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz"));
-	CHECK(nvlist_exists_string(cnvl, "nvlist/stringf/"));
-	CHECK(nvlist_exists_string(cnvl, "nvlist/stringf/x"));
-	CHECK(nvlist_exists_string(cnvl, "nvlist/stringf/666Xabc"));
-	CHECK(nvlist_exists_descriptor(cnvl, "nvlist/descriptor/STDERR_FILENO"));
-	CHECK(nvlist_exists_binary(cnvl, "nvlist/binary/x"));
-	CHECK(nvlist_exists_binary(cnvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz"));
-
-	nvlist_destroy(nvl);
-
-	return (0);
-}
diff --git a/src/tests/nvlist_append_test.c b/src/tests/nvlist_append_test.c
deleted file mode 100644
index 5b18022..0000000
--- a/src/tests/nvlist_append_test.c
+++ /dev/null
@@ -1,118 +0,0 @@
-/*-
- * Copyright (c) 2018 The NetBSD Foundation, Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
- * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
- * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include <errno.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <unistd.h>
-
-#include "nv.h"
-
-static int ntest = 1;
-
-#define	CHECK(expr)	do {						\
-	if ((expr))							\
-		printf("ok # %d %s:%u\n", ntest, __FILE__, __LINE__);	\
-	else								\
-		printf("not ok # %d %s:%u\n", ntest, __FILE__, __LINE__);\
-	ntest++;							\
-} while (0)
-
-int
-main(void)
-{
-	const bool *bool_result;
-	const char * const *string_result;
-	const nvlist_t * const *nvl_result;
-	nvlist_t *nvl, *nvl1, *nvl2, **items;
-	unsigned int i;
-	size_t nitems;
-
-	printf("1..32\n");
-
-	nvl = nvlist_create(0);
-
-	for (i = 0; i < 16; i++)
-		nvlist_append_bool_array(nvl, "nvl/bool", i % 2 == 0);
-
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(!nvlist_empty(nvl));
-	CHECK(nvlist_exists_bool_array(nvl, "nvl/bool"));
-
-	bool_result = nvlist_get_bool_array(nvl, "nvl/bool", &nitems);
-	CHECK(nitems == 16);
-	CHECK(bool_result != NULL);
-	for (i = 0; i < nitems; i++)
-		CHECK(bool_result[i] == (i % 2 == 0));
-
-
-	nvlist_append_string_array(nvl, "nvl/string", "a");
-	nvlist_append_string_array(nvl, "nvl/string", "abc");
-	string_result = nvlist_get_string_array(nvl, "nvl/string", &nitems);
-	CHECK(nitems == 2);
-	CHECK(strcmp(string_result[0], "a") == 0);
-	CHECK(strcmp(string_result[1], "abc") == 0);
-
-
-	nvl1 = nvlist_create(0);
-	nvlist_add_string(nvl1, "key1", "test1");
-	nvlist_append_nvlist_array(nvl, "nvl/nvl", nvl1);
-	nvlist_destroy(nvl1);
-
-	nvl2 = nvlist_create(0);
-	nvlist_add_string(nvl2, "key2", "test2");
-	nvlist_append_nvlist_array(nvl, "nvl/nvl", nvl2);
-	nvlist_destroy(nvl2);
-
-	nvl_result = nvlist_get_nvlist_array(nvl, "nvl/nvl", &nitems);
-	CHECK(nitems == 2);
-	CHECK(strcmp(nvlist_get_string(nvl_result[0], "key1"), "test1") == 0);
-	CHECK(strcmp(nvlist_get_string(nvl_result[1], "key2"), "test2") == 0);
-
-	nvl1 = nvlist_create(0);
-	nvlist_add_number(nvl1, "key1", 10);
-	nvlist_append_nvlist_array(nvl, "nvl/nvl_array", nvl1);
-	nvlist_destroy(nvl1);
-
-	nvl2 = nvlist_create(0);
-	nvlist_add_number(nvl2, "key1", 20);
-	nvlist_append_nvlist_array(nvl, "nvl/nvl_array", nvl2);
-	nvlist_destroy(nvl2);
-
-	items = nvlist_take_nvlist_array(nvl, "nvl/nvl_array", &nitems);
-	CHECK(nvlist_get_number(items[0], "key1") == 10);
-	CHECK(nvlist_get_number(items[1], "key1") == 20);
-	CHECK(nvlist_error(items[0]) == 0);
-	CHECK(nvlist_error(items[1]) == 0);
-
-	nvlist_move_nvlist_array(nvl, "nvl/nvl_new_array", items, nitems);
-	CHECK(nvlist_error(nvl) == 0);
-
-	nvlist_destroy(nvl);
-
-	return (0);
-}
diff --git a/src/tests/nvlist_exists_test.c b/src/tests/nvlist_exists_test.c
deleted file mode 100644
index 11895b6..0000000
--- a/src/tests/nvlist_exists_test.c
+++ /dev/null
@@ -1,321 +0,0 @@
-/*-
- * Copyright (c) 2013 The FreeBSD Foundation
- * All rights reserved.
- *
- * This software was developed by Pawel Jakub Dawidek under sponsorship from
- * the FreeBSD Foundation.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- * $FreeBSD: head/lib/libnv/tests/nvlist_exists_test.c 285063 2015-07-02 21:58:10Z oshogbo $
- */
-
-#include <stdio.h>
-#include <unistd.h>
-
-#include "nv.h"
-
-static int ntest = 1;
-
-#define	CHECK(expr)	do {						\
-	if ((expr))							\
-		printf("ok # %d %s:%u\n", ntest, __FILE__, __LINE__);	\
-	else								\
-		printf("not ok # %d %s:%u\n", ntest, __FILE__, __LINE__);\
-	ntest++;							\
-} while (0)
-
-int
-main(void)
-{
-	nvlist_t *nvl;
-
-	printf("1..232\n");
-
-	nvl = nvlist_create(0);
-
-	CHECK(!nvlist_exists(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/null"));
-	nvlist_add_null(nvl, "nvlist/null");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists(nvl, "nvlist/null"));
-	CHECK(nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/null"));
-
-	CHECK(!nvlist_exists(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/bool"));
-	nvlist_add_bool(nvl, "nvlist/bool", true);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/bool"));
-
-	CHECK(!nvlist_exists(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/number"));
-	nvlist_add_number(nvl, "nvlist/number", 0);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/number"));
-
-	CHECK(!nvlist_exists(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/string"));
-	nvlist_add_string(nvl, "nvlist/string", "test");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/string"));
-
-	CHECK(!nvlist_exists(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/nvlist"));
-	nvlist_add_nvlist(nvl, "nvlist/nvlist", nvl);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/nvlist"));
-
-	CHECK(!nvlist_exists(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/descriptor"));
-	nvlist_add_descriptor(nvl, "nvlist/descriptor", STDERR_FILENO);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/descriptor"));
-
-	CHECK(!nvlist_exists(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/binary"));
-	nvlist_add_binary(nvl, "nvlist/binary", "test", 4);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/binary"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	CHECK(nvlist_exists(nvl, "nvlist/null"));
-	CHECK(nvlist_exists(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists(nvl, "nvlist/number"));
-	CHECK(nvlist_exists(nvl, "nvlist/string"));
-	CHECK(nvlist_exists(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists(nvl, "nvlist/binary"));
-	CHECK(nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_null(nvl, "nvlist/null");
-	CHECK(!nvlist_exists(nvl, "nvlist/null"));
-	CHECK(nvlist_exists(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists(nvl, "nvlist/number"));
-	CHECK(nvlist_exists(nvl, "nvlist/string"));
-	CHECK(nvlist_exists(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_bool(nvl, "nvlist/bool");
-	CHECK(!nvlist_exists(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists(nvl, "nvlist/number"));
-	CHECK(nvlist_exists(nvl, "nvlist/string"));
-	CHECK(nvlist_exists(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_number(nvl, "nvlist/number");
-	CHECK(!nvlist_exists(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists(nvl, "nvlist/number"));
-	CHECK(nvlist_exists(nvl, "nvlist/string"));
-	CHECK(nvlist_exists(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_string(nvl, "nvlist/string");
-	CHECK(!nvlist_exists(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists(nvl, "nvlist/string"));
-	CHECK(nvlist_exists(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_nvlist(nvl, "nvlist/nvlist");
-	CHECK(!nvlist_exists(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_descriptor(nvl, "nvlist/descriptor");
-	CHECK(!nvlist_exists(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_binary(nvl, "nvlist/binary");
-	CHECK(!nvlist_exists(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists(nvl, "nvlist/binary"));
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	CHECK(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-
-	return (0);
-}
diff --git a/src/tests/nvlist_free_test.c b/src/tests/nvlist_free_test.c
deleted file mode 100644
index d04f5cf..0000000
--- a/src/tests/nvlist_free_test.c
+++ /dev/null
@@ -1,221 +0,0 @@
-/*-
- * Copyright (c) 2013 The FreeBSD Foundation
- * All rights reserved.
- *
- * This software was developed by Pawel Jakub Dawidek under sponsorship from
- * the FreeBSD Foundation.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- * $FreeBSD: head/lib/libnv/tests/nvlist_free_test.c 285063 2015-07-02 21:58:10Z oshogbo $
- */
-
-#include <stdio.h>
-#include <unistd.h>
-
-#include "nv.h"
-
-static int ntest = 1;
-
-#define	CHECK(expr)	do {						\
-	if ((expr))							\
-		printf("ok # %d %s:%u\n", ntest, __FILE__, __LINE__);	\
-	else								\
-		printf("not ok # %d %s:%u\n", ntest, __FILE__, __LINE__);\
-	ntest++;							\
-} while (0)
-
-int
-main(void)
-{
-	nvlist_t *nvl;
-
-	printf("1..114\n");
-
-	nvl = nvlist_create(0);
-
-	nvlist_add_null(nvl, "nvlist/null");
-	nvlist_add_bool(nvl, "nvlist/bool", true);
-	nvlist_add_number(nvl, "nvlist/number", 0);
-	nvlist_add_string(nvl, "nvlist/string", "test");
-	nvlist_add_nvlist(nvl, "nvlist/nvlist", nvl);
-	nvlist_add_descriptor(nvl, "nvlist/descriptor", STDERR_FILENO);
-	nvlist_add_binary(nvl, "nvlist/binary", "test", 4);
-
-	CHECK(nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_null(nvl, "nvlist/null");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_bool(nvl, "nvlist/bool");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_number(nvl, "nvlist/number");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_string(nvl, "nvlist/string");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_nvlist(nvl, "nvlist/nvlist");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_descriptor(nvl, "nvlist/descriptor");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free_binary(nvl, "nvlist/binary");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	CHECK(nvlist_empty(nvl));
-
-	nvlist_add_null(nvl, "nvlist/null");
-	nvlist_add_bool(nvl, "nvlist/bool", true);
-	nvlist_add_number(nvl, "nvlist/number", 0);
-	nvlist_add_string(nvl, "nvlist/string", "test");
-	nvlist_add_nvlist(nvl, "nvlist/nvlist", nvl);
-	nvlist_add_descriptor(nvl, "nvlist/descriptor", STDERR_FILENO);
-	nvlist_add_binary(nvl, "nvlist/binary", "test", 4);
-
-	CHECK(nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free(nvl, "nvlist/null");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free(nvl, "nvlist/bool");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free(nvl, "nvlist/number");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free(nvl, "nvlist/string");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free(nvl, "nvlist/nvlist");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free(nvl, "nvlist/descriptor");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	nvlist_free(nvl, "nvlist/binary");
-	CHECK(!nvlist_exists_null(nvl, "nvlist/null"));
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool"));
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number"));
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string"));
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/descriptor"));
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/binary"));
-
-	CHECK(nvlist_empty(nvl));
-
-	nvlist_destroy(nvl);
-
-	return (0);
-}
diff --git a/src/tests/nvlist_get_test.c b/src/tests/nvlist_get_test.c
deleted file mode 100644
index 48fcb1b..0000000
--- a/src/tests/nvlist_get_test.c
+++ /dev/null
@@ -1,182 +0,0 @@
-/*-
- * Copyright (c) 2013 The FreeBSD Foundation
- * All rights reserved.
- *
- * This software was developed by Pawel Jakub Dawidek under sponsorship from
- * the FreeBSD Foundation.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- * $FreeBSD: head/lib/libnv/tests/nvlist_get_test.c 285063 2015-07-02 21:58:10Z oshogbo $
- */
-
-#include <errno.h>
-#include <fcntl.h>
-#include <stdio.h>
-#include <string.h>
-#include <unistd.h>
-
-#include "nv.h"
-
-static int ntest = 1;
-
-#define	CHECK(expr)	do {						\
-	if ((expr))							\
-		printf("ok # %d %s:%u\n", ntest, __FILE__, __LINE__);	\
-	else								\
-		printf("not ok # %d %s:%u\n", ntest, __FILE__, __LINE__);\
-	ntest++;							\
-} while (0)
-
-#define	fd_is_valid(fd)	(fcntl((fd), F_GETFL) != -1 || errno != EBADF)
-
-int
-main(void)
-{
-	const nvlist_t *cnvl;
-	nvlist_t *nvl;
-	size_t size;
-
-	printf("1..83\n");
-
-	nvl = nvlist_create(0);
-
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool/true"));
-	nvlist_add_bool(nvl, "nvlist/bool/true", true);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_get_bool(nvl, "nvlist/bool/true") == true);
-
-	CHECK(!nvlist_exists_bool(nvl, "nvlist/bool/false"));
-	nvlist_add_bool(nvl, "nvlist/bool/false", false);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_get_bool(nvl, "nvlist/bool/false") == false);
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/0"));
-	nvlist_add_number(nvl, "nvlist/number/0", 0);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_get_number(nvl, "nvlist/number/0") == 0);
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/1"));
-	nvlist_add_number(nvl, "nvlist/number/1", 1);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_get_number(nvl, "nvlist/number/1") == 1);
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/-1"));
-	nvlist_add_number(nvl, "nvlist/number/-1", -1);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK((int)nvlist_get_number(nvl, "nvlist/number/-1") == -1);
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/UINT64_MAX"));
-	nvlist_add_number(nvl, "nvlist/number/UINT64_MAX", UINT64_MAX);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_get_number(nvl, "nvlist/number/UINT64_MAX") == UINT64_MAX);
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/INT64_MIN"));
-	nvlist_add_number(nvl, "nvlist/number/INT64_MIN", INT64_MIN);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK((int64_t)nvlist_get_number(nvl, "nvlist/number/INT64_MIN") == INT64_MIN);
-
-	CHECK(!nvlist_exists_number(nvl, "nvlist/number/INT64_MAX"));
-	nvlist_add_number(nvl, "nvlist/number/INT64_MAX", INT64_MAX);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK((int64_t)nvlist_get_number(nvl, "nvlist/number/INT64_MAX") == INT64_MAX);
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string/"));
-	nvlist_add_string(nvl, "nvlist/string/", "");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(strcmp(nvlist_get_string(nvl, "nvlist/string/"), "") == 0);
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string/x"));
-	nvlist_add_string(nvl, "nvlist/string/x", "x");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(strcmp(nvlist_get_string(nvl, "nvlist/string/x"), "x") == 0);
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz"));
-	nvlist_add_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz");
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(strcmp(nvlist_get_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz"), "abcdefghijklmnopqrstuvwxyz") == 0);
-
-	CHECK(!nvlist_exists_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO"));
-	nvlist_add_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO", STDERR_FILENO);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(fd_is_valid(nvlist_get_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO")));
-
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/binary/x"));
-	nvlist_add_binary(nvl, "nvlist/binary/x", "x", 1);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(memcmp(nvlist_get_binary(nvl, "nvlist/binary/x", NULL), "x", 1) == 0);
-	CHECK(memcmp(nvlist_get_binary(nvl, "nvlist/binary/x", &size), "x", 1) == 0);
-	CHECK(size == 1);
-
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz"));
-	nvlist_add_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz"));
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(memcmp(nvlist_get_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz", NULL), "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz")) == 0);
-	CHECK(memcmp(nvlist_get_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz", &size), "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz")) == 0);
-	CHECK(size == sizeof("abcdefghijklmnopqrstuvwxyz"));
-
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	nvlist_add_nvlist(nvl, "nvlist/nvlist", nvl);
-	CHECK(nvlist_error(nvl) == 0);
-	cnvl = nvlist_get_nvlist(nvl, "nvlist/nvlist");
-	CHECK(nvlist_get_bool(cnvl, "nvlist/bool/true") == true);
-	CHECK(nvlist_get_bool(cnvl, "nvlist/bool/false") == false);
-	CHECK(nvlist_get_number(cnvl, "nvlist/number/0") == 0);
-	CHECK(nvlist_get_number(cnvl, "nvlist/number/1") == 1);
-	CHECK((int)nvlist_get_number(cnvl, "nvlist/number/-1") == -1);
-	CHECK(nvlist_get_number(cnvl, "nvlist/number/UINT64_MAX") == UINT64_MAX);
-	CHECK((int64_t)nvlist_get_number(cnvl, "nvlist/number/INT64_MIN") == INT64_MIN);
-	CHECK((int64_t)nvlist_get_number(cnvl, "nvlist/number/INT64_MAX") == INT64_MAX);
-	CHECK(strcmp(nvlist_get_string(cnvl, "nvlist/string/"), "") == 0);
-	CHECK(strcmp(nvlist_get_string(cnvl, "nvlist/string/x"), "x") == 0);
-	CHECK(strcmp(nvlist_get_string(cnvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz"), "abcdefghijklmnopqrstuvwxyz") == 0);
-	/* TODO */
-	CHECK(memcmp(nvlist_get_binary(cnvl, "nvlist/binary/x", NULL), "x", 1) == 0);
-	CHECK(memcmp(nvlist_get_binary(cnvl, "nvlist/binary/x", &size), "x", 1) == 0);
-	CHECK(size == 1);
-	CHECK(memcmp(nvlist_get_binary(cnvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz", NULL), "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz")) == 0);
-	CHECK(memcmp(nvlist_get_binary(cnvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz", &size), "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz")) == 0);
-	CHECK(size == sizeof("abcdefghijklmnopqrstuvwxyz"));
-
-	CHECK(nvlist_get_bool(nvl, "nvlist/bool/true") == true);
-	CHECK(nvlist_get_bool(nvl, "nvlist/bool/false") == false);
-	CHECK(nvlist_get_number(nvl, "nvlist/number/0") == 0);
-	CHECK(nvlist_get_number(nvl, "nvlist/number/1") == 1);
-	CHECK((int)nvlist_get_number(nvl, "nvlist/number/-1") == -1);
-	CHECK(nvlist_get_number(nvl, "nvlist/number/UINT64_MAX") == UINT64_MAX);
-	CHECK((int64_t)nvlist_get_number(nvl, "nvlist/number/INT64_MIN") == INT64_MIN);
-	CHECK((int64_t)nvlist_get_number(nvl, "nvlist/number/INT64_MAX") == INT64_MAX);
-	CHECK(strcmp(nvlist_get_string(nvl, "nvlist/string/"), "") == 0);
-	CHECK(strcmp(nvlist_get_string(nvl, "nvlist/string/x"), "x") == 0);
-	CHECK(strcmp(nvlist_get_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz"), "abcdefghijklmnopqrstuvwxyz") == 0);
-	CHECK(fd_is_valid(nvlist_get_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO")));
-	CHECK(memcmp(nvlist_get_binary(nvl, "nvlist/binary/x", NULL), "x", 1) == 0);
-	CHECK(memcmp(nvlist_get_binary(nvl, "nvlist/binary/x", &size), "x", 1) == 0);
-	CHECK(size == 1);
-	CHECK(memcmp(nvlist_get_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz", NULL), "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz")) == 0);
-	CHECK(memcmp(nvlist_get_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz", &size), "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz")) == 0);
-	CHECK(size == sizeof("abcdefghijklmnopqrstuvwxyz"));
-
-	nvlist_destroy(nvl);
-
-	return (0);
-}
diff --git a/src/tests/nvlist_move_test.c b/src/tests/nvlist_move_test.c
deleted file mode 100644
index bd06e01..0000000
--- a/src/tests/nvlist_move_test.c
+++ /dev/null
@@ -1,161 +0,0 @@
-/*-
- * Copyright (c) 2013 The FreeBSD Foundation
- * All rights reserved.
- *
- * This software was developed by Pawel Jakub Dawidek under sponsorship from
- * the FreeBSD Foundation.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- * $FreeBSD: head/lib/libnv/tests/nvlist_move_test.c 285063 2015-07-02 21:58:10Z oshogbo $
- */
-
-#include <errno.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <unistd.h>
-
-#include "nv.h"
-
-static int ntest = 1;
-
-#define	CHECK(expr)	do {						\
-	if ((expr))							\
-		printf("ok # %d %s:%u\n", ntest, __FILE__, __LINE__);	\
-	else								\
-		printf("not ok # %d %s:%u\n", ntest, __FILE__, __LINE__);\
-	ntest++;							\
-} while (0)
-
-int
-main(void)
-{
-	const nvlist_t *cnvl;
-	nvlist_t *nvl;
-	void *ptr;
-	size_t size;
-	int fd;
-
-	printf("1..52\n");
-
-	nvl = nvlist_create(0);
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string/"));
-	ptr = strdup("");
-	CHECK(ptr != NULL);
-	nvlist_move_string(nvl, "nvlist/string/", ptr);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_string(nvl, "nvlist/string/"));
-	CHECK(ptr == nvlist_get_string(nvl, "nvlist/string/"));
-
-	CHECK(!nvlist_exists_string(nvl, "nvlist/string/x"));
-	ptr = strdup("x");
-	CHECK(ptr != NULL);
-	nvlist_move_string(nvl, "nvlist/string/x", ptr);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_string(nvl, "nvlist/string/x"));
-	CHECK(ptr == nvlist_get_string(nvl, "nvlist/string/x"));
-
-	CHECK(!nvlist_exists_string(nvl,
-	    "nvlist/string/abcdefghijklmnopqrstuvwxyz"));
-	ptr = strdup("abcdefghijklmnopqrstuvwxyz");
-	CHECK(ptr != NULL);
-	nvlist_move_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz",
-	    ptr);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_string(nvl,
-	    "nvlist/string/abcdefghijklmnopqrstuvwxyz"));
-	CHECK(ptr ==
-	    nvlist_get_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz"));
-
-	CHECK(!nvlist_exists_descriptor(nvl,
-	    "nvlist/descriptor/STDERR_FILENO"));
-	fd = dup(STDERR_FILENO);
-	CHECK(fd >= 0);
-	nvlist_move_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO", fd);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO"));
-	CHECK(fd ==
-	    nvlist_get_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO"));
-
-	CHECK(!nvlist_exists_binary(nvl, "nvlist/binary/x"));
-	ptr = malloc(1);
-	CHECK(ptr != NULL);
-	memcpy(ptr, "x", 1);
-	nvlist_move_binary(nvl, "nvlist/binary/x", ptr, 1);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary/x"));
-	CHECK(ptr == nvlist_get_binary(nvl, "nvlist/binary/x", NULL));
-	CHECK(ptr == nvlist_get_binary(nvl, "nvlist/binary/x", &size));
-	CHECK(size == 1);
-
-	CHECK(!nvlist_exists_binary(nvl,
-	    "nvlist/binary/abcdefghijklmnopqrstuvwxyz"));
-	ptr = malloc(sizeof("abcdefghijklmnopqrstuvwxyz"));
-	CHECK(ptr != NULL);
-	memcpy(ptr, "abcdefghijklmnopqrstuvwxyz",
-	    sizeof("abcdefghijklmnopqrstuvwxyz"));
-	nvlist_move_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz",
-	    ptr, sizeof("abcdefghijklmnopqrstuvwxyz"));
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_binary(nvl,
-	    "nvlist/binary/abcdefghijklmnopqrstuvwxyz"));
-	CHECK(ptr == nvlist_get_binary(nvl,
-	    "nvlist/binary/abcdefghijklmnopqrstuvwxyz", NULL));
-	CHECK(ptr == nvlist_get_binary(nvl,
-	    "nvlist/binary/abcdefghijklmnopqrstuvwxyz", &size));
-	CHECK(size == sizeof("abcdefghijklmnopqrstuvwxyz"));
-
-	CHECK(!nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	ptr = nvlist_clone(nvl);
-	CHECK(ptr != NULL);
-	nvlist_move_nvlist(nvl, "nvlist/nvlist", ptr);
-	CHECK(nvlist_error(nvl) == 0);
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-	CHECK(ptr == nvlist_get_nvlist(nvl, "nvlist/nvlist"));
-
-	CHECK(nvlist_exists_string(nvl, "nvlist/string/"));
-	CHECK(nvlist_exists_string(nvl, "nvlist/string/x"));
-	CHECK(nvlist_exists_string(nvl,
-	    "nvlist/string/abcdefghijklmnopqrstuvwxyz"));
-	CHECK(nvlist_exists_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO"));
-	CHECK(nvlist_exists_binary(nvl, "nvlist/binary/x"));
-	CHECK(nvlist_exists_binary(nvl,
-	    "nvlist/binary/abcdefghijklmnopqrstuvwxyz"));
-	CHECK(nvlist_exists_nvlist(nvl, "nvlist/nvlist"));
-
-	cnvl = nvlist_get_nvlist(nvl, "nvlist/nvlist");
-	CHECK(nvlist_exists_string(cnvl, "nvlist/string/"));
-	CHECK(nvlist_exists_string(cnvl, "nvlist/string/x"));
-	CHECK(nvlist_exists_string(cnvl,
-	    "nvlist/string/abcdefghijklmnopqrstuvwxyz"));
-	CHECK(nvlist_exists_descriptor(cnvl,
-	    "nvlist/descriptor/STDERR_FILENO"));
-	CHECK(nvlist_exists_binary(cnvl, "nvlist/binary/x"));
-	CHECK(nvlist_exists_binary(cnvl,
-	    "nvlist/binary/abcdefghijklmnopqrstuvwxyz"));
-
-	nvlist_destroy(nvl);
-
-	return (0);
-}
diff --git a/src/tests/nvlist_send_recv_test.c b/src/tests/nvlist_send_recv_test.c
deleted file mode 100644
index d7c3fa2..0000000
--- a/src/tests/nvlist_send_recv_test.c
+++ /dev/null
@@ -1,397 +0,0 @@
-/*-
- * Copyright (c) 2013 The FreeBSD Foundation
- * All rights reserved.
- *
- * This software was developed by Pawel Jakub Dawidek under sponsorship from
- * the FreeBSD Foundation.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- * $FreeBSD: head/lib/libnv/tests/nvlist_send_recv_test.c 285063 2015-07-02 21:58:10Z oshogbo $
- */
-
-#include <sys/types.h>
-#include <sys/socket.h>
-#include <sys/wait.h>
-
-#include <stdlib.h>
-#include <err.h>
-#include <errno.h>
-#include <fcntl.h>
-#include <stdio.h>
-#include <string.h>
-#include <unistd.h>
-
-#include "nv.h"
-
-static int ntest = 1;
-
-#define	CHECK(expr)	do {						\
-	if ((expr))							\
-		printf("ok # %d %s:%u\n", ntest, __FILE__, __LINE__);	\
-	else								\
-		printf("not ok # %d %s:%u\n", ntest, __FILE__, __LINE__);\
-	ntest++;							\
-} while (0)
-
-#define	fd_is_valid(fd)	(fcntl((fd), F_GETFL) != -1 || errno != EBADF)
-
-static void
-child(int sock)
-{
-	nvlist_t *nvl;
-	nvlist_t *empty;
-	int pfd[2];
-
-	nvl = nvlist_create(0);
-	empty = nvlist_create(0);
-
-	nvlist_add_bool(nvl, "nvlist/bool/true", true);
-	nvlist_add_bool(nvl, "nvlist/bool/false", false);
-	nvlist_add_number(nvl, "nvlist/number/0", 0);
-	nvlist_add_number(nvl, "nvlist/number/1", 1);
-	nvlist_add_number(nvl, "nvlist/number/-1", -1);
-	nvlist_add_number(nvl, "nvlist/number/UINT64_MAX", UINT64_MAX);
-	nvlist_add_number(nvl, "nvlist/number/INT64_MIN", INT64_MIN);
-	nvlist_add_number(nvl, "nvlist/number/INT64_MAX", INT64_MAX);
-	nvlist_add_string(nvl, "nvlist/string/", "");
-	nvlist_add_string(nvl, "nvlist/string/x", "x");
-	nvlist_add_string(nvl, "nvlist/string/abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz");
-
-	nvlist_add_descriptor(nvl, "nvlist/descriptor/STDERR_FILENO", STDERR_FILENO);
-	if (pipe(pfd) == -1)
-		err(EXIT_FAILURE, "pipe");
-	if (write(pfd[1], "test", 4) != 4)
-		err(EXIT_FAILURE, "write");
-	close(pfd[1]);
-	nvlist_add_descriptor(nvl, "nvlist/descriptor/pipe_rd", pfd[0]);
-	close(pfd[0]);
-
-	nvlist_add_binary(nvl, "nvlist/binary/x", "x", 1);
-	nvlist_add_binary(nvl, "nvlist/binary/abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz"));
-	nvlist_move_nvlist(nvl, "nvlist/nvlist/empty", empty);
-	nvlist_add_nvlist(nvl, "nvlist/nvlist", nvl);
-
-	nvlist_send(sock, nvl);
-
-	nvlist_destroy(nvl);
-}
-
-static void
-parent(int sock)
-{
-	nvlist_t *nvl;
-	const nvlist_t *cnvl, *empty;
-	const char *name, *cname;
-	void *cookie, *ccookie;
-	int type, ctype, fd;
-	size_t size;
-	char buf[4];
-
-	nvl = nvlist_recv(sock, 0);
-	CHECK(nvlist_error(nvl) == 0);
-	if (nvlist_error(nvl) != 0)
-		err(1, "nvlist_recv() failed");
-
-	cookie = NULL;
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_BOOL);
-	CHECK(strcmp(name, "nvlist/bool/true") == 0);
-	CHECK(nvlist_get_bool(nvl, name) == true);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_BOOL);
-	CHECK(strcmp(name, "nvlist/bool/false") == 0);
-	CHECK(nvlist_get_bool(nvl, name) == false);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_NUMBER);
-	CHECK(strcmp(name, "nvlist/number/0") == 0);
-	CHECK(nvlist_get_number(nvl, name) == 0);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_NUMBER);
-	CHECK(strcmp(name, "nvlist/number/1") == 0);
-	CHECK(nvlist_get_number(nvl, name) == 1);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_NUMBER);
-	CHECK(strcmp(name, "nvlist/number/-1") == 0);
-	CHECK((int)nvlist_get_number(nvl, name) == -1);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_NUMBER);
-	CHECK(strcmp(name, "nvlist/number/UINT64_MAX") == 0);
-	CHECK(nvlist_get_number(nvl, name) == UINT64_MAX);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_NUMBER);
-	CHECK(strcmp(name, "nvlist/number/INT64_MIN") == 0);
-	CHECK((int64_t)nvlist_get_number(nvl, name) == INT64_MIN);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_NUMBER);
-	CHECK(strcmp(name, "nvlist/number/INT64_MAX") == 0);
-	CHECK((int64_t)nvlist_get_number(nvl, name) == INT64_MAX);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_STRING);
-	CHECK(strcmp(name, "nvlist/string/") == 0);
-	CHECK(strcmp(nvlist_get_string(nvl, name), "") == 0);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_STRING);
-	CHECK(strcmp(name, "nvlist/string/x") == 0);
-	CHECK(strcmp(nvlist_get_string(nvl, name), "x") == 0);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_STRING);
-	CHECK(strcmp(name, "nvlist/string/abcdefghijklmnopqrstuvwxyz") == 0);
-	CHECK(strcmp(nvlist_get_string(nvl, name), "abcdefghijklmnopqrstuvwxyz") == 0);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_DESCRIPTOR);
-	CHECK(strcmp(name, "nvlist/descriptor/STDERR_FILENO") == 0);
-	CHECK(fd_is_valid(nvlist_get_descriptor(nvl, name)));
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_DESCRIPTOR);
-	CHECK(strcmp(name, "nvlist/descriptor/pipe_rd") == 0);
-	fd = nvlist_get_descriptor(nvl, name);
-	CHECK(fd_is_valid(fd));
-	CHECK(read(fd, buf, sizeof(buf)) == 4);
-	CHECK(strncmp(buf, "test", sizeof(buf)) == 0);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_BINARY);
-	CHECK(strcmp(name, "nvlist/binary/x") == 0);
-	CHECK(memcmp(nvlist_get_binary(nvl, name, NULL), "x", 1) == 0);
-	CHECK(memcmp(nvlist_get_binary(nvl, name, &size), "x", 1) == 0);
-	CHECK(size == 1);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_BINARY);
-	CHECK(strcmp(name, "nvlist/binary/abcdefghijklmnopqrstuvwxyz") == 0);
-	CHECK(memcmp(nvlist_get_binary(nvl, name, NULL), "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz")) == 0);
-	CHECK(memcmp(nvlist_get_binary(nvl, name, &size), "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz")) == 0);
-	CHECK(size == sizeof("abcdefghijklmnopqrstuvwxyz"));
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_NVLIST);
-	CHECK(strcmp(name, "nvlist/nvlist/empty") == 0);
-	cnvl = nvlist_get_nvlist(nvl, name);
-	CHECK(nvlist_empty(cnvl));
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name != NULL);
-	CHECK(type == NV_TYPE_NVLIST);
-	CHECK(strcmp(name, "nvlist/nvlist") == 0);
-	cnvl = nvlist_get_nvlist(nvl, name);
-
-	ccookie = NULL;
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_BOOL);
-	CHECK(strcmp(cname, "nvlist/bool/true") == 0);
-	CHECK(nvlist_get_bool(cnvl, cname) == true);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_BOOL);
-	CHECK(strcmp(cname, "nvlist/bool/false") == 0);
-	CHECK(nvlist_get_bool(cnvl, cname) == false);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_NUMBER);
-	CHECK(strcmp(cname, "nvlist/number/0") == 0);
-	CHECK(nvlist_get_number(cnvl, cname) == 0);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_NUMBER);
-	CHECK(strcmp(cname, "nvlist/number/1") == 0);
-	CHECK(nvlist_get_number(cnvl, cname) == 1);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_NUMBER);
-	CHECK(strcmp(cname, "nvlist/number/-1") == 0);
-	CHECK((int)nvlist_get_number(cnvl, cname) == -1);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_NUMBER);
-	CHECK(strcmp(cname, "nvlist/number/UINT64_MAX") == 0);
-	CHECK(nvlist_get_number(cnvl, cname) == UINT64_MAX);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_NUMBER);
-	CHECK(strcmp(cname, "nvlist/number/INT64_MIN") == 0);
-	CHECK((int64_t)nvlist_get_number(cnvl, cname) == INT64_MIN);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_NUMBER);
-	CHECK(strcmp(cname, "nvlist/number/INT64_MAX") == 0);
-	CHECK((int64_t)nvlist_get_number(cnvl, cname) == INT64_MAX);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_STRING);
-	CHECK(strcmp(cname, "nvlist/string/") == 0);
-	CHECK(strcmp(nvlist_get_string(cnvl, cname), "") == 0);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_STRING);
-	CHECK(strcmp(cname, "nvlist/string/x") == 0);
-	CHECK(strcmp(nvlist_get_string(cnvl, cname), "x") == 0);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_STRING);
-	CHECK(strcmp(cname, "nvlist/string/abcdefghijklmnopqrstuvwxyz") == 0);
-	CHECK(strcmp(nvlist_get_string(cnvl, cname), "abcdefghijklmnopqrstuvwxyz") == 0);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_DESCRIPTOR);
-	CHECK(strcmp(cname, "nvlist/descriptor/STDERR_FILENO") == 0);
-	CHECK(fd_is_valid(nvlist_get_descriptor(cnvl, cname)));
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_DESCRIPTOR);
-	CHECK(strcmp(cname, "nvlist/descriptor/pipe_rd") == 0);
-	CHECK(fd_is_valid(nvlist_get_descriptor(cnvl, cname)));
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_BINARY);
-	CHECK(strcmp(cname, "nvlist/binary/x") == 0);
-	CHECK(memcmp(nvlist_get_binary(cnvl, cname, NULL), "x", 1) == 0);
-	CHECK(memcmp(nvlist_get_binary(cnvl, cname, &size), "x", 1) == 0);
-	CHECK(size == 1);
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_BINARY);
-	CHECK(strcmp(cname, "nvlist/binary/abcdefghijklmnopqrstuvwxyz") == 0);
-	CHECK(memcmp(nvlist_get_binary(cnvl, cname, NULL), "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz")) == 0);
-	CHECK(memcmp(nvlist_get_binary(cnvl, cname, &size), "abcdefghijklmnopqrstuvwxyz", sizeof("abcdefghijklmnopqrstuvwxyz")) == 0);
-	CHECK(size == sizeof("abcdefghijklmnopqrstuvwxyz"));
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname != NULL);
-	CHECK(ctype == NV_TYPE_NVLIST);
-	CHECK(strcmp(cname, "nvlist/nvlist/empty") == 0);
-	empty = nvlist_get_nvlist(cnvl, cname);
-	CHECK(nvlist_empty(empty));
-
-	cname = nvlist_next(cnvl, &ctype, &ccookie);
-	CHECK(cname == NULL);
-
-	name = nvlist_next(nvl, &type, &cookie);
-	CHECK(name == NULL);
-
-	nvlist_destroy(nvl);
-}
-
-static void
-send_nvlist(void)
-{
-	int status, socks[2];
-	pid_t pid;
-
-	if (socketpair(PF_UNIX, SOCK_STREAM, 0, socks) < 0)
-		err(1, "socketpair() failed");
-	pid = fork();
-	switch (pid) {
-	case -1:
-		/* Failure. */
-		err(1, "unable to fork");
-	case 0:
-		/* Child. */
-		close(socks[0]);
-		child(socks[1]);
-		_exit(0);
-	default:
-		/* Parent. */
-		close(socks[1]);
-		parent(socks[0]);
-		break;
-	}
-
-	if (waitpid(pid, &status, 0) < 0)
-		err(1, "waitpid() failed");
-}
-
-static void
-send_closed_fd(void)
-{
-	nvlist_t *nvl;
-	int error, socks[2];
-
-	if (socketpair(PF_UNIX, SOCK_STREAM, 0, socks) < 0)
-		err(1, "socketpair() failed");
-
-	nvl = nvlist_create(0);
-	nvlist_add_descriptor(nvl, "fd", 12345);
-	error = nvlist_error(nvl);
-	CHECK(error == EBADF);
-
-	error = nvlist_send(socks[1], nvl);
-	CHECK(error != 0 && errno == EBADF);
-}
-
-int
-main(void)
-{
-
-	printf("1..146\n");
-	fflush(stdout);
-
-	send_nvlist();
-	send_closed_fd();
-
-	return (0);
-}
